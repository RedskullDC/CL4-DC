head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2014.08.27.03.27.46;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.08.26.12.50.35;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@few notes, debug code hashed out
@
text
@#ifndef NEXTREC_C
#define NEXTREC_C

#include "DBdefs.h"
#include "cl4.h"
NODE_1* _stepfwd(TDinfo *TDptr);
char* DumpShortBits(short Input, char Output[20]);

int _nxtr(int TDNo, char *WorkArea, int SkipRecs, POS *Pos, EXPR *SelectExpr)
{
	TDinfo *TDptr;
	int v8;
	NODE_1 *N1p;
	//char Buff[20];

	//printf("_nxtr( TDno: x%04X (%3d),WorkArea = %s,SkipRecs = %d, POS = x%08X, EXPR: x%08X)\n", TDNo,TDNo,WorkArea,SkipRecs,Pos,SelectExpr);

	TDptr = _chktd(TDNo);
	v8 = check_bup_sem(TDptr->TDDBinfo);
	if ( v8 )
		derror(v8, 0, TDptr);
	
	v8 = 0;	// not really necessary, since above check means v8 = ZERO anyway

	//printf("_nxtr: field_0: x%04X ( %s )\n",TDptr->field_0,DumpShortBits(TDptr->field_0,Buff));
	
	if ( (TDptr->field_0 & 0x0210) != 0x0010 )
	{
		if ( TDptr->field_0 & 0x0200 )
		{
			relnode(TDptr->TDNodePtr);
			TDptr->TDNodePtr = 0;
			TDptr->field_0 &= 0xFDFFu;			// xxxx xx0x xxxx xxxx   clear 0200
		}
		
		if ( TDptr->field_0 & 0x0002 )							// This is only true for a temp table?
			return _picknxt(TDptr, WorkArea, SkipRecs, Pos);
    
		if ( !TDptr->KeyBuf1 )
			newseq(TDptr);
		
		if ( Pos )
			cdbrindex(Pos, 0);	// pointless code?

		TDptr->Key2Size = 0;
		if ( SkipRecs > 0 )
		{
			while ( 1 )
			{
				while ( 1 )
				{
					N1p = _stepfwd(TDptr);
					if ( N1p )
						break;
					// if !N1p, we are past end of records
					TDptr->field_0 |= 0x0010u;
LABEL_25:
					if ( !(TDptr->field_0 & 0x0010) )
					{
						++v8;
						//printf("_nxtr: V11 = %d, SkipRecs = %d\n",v8, SkipRecs);
						if ( v8 < SkipRecs )
							continue;
					}
					if ( !v8 )
						relseq(TDptr);
					return v8;
				}
				//------------
				if ( _match(N1p->Data, SelectExpr, TDptr->TableDefs) )
				{
					//printf("_nxtr: match == true\n");		// found a record which matches expression, jump out
					break;
				}
				//printf("_nxtr: match == false\n");
				if ( _beyond(SelectExpr, 0x18u, N1p->Data, TDptr->TableDefs) ) // 0x18 == "Less than or equal"
				{
					//printf("_nxtr: beyond == true\n");		// if true, there are more records left, but they don't satisfy our expression!
					TDptr->field_0 |= 0x0010u;
					if ( !v8 )
						relseq(TDptr);
					return v8;
				}
			}
			if ( !TDptr->Key2Size )
			{
				TDptr->Key2Size = cpybuf(TDptr->KeyBuf2, N1p->Data, TDptr->TDKeySize);
				TDptr->field_42 = 1;
			}
			if ( SkipRecs == 1 ) // if not skipping records, save to workarea
				tuptor(WorkArea, Pos, N1p->Data, TDptr->TableDefs);

			if ( N1p )
				goto LABEL_25;
			TDptr->field_0 |= 0x0010u;
		}
		if ( !v8 )
			relseq(TDptr);
	}
	return v8;	// Recs Skipped or read
}

// HACK! These should call through xenter()

int nxtr(int TDNo, char *WorkArea, POS *Pos, EXPR *Expr)
{
  return _nxtr(TDNo, WorkArea, 1, Pos, Expr);
}

// same as nxtr()
int nextr(int TDNo, char *WorkArea, POS *Pos, EXPR *Expr)
{
    return _nxtr(TDNo, WorkArea, 1, Pos, Expr);
}

// Pos = 0.  Assume no data re-positioning in output buffer
int getnxt(int TDno, char *WorkArea, EXPR *Expression)
{
  return _nxtr(TDno, WorkArea, 1, 0, Expression);
}

// nextset allows SkipRecs value to be specified
int nextset(int TDno, char *WorkArea, int SkipRecs, POS *Pos, EXPR *SelectExpr)
{
  return _nxtr(TDno, WorkArea, SkipRecs, Pos, SelectExpr);
}

#endif
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
	char Buff[20];
d25 1
a25 1
	printf("_nxtr: field_0: x%04X ( %s )\n",TDptr->field_0,DumpShortBits(TDptr->field_0,Buff));
d33 1
a33 1
			TDptr->field_0 &= 0xFDFFu;
d35 2
a36 1
		if ( TDptr->field_0 & 0x02 )
d72 1
a72 2
					printf("_nxtr: match == true\n");
					// found a record which matches expression, jump out
d78 2
a79 3
					// if true, there are more records left, but they don't satisfy our expression!
					printf("_nxtr: beyond == true\n");
					TDptr->field_0 |= 0x10u;
d100 1
a100 1
	return v8;
@
