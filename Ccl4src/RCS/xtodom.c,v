head	1.4;
access;
symbols;
locks
	leslie:1.4; strict;
comment	@ * @;


1.4
date	2020.02.09.12.34.12;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2019.04.05.04.31.05;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2017.01.11.02.23.59;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.05.02.36.33;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.4
log
@prior to X64 enhancement
@
text
@#ifndef XTODOM_C
#define XTODOM_C

#include <stdio.h>
#include <stdarg.h>			// for var args stuff
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"		// for bit field values

int xtodom(char *Dest, short FLDlen, unsigned short TDFtype, char *Src)
{
	int		v4;
	int		v8;
	unsigned short v6;
	short	v7;
	
	double	v10;
	double	v5	= 0.0;
	int		v12	= 0;
	short	v13	= 0;
	
	bool	Negative;

	//printf("xtodom() - FLDlen = %d, TDFtype = x%04X \n", FLDlen, TDFtype);
	//DumpBlock(Src,FLDlen);

	v4 = FLDlen;
	if ( TDFtype & 0x1C0 )											// 0000 0001 1100 0000	Numeric type
		v6 = (TDFtype & 0x1C0u) >> 6;
	else
	{
		v6 = (TDFtype & 0x0E00) ? ((TDFtype & 0x0E00) >> 9) : 0 ;	// 0000 1110 0000 0000	Numeric type
	}

//-----------------------

	v7 = v6 - 1;
	v8 = (v6 - 1);
	if ( v7 >= 0 )	// Ture if we are looking a numeric variable type
	{
		
		Negative = ((TDFtype & tdf_SIGNED) != 0);	//	0x0004 indicates allow signed value

		if ( v8 <= 0 && FLDlen <= 4 )	// integer types
		{
			if ( FLDlen <= 2 )	// FLDlen = 1 or 2
			{
				v13 = *(short*)Src;
				if ( v13 >= 0 )
					Negative = false;
				if (Negative)
					v13 = -v13;			// abs value. for rounding purposes. reverse later if necessary
			}
			else	// FLDlen = 3 or 4
			{
				v12 = *(int*)Src;
				if ( v12 >= 0 )
					Negative = false;
				if ( Negative )
					v12 = -v12;
			}
		}
		else	// v8 > 0 || FLDlen > 4 
		{
			v5 = *(double*)Src;
			if ( v5 >= 0.0 )
				Negative = false;
			else					// negative numbers always allowed for doubles
				v5 = -v5;
		}

		if ( v8 > 0 )
		{
			if ( TDFtype & 0x1C0 )
				v10 = v5 * _dbias[v8];
			else
				v10 = _addexp(v5, 8 * v8);
			v5 = v10 + 0.5;

			/*if ( FLDlen > 2 )	// no need to test these values? Just set V12, 13 anyway?  May or may not be used below
			{
				if ( FLDlen <= 4 )
					v12 = (int)v5;
			}
			else
				v13 = (short)v5;
			*/
			v12 = (int)v5;
			v13 = (short)v5;
		}
    
		switch ( FLDlen )
		{
			case 1:
				*Dest = (char)v13;					// byte || char
				break;
			case 2:
				itoms((short*)Dest, v13);			// short
				break;
			case 3:
				xitoms((int*)Dest, v12);			// ????
				break;
			case 4:
				ltoms((int*)Dest, v12);				// long
				break;
			case 6:
				xltoms((long long*)Dest, v5);		// long long
				break;
			default:								// double (length == 8)
				if ( FLDlen > 7 )
					dtoms((double*)Dest, v5);
				break;
		}
		if ( Negative )
			negate(Dest, FLDlen);
		//DumpBlock(Dest,FLDlen);
	}
	else
	{
		if ( TDFtype & tdf_STRING )					// 0x0002 = string value
			v4 = cpyseq(Dest, Src, FLDlen);
		else
			cpybuf(Dest, Src, FLDlen);
	}
	return v4;
}

#endif
@


1.3
log
@expand and tidy
@
text
@a31 3
		//v6 = TDFtype & 0xE00;
		//if ( TDFtype & 0xE00 )
		//	v6 = (TDFtype & 0xE00u) >> 9;
a32 1

@


1.2
log
@tidyup
@
text
@d10 1
a10 1
int xtodom(char *Dest, short FLDlen, unsigned short FLDtype, char *Src)
d12 2
a13 1
	int v4;
d15 1
a15 2
	short v7;
	int v8;
d17 4
a20 4
	double v10;
	double v5	= 0.0;
	int v12		= 0;
	short v13	= 0;
d22 1
a22 1
	bool Negative;
d24 1
a24 1
	//printf("xtodom() - FLDlen = %d, FLDtype = x%04X \n", FLDlen, FLDtype);
d28 2
a29 2
	if ( FLDtype & 0x1C0 )											// 0000 0001 1100 0000	Numeric type
		v6 = (FLDtype & 0x1C0u) >> 6;
d32 4
a35 4
		//v6 = FLDtype & 0xE00;
		//if ( FLDtype & 0xE00 )
		//	v6 = (FLDtype & 0xE00u) >> 9;
		v6 = (FLDtype & 0x0E00) ? ((FLDtype & 0x0E00) >> 9) : 0 ;	// 0000 1110 0000 0000	Numeric type
d45 3
a47 3
		//Negative = ((FLDtype >> 2) & 1);
		Negative = ((FLDtype & 0x0004) != 0);	//	0x0004 indicates allow signed value . default assume that we are dealing with a negative value
		//printf("xtodom 42: Negative = x%04X \n", (unsigned short)Negative);
d78 1
a78 1
			if ( FLDtype & 0x1C0 )
a119 1

a120 1

d124 1
a124 1
		if ( FLDtype & 2 )							// string value
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
#include <stdarg.h>		// for var args stuff
d8 1
d21 5
a25 1
	unsigned short Negative;
a26 1
printf("xtodom() - FLDlen = %d, FLDtype = x%04X \n", FLDlen, FLDtype);
d45 4
a48 4
		Negative = (FLDtype >> 2) & 1;	//	0x0004 indicates negative . default assume that we are dealing with a negative value
		printf("xtodom 42: Negative = x%04X \n", (unsigned short)Negative);

		if ( v8 <= 0 && FLDlen <= 4 )
d53 4
a56 4
				if ( v13 >= 0 )	// Positive value?
					Negative = 0;	// was +ve
				if ( Negative )
					v13 = -v13;	 // abs value. for rounding purposes. reverse later if necessary
d62 1
a62 1
					Negative = 0;
d71 2
a72 2
				Negative = 0;
			else
d83 2
a84 1
			if ( FLDlen > 2 )
a89 1
			{
d91 3
a93 1
			}
d99 1
a99 1
				*Dest = (char)v13;
d102 1
a102 1
				itoms((short*)Dest, v13);
d105 1
a105 1
				xitoms((int*)Dest, v12);
d108 1
a108 1
				ltoms((int*)Dest, v12);
d111 1
a111 1
				xltoms((long long*)Dest, v5);
d113 1
a113 1
			default:
d120 3
d126 1
a126 1
		if ( FLDtype & 2 )
@
