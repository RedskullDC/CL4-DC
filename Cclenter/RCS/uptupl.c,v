head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2016.06.17.05.59.54;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.12.08.12.50.42;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@switch to common code
@
text
@#ifndef UPDTUPL_C
#define UPDTUPL_C

#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

// not public in libcl4

bool inlist_0(short *v2, short a2)
{
	//printf("inlist_0(List: x%08X, a2: %d)\n",v2,a2);

	while( *v2 )
	{
		if (*v2++ == a2)
			return true;
	}
	return false;
}

// only called from _update() 
int _uptuple(char *Dest, char *Buffer, char *a3, POS *Pos, TDef *tdef, short *a6)
{
	char	*currptr;
	char	*v9;
	size_t	v14;
	size_t	NumBytes; 
	short	v11;

	//printf("_uptuple(Dest: x%08X,Buffer: x%08X,a3: x%08X,POS: x%08X, tdef: x%08X, a6: x%08X)\n" ,Dest,Buffer,a3,Pos,tdef,a6);

	for ( currptr = Dest; tdef->TDFentry; tdef++ )
	{
		if ( tdef->TDFtype & tdf_STRING )	// string variable
			NumBytes = _fwidth(Buffer, tdef->TDFsize, tdef->TDFtype);
		else
			NumBytes = tdef->TDFsize;
    
		if ( Pos )
		{
			v11 = cdbrindex(Pos, tdef->TDFentry);
			if ( v11 >= 0 )
				currptr += xtodom(currptr, tdef->TDFsize, tdef->TDFtype, &a3[v11]);
			else
				currptr += cpybuf(currptr, Buffer, NumBytes);
		}
		else
		{
			if ( !a6 || inlist_0(a6, tdef->TDFentry) )	// a6 points to a null terminated array of TDFentry values
			{
				if ( tdef->TDFtype & tdf_STRING )	// string variable
					v14 = _fwidth(a3, tdef->TDFsize, tdef->TDFtype);
				else
					v14 = tdef->TDFsize;
				v9 = a3;
			}
			else
			{
				v14 = NumBytes;
				v9 = Buffer;
			}
			currptr += cpybuf(currptr, v9, v14);
			a3 += tdef->TDFsize;
		}
		Buffer += NumBytes;
	}
	return currptr - Dest;
}

#endif
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
bool inlist_0(short *a1, short a2)
d12 1
a12 1
	short *v2;
a13 2
	//printf("inlist_0(List: x%08X, a2: %d)\n",a1,a2);
	v2 = a1;
d23 1
a23 1
int _uptuple(char *Dest, char *Buffer, char *a3, POS *Pos, TDef *TDefPtr, short *a6)
d25 5
a29 7
	TDef *tdef;
	char *currptr;
	char *v9;
	size_t v10;
	short v11;
	size_t v14;
	size_t NumBytes; 
d31 1
a31 1
	//printf("_uptuple(Dest: x%08X,Buffer: x%08X,a3: x%08X,POS: x%08X, TDefPtr: x%08X, a6: x%08X)\n" ,Dest,Buffer,a3,Pos,TDefPtr,a6);
d33 1
a33 2
	tdef = TDefPtr;
	for ( currptr = Dest; tdef->TDFentry; ++tdef )
@
