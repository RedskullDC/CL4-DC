head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.05.10.03.53.29;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.11.05.04.43.24;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.13.05.50.50;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@intermediate
@
text
@#ifndef DIFFKEY_C
#define DIFFKEY_C

#include <stdio.h>
#include <stdarg.h>				// for var args stuff
#include <sys/param.h>          // for MIN/MAX

#include "DBdefs.h"
#include "cl4.h"

// ********    Potential name conflict with diffkey()!!!  *********

int _diffkey(char *a1, char *a2, TDef *tdef)
{
	short TDFtype;
	short TDFsize;
	unsigned int v7; // edi@@7
	unsigned int v13; // [sp+14h] [bp-14h]@@6
	int v14; // [sp+18h] [bp-10h]@@1
	short v9; // ax@@11
	short v10; // ax@@14

	//printf("_diffkey(a1 = %s, a2 = %s, TDef = x%08X)\n",a1,a2,tdef);

	v14 = 0;
	while ( tdef->TDFentry && (TDFtype = tdef->TDFtype, TDFtype & tdf_KEY)) // indicates Key field
	{
		/*
		if ( TDFtype & 2 )				// string type, variable length
			v13 = _fwidth(&a1[v14], tdef->TDFsize, TDFtype);
		else
			v13 = tdef->TDFsize;
      
		if ( tdef->TDFtype & 2 )		// string type, variable length
			v7 = _fwidth(&a2[v14], tdef->TDFsize, tdef->TDFtype);
		else
			v7 = tdef->TDFsize;
		*/
		TDFsize = tdef->TDFsize;

		if ( TDFtype & 2 )		// string type, variable length
		{
			v13 = _fwidth(&a1[v14], TDFsize, TDFtype);
			v7	= _fwidth(&a2[v14], TDFsize, TDFtype);
		}
		else
		{
			v13 = TDFsize;		// both same size for numeric fields
			v7	= TDFsize;
		}

		// if fields differ in size, only compare minimum:  MIN(v7,v13)
		v9 = _diffattrib(&a1[v14], &a2[v14], MIN(v7,v13), TDFtype);	// v9 = numbytes that match
		//printf("_diffkey Match Bytes = %d\n",v9);
		
		if ( v9 < v13 || v9 < v7 )	// bytes that matched were less than either field size!
		{
			v14 += v9;
			if ( TDFtype & 0x10 && (v10 = numsz(&a2[v14], v7 - v9)) != 0 )
				v14 += v10;
			else
				v14++;	// min 1 byte for the \0
			//printf("_diffkey(v9<v7/13 v14 = %d)\n",v14);
			return v14;
		}
		v14 += v9;
		tdef++;
	}
	return v14;
}
#endif
@


1.2
log
@intermediate
@
text
@a19 1
	int v15; // [sp+18h] [bp-10h]@@13
d44 1
a44 1
			v7 = _fwidth(&a2[v14], TDFsize, TDFtype);
d49 1
a49 1
			v7 = TDFsize;
d58 3
a60 3
			v15 = v14 + v9;
			if ( TDFtype & 0x10 && (v10 = numsz(&a2[v15], v7 - v9)) != 0 )
				v14 = v15 + v10;
d62 1
a62 1
				v14 = v15 + 1;
@


1.1
log
@Initial revision
@
text
@d5 3
a7 1
#include <stdarg.h>		// for var args stuff
d13 1
a13 1
int _diffkey(char *a1, char *a2, TDef *TdefP)
d15 2
a16 3
	TDef *tdef; // esi@@1
	short TDFtype; // dx@@2
	unsigned int v6; // eax@@7
a17 1
	unsigned int v8; // eax@@9
a22 1
	short v11; // ax@@15
d24 1
a24 1
	//printf("_diffkey(a1 = %s, a2 = %s, TDef = x%08X)\n",a1,a2,TdefP);
a25 1
	tdef = TdefP;
d29 2
a30 1
		if ( TDFtype & 2 )
d35 8
a42 1
		if ( tdef->TDFtype & 2 )
d44 2
a45 2
			v6 = _fwidth(&a2[v14], tdef->TDFsize, tdef->TDFtype);
			v7 = v6;
d48 8
a55 6
			v7 = tdef->TDFsize;
       
		v8 = v13;
		if ( v7 <= v13 )
			v8 = v7;
		v9 = _diffattrib(&a1[v14], &a2[v14], v8, tdef->TDFtype);
d57 1
a57 1
		if ( v9 < v13 || v9 < v7 )
d59 3
a61 3
			v15 = (v9 + v14);
			if ( tdef->TDFtype & 0x10 && (v10 = numsz(&a2[v15], v7 - v9)) != 0 )
				v11 = v10 + v15;
d63 2
a64 3
				v11 = v15 + 1;
			v14 = v11;
			//printf("_diffkey(v9<v7/13 v14 = %d\n",v14);
d67 1
a67 1
		v14 = (v9 + v14);
a69 1
	//printf("_diffkey(v14 = %d\n",v14);
@
