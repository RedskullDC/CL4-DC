head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2015.08.21.02.12.27;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef FIELD_TO_BUF_C
#define FIELD_TO_BUF_C

#include <sys/types.h>	// for user calls
#include <pwd.h>
#include "DBdefs.h"
#include "cl4.h"

// getshvar() not called in clenter

char *fldtobuf(char *s, FLDdesc *fld, unsigned int MaxLen)
{
    int v8;
    double v16 = 0.0; 
    char Dest[1001];

    if ( fld->FLDtype != 'C' && fld->FLDlen )
        v16 = *(double *)fld->FLDdata;

	//printf("fldtobuf, type = %C, v16 = %G\n",fld->FLDtype,v16);
	switch ( fld->FLDtype )
    {
        case 'C':
            if ( MaxLen )
		        sprintf(s, "%-*.*s", MaxLen,MaxLen,(char *)fld->FLDdata);
			else
				cdbcpystr(s, (char *)fld->FLDdata, 0);
			break;
//---------------------
        case 'D':
        case 'T':
            if ( v16 <= 0.0 )				// error. can't covert to valid date/time
                cdbcpystr(Dest, " ", 0);
            else if ( fld->FLDtype == 'D' )
				makedate(Dest, v16);
            else
				maketime(Dest, v16);

			if ( MaxLen )
            {
				if ( MaxLen <= strlen(Dest) )
					cdbcpystr(s,Dest, 0);
				else
					sprintf(s, "%-*.*s", MaxLen, MaxLen, Dest);
            }
			else
                cdbcpystr(s, trim(Dest), 0);
			break;
//-----------------------
		case 'B':
        case 'I':
            if ( MaxLen )
                sprintf(s, "%*d", MaxLen, (int)v16);
			else
				sprintf(s, "%d", (int)v16);
			break;
//-------------------------
		case 'N':
            if ( MaxLen )
                sprintf(s, "%*ld", MaxLen, (int)v16);
            else
				sprintf(s, "%ld", (int)v16);
			break;
//-------------------------
		case 'K':
        case 'S':
            *s = 0;
			break;
//-------------------------
		default:
            v8 = typedp(fld->FLDtype);
            if ( MaxLen )
                sprintf(s, "%*.*f", MaxLen, v8, v16);
			else
				sprintf(s, "%.*f", v8, v16);
			break;
    }
	return s;
}

#endif
@
