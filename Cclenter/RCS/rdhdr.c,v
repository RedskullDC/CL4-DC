head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.06.18.12.30.44;	author leslie;	state Exp;
branches;
next	;


desc
@Read Database header (first 32 bytes), extract required operating details
@


1.1
log
@Initial revision
@
text
@#ifndef RDHDR_C
#define RDHDR_C

#include <endian.h> // experimental swapping
#include "DBdefs.h"
#include "cl4.h"

// pragmas stop GCC trying to re-align some fields to a 4 byte boundaries!!
#pragma pack(push, 1)
typedef struct 
{
	short	DBversion;
	short	DBpgsize;
	int		DBmaxpages;
	int		DBfreeaddress;
	short	DBnumtables;
	int		DBtableaddress;
	short	DBvflag;
	short	DBmaxtables;
	char	Unused[10];

}DBhdr;		// Database header data
#pragma pack(pop)

// from /usr/include/bits/byteswap.h
//__bswap_constant_32(x)
//__bswap_constant_16(x)

short _rdhdr(short fd, DBinfo *DBptr)
{
  int v2; // edx@@1
  short Version; // ax@@3
  unsigned char buf[32]; // [sp+10h] [bp-38h]@@2
  DBhdr hdr;

	//printf("_rdhdr( fd = x%04X, DBptr = x%08X\n", fd,DBptr);

	v2 = lseek64(fd, 0LL, 0);
	if ( v2 >= 0 && readfull(fd, buf, 32) == 32 )
	{
		DBptr->DBversion = buf[1] | (buf[0] << 8);
		DBptr->DBpgsize = buf[3] | (buf[2] << 8);
		DBptr->DBmaxpages = mstol((int*)&buf[4]);
		DBptr->DBfreeaddress = mstol((int*)&buf[8]);
		DBptr->DBnumtables = buf[13] | (buf[12] << 8);
		DBptr->DBtableaddress = mstol((int*)&buf[14]);
		DBptr->DBvflag = buf[19] | (buf[18] << 8);
		DBptr->DBmaxtables = buf[21] | (buf[20] << 8);
		DBptr->DBSemaphore = 0;
		Version = DBptr->DBversion;

		v2 = lseek64(fd, 0LL, 0);
		if ( v2 >= 0 && readfull(fd,(char*) &hdr, sizeof(DBhdr)) == sizeof(DBhdr))
		{
			DBptr->DBversion		= __bswap_constant_16(hdr.DBversion);
			DBptr->DBpgsize			= __bswap_constant_16(hdr.DBpgsize);
			DBptr->DBmaxpages		= __bswap_constant_32(hdr.DBmaxpages);
			DBptr->DBfreeaddress	= __bswap_constant_32(hdr.DBfreeaddress);
			DBptr->DBnumtables		= __bswap_constant_16(hdr.DBnumtables);
			DBptr->DBtableaddress	= __bswap_constant_32(hdr.DBtableaddress);
			DBptr->DBvflag			= __bswap_constant_16(hdr.DBvflag);
			DBptr->DBmaxtables		= __bswap_constant_16(hdr.DBmaxtables);
			DBptr->DBSemaphore		= 0;
			Version					= DBptr->DBversion;

			printf("_rdhdr: hdr.DBversion      = %d\n",DBptr->DBversion);
			printf("_rdhdr: hdr.DBpgsize       = %d\n",DBptr->DBpgsize);
			printf("_rdhdr: hdr.DBmaxpages     = %d\n",DBptr->DBmaxpages);	
			printf("_rdhdr: hdr.DBfreeaddress  = %d\n",DBptr->DBfreeaddress);
			printf("_rdhdr: hdr.DBnumtables    = %d\n",DBptr->DBnumtables);
			printf("_rdhdr: hdr.DBtableaddress = %d\n",DBptr->DBtableaddress);
			printf("_rdhdr: hdr.DBvflag        = %d\n",DBptr->DBvflag);
			printf("_rdhdr: hdr.DBmaxtables    = %d\n",DBptr->DBmaxtables);

		}
	}
	else
	{
		Version = -1;
	}
	return Version;
}

#endif

@
