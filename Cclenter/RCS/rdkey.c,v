head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.08.27.03.26.58;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef READKEY_C
#define READKEY_C

#include "DBdefs.h"
#include "cl4.h"


// another function called _diffkey()!!! 
// watch for name conflict

bool diffKey(int TDno) // Check to see if any Key fields have been altered since last read from disk
{
	char *v1;
	TDesc *TTptr;
	FLDdesc *fld;
	int v3;
	size_t NumBytes;

	//printf("diffKey(TDno = %d)\n" ,TDno);

	NumBytes = 0;
	TTptr = &ttab[TDno];
	v1 = mmalloc(TTptr->TDrecsize + 1);
	tttorec(TDno, v1, 2);		// save currently loaded values to test buffer
	for ( fld = TTptr->TTfields; fld->FLDelemID && fld->FLDstat < 0; ++fld )
		NumBytes += fld->FLDlen;
	//DumpBlock(v1, NumBytes);
	//DumpBlock(TTptr->TDworkarea1,NumBytes);

	v3 = cmpbuf(TTptr->TDworkarea1, v1, NumBytes);
	mfree_0(v1);
	//printf("diffKey : returned %s\n", v3 == 0 ? "true":"false");
	return v3 == 0;
}


void rdkey(int TDno, int NameSrch)
{
	TDesc *v11;
	TDesc *TTptr;
	FLDdesc *fld;
	char *v4;
	int v6;
	int v9;
	int v10;
	short v8;
	int ErrorCode;

	//printf("rdkey(TDno = %d, %d)\n" ,TDno, NameSrch);

	TTptr = &ttab[TDno];
	v10 = 0;
	//printf("rdkey: TDlocked = x%02X\n" ,TTptr->TDlocked);

	// either no record loaded, or key fields have been changed.
	// if so, try and load record with key value that is currently loaded
	if ( !(TTptr->TDlocked & 0x20) || diffKey(TDno) )
	{
		v10 = 1;
		tttorec(TDno, TTptr->TDworkarea1, 1);
		if ( getr( rtdget(TTptr), TTptr->TDworkarea1, 0) <= 0 )
		{
			//printf("rdkey: getr() returned <=0 (record didn't exist)\n");
			TTptr->TDlocked &= ~ttl_AVAIL;	// clear record loaded flag.
		}
		else
		{
			//printf("rdkey: getr() returned >0 (record existed)\n");
			//DumpTDptr(_chktd(v2),true);
			ravail(TDno);
			TTptr->TDlocked |= ttl_AVAIL;	// set record loaded flag.
		}
	}
//------------------------

	for ( fld = TTptr->TTfields; fld->FLDelemID; ++fld )
	{
		if ( fld->FLDtype == 'K' )
		{
			v4 = NameSrch ? fld->FLDname : fld->FLDdata;		// NameSrch steers whether search by Name/Data. Appears unused
			//v6 = findtd(TTptr->DBcontext, v4, TTptr->DBnumber);	// libcl4.  No Context involved here, since our TD list is private.
			v6 = findtd(v4, TTptr->DBnumber);
			if ( v6 > 0 )
			{
				rfree(v6, 0);
				tfree(v6);
				v11 = &ttab[v6];
				v11->TDlocked &= 0xFFDFu;
				if ( TTptr->TDlocked & 0x0020u )
				{
					if ( tdtotd(v6, TDno, 1, 1) )
					{
						v8 = getr(rtdget(v11), v11->TDworkarea1, 0);
						ErrorCode = v8;
						if ( v8 <= 0 )	// error or not-found
						{
							if ( v8 < 0 )	// error
							{
								dberror(ErrorCode, 0,rtdget(v11));
							}
							// not found
							rfree(v6, 0);
							tfree(v6);
						}
						else			// record found
						{
							ravail(v6);
							v11->TDlocked |= 0x0001u;
							cpybuf(v11->TDworkarea2, v11->TDworkarea1, v11->TDrecsize);
						}
					}
				}
			}
		}
	}
	if ( v10 )
	{
		tfree(TDno);
		TTptr->TDlocked &= ~ttl_AVAIL;	// clear table loaded flag
	}
}
#endif
@
