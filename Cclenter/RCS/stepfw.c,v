head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2015.04.08.03.16.17;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.17.05.44.14;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.18.01.13.43;	author leslie;	state Exp;
branches;
next	;


desc
@Move forward through a record, according to any select constraint set
@


1.3
log
@intermediate version
@
text
@#ifndef STEPFWD_C
#define STEPFWD_C

#include "DBdefs.h"
#include "cl4.h"
int findnxt( TDinfo *TDptr)
{
	PAGE *PagePtr;
	int v2;
	//char *v3;
	int v4;
	short Depth;
	int PageNo;
	short N1_2idx;

	//printf("findnxt(TDptr: x%08X)\n", TDptr);
	PageNo = 0;
	Depth = _rhead(TDptr->TDDBinfo, TDptr->TDindexOff, &PageNo);
	for ( TDptr->Key1Size = 0; Depth > 1; --Depth )
	{
		PagePtr = _indexpg(TDptr, PageNo);
		if ( _scanpg(PagePtr, TDptr, &N1_2idx, TDptr->field_3A | 8) )
			++N1_2idx;
		
		PageNo = mstol((int *)&PagePtr->DataStart[4 * N1_2idx]);
		if ( N1_2idx != PagePtr->NumEntries )
		{
			v2 = _itosz(PagePtr, N1_2idx);
			//v3 = _itoptr(PagePtr, N1_2idx);
			v4 = TDptr->TDKeySize;
			if ( v4 > (unsigned int)v2 )
				v4 = v2;
			//TDptr->Key1Size = cpybuf(TDptr->KeyBuf1, v3, v4);
			TDptr->Key1Size = cpybuf(TDptr->KeyBuf1, _itoptr(PagePtr, N1_2idx), v4);
		}
	}
	return PageNo;
}

NODE_1*	_stepfwd(TDinfo *TDptr)
{
	short v1;
	int PageNo;
	NODE_1 *result;
	NODE *NodePtr;
	NODE *v5;
	short N1idx;

	//printf("_stepfwd(TDptr: x%08X)\n", TDptr);
	
	while ( 1 )
	{
		if ( TDptr->TDNodePtr && TDptr->TDNodePtr->NumEntries > TDptr->N1_2idx ) // Node loaded, and entries left
		{
			//printf("_stepfwd: NodePtr set, NumEntries = %3d, N1_2idx = %3d\n",TDptr->TDNodePtr->NumEntries, TDptr->N1_2idx);
			v5 = TDptr->TDNodePtr;
			N1idx = TDptr->N1_2idx;
			TDptr->N1_2idx = N1idx + 1;                 // Next Record
			result = &v5->NODE1ptr[N1idx];
			return result;
		}
		//printf("_stepfwd: NodePtr not set, or NumEntries <= N1_2idx\n");
		v1 = cpybuf(TDptr->TDKeyDefs, TDptr->KeyBuf1, TDptr->Key1Size);
		TDptr->KeyDefSize = v1;
		if ( TDptr->TDNodePtr )
		{
			if ( !v1 )
				break;
		}
		PageNo = findnxt(TDptr);
		if ( !PageNo )
			break;
		//printf("_stepfwd: PageNo = x%04X (%3d)\n", PageNo, PageNo);
		relnode(TDptr->TDNodePtr);
		NodePtr = getnode(TDptr, PageNo, 0);
		TDptr->TDNodePtr = NodePtr;
		_scanpg((PAGE *)NodePtr, TDptr, &TDptr->N1_2idx, TDptr->field_3A);
		TDptr->field_3A = 1;
	}
	return 0;     // \0 means we have reached the end of the line. No more data!
}

#endif
@


1.2
log
@minor tidy
@
text
@d10 1
a10 1
	char *v3;
d29 1
a29 1
			v3 = _itoptr(PagePtr, N1_2idx);
d33 2
a34 1
			TDptr->Key1Size = cpybuf(TDptr->KeyBuf1, v3, v4);
@


1.1
log
@Initial revision
@
text
@d49 2
a50 2

	if ( TDptr->TDNodePtr && TDptr->TDNodePtr->NumEntries > TDptr->N1_2idx ) // Node loaded, and entries left
d52 13
a64 10
LABEL_9:
		//printf("_stepfwd: NodePtr set, NumEntries = %3d, N1_2idx = %3d\n",TDptr->TDNodePtr->NumEntries, TDptr->N1_2idx);
		v5 = TDptr->TDNodePtr;
		N1idx = TDptr->N1_2idx;
		TDptr->N1_2idx = N1idx + 1;                 // Next Record
		result = &v5->NODE1ptr[N1idx];
	}
	else
	{
		while ( 1 )
d66 1
a66 10
			//printf("_stepfwd: NodePtr not set, or NumEntries <= N1_2idx\n");
			v1 = cpybuf(TDptr->TDKeyDefs, TDptr->KeyBuf1, TDptr->Key1Size);
			TDptr->KeyDefSize = v1;
			if ( TDptr->TDNodePtr )
			{
				if ( !v1 )
					break;
			}
			PageNo = findnxt(TDptr);
			if ( !PageNo )
a67 8
			//printf("_stepfwd: PageNo = x%04X (%3d)\n", PageNo, PageNo);
			relnode(TDptr->TDNodePtr);
			NodePtr = getnode(TDptr, PageNo, 0);
			TDptr->TDNodePtr = NodePtr;
			_scanpg((PAGE *)NodePtr, TDptr, &TDptr->N1_2idx, TDptr->field_3A);
			TDptr->field_3A = 1;
			if ( TDptr->TDNodePtr && TDptr->TDNodePtr->NumEntries > TDptr->N1_2idx )
				goto LABEL_9;
d69 9
a77 1
		result = 0;     // \0 means we have reached the end of the line. No more data!
d79 1
a79 1
	return result;
@
