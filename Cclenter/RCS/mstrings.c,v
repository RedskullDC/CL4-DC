head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2016.07.28.04.00.41;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2016.03.08.00.07.11;	author leslie;	state Exp;
branches;
next	;


desc
@initial
@


1.2
log
@move to common code
@
text
@#ifndef MSTRINGS_C
#define MSTRINGS_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <setjmp.h>     /* jmp_buf, setjmp, longjmp */
#include <string.h>		// for void *memset(void *s, int c, size_t n);

#include "DBdefs.h"
#include "cl4.h"

void* mfree_0(void *ptr)
{
	if ( ptr )
		free(ptr);
	return 0;
}

void* mmalloc(unsigned int required)
{
	void *buf;
	
	if ( required < 4 )
		required = 4;

	buf = malloc(required);
	if ( !buf )
	{
		if ( !mbuf )
		{
			eprint("was mmalloc_init() called? Not enough memory - bye\n");
			abort();
		}
		mexit(-99);
	}
	memset(buf, 0, required);
	return buf;
}

void* mrealloc(void *ptr, int oldsize, size_t size)
{
	void *buf; // esi@@1

	buf = realloc(ptr, size);
	if ( !buf )
		mexit(-99);

	if ( size > oldsize )			// clear area after oldsize 
		memset(buf + oldsize, 0, size - oldsize);

	return buf;
}

void* mmalloc_init(void)
{
	mbuf = malloc(1000u);	// src/DBdefs.h:char*      mbuf;  //used by mmalloc_init(), mmalloc()
	return mbuf;
}

char *mstrcpy(char *Src, ...)
{
	unsigned int NewSize;
	char *v4;
	char *v9;
	char *v16;
	va_list va;
	
	// first section works out the total length of the new string required.

	va_start(va, Src);
	NewSize = 0;
	v4 = Src;
	//while( v4 && *v4 )	// *** error ***! halts at null string, may not be correct
	while( v4 )
	{
	//	printf("mstrcpy - v4 = \"%s\" [%08X] (%d)\n",v4,v4,strlen(v4));
		NewSize += strlen(v4);
		v4 = va_arg(va,char*);
	}
	va_end(va);	// keep var_arg macros happy

	//printf("mstrcpy - NewSize = %d\n",NewSize);
	
	// NewSize now equals the buffer size required (less \0).
	v16 = mmalloc(NewSize + 1);
	
	//printf("mstrcpy - V16 = %08X\n",v16);

	// go back to start of the list
	va_start(va, Src);
	v9 = v16;
	v4 = Src;
	while (v4)
	{
		while(*v4)
			*v9++ = *v4++;

		v4 = va_arg(va,char*);
	}
	va_end(va);	// keep var_arg macros happy
	*v9 = 0;
	return v16;
}

char*	mstrcat(char *a1, char *a2, ...)
{
	int v2;
	char *v4;
	char *v9;
	char *v10;
	size_t v16; 
	va_list va; 

	//printf("mstrcat(a1 = %s, a2 = %s)\n",a1,a2);

	va_start(va, a2);
	v2 = 0;
	v16 = strlen(a1);
	v4 = a2;
	// first section works out the total length of the new string required.
	while (v4)
	{
		while (*v4)
		{
			v2++;
			v4++;
		}
		v4 = va_arg(va,char*);
	}

	v9 = (char*)mrealloc(a1, v16, v2 + v16 + 1);
	v10 = &v9[v16];		// Start at byte after original string
	va_end(va);			// keep var_arg macros happy

	va_start(va, a2);	// go back to start of the list
	v4 = a2;			// First time through use arg#2, then hit the VA list 
	while ( v4 )
	{
		while ( *v4 )
			*v10++ = *v4++;

		v4 = va_arg(va,char*);
	}	

	va_end(va);	// keep var_arg macros happy
	*v10 = 0;
	return v9;
}

char* mstrncpy(char *Dest, int MaxLen, char *Src, ...)
{
	int BytesRemaining;
	char *v4;
	char *v6;
	va_list va;

	va_start(va, Src);
	BytesRemaining = MaxLen;
	v4 = Dest;
	v6 = Src;
	//while (v6 && *v6 && BytesRemaining )
	while (v6 && BytesRemaining )
	{
		while( *v6 && --BytesRemaining )
			*v4++ = *v6++;

		v6 = va_arg(va,char*);
	}

	va_end(va);	// keep var_arg macros happy
	*v4 = 0;
	return Dest;
}

#endif
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
void* mmalloc(unsigned int a1)
d21 4
a24 2
	unsigned int v1; // esi@@1
	void *v2; // edi@@3
d26 2
a27 5
	v1 = a1;
	if ( a1 <= 3 )
		v1 = 4;
	v2 = malloc(v1);
	if ( !v2 )
d36 2
a37 2
	memset(v2, 0, v1);
	return v2;
d40 1
a40 1
void* mrealloc(void *ptr, int a2, size_t size)
d42 1
a42 1
	void *v3; // esi@@1
d44 2
a45 2
	v3 = realloc(ptr, size);
	if ( !v3 )
d47 5
a51 3
	if ( size > a2 )
		memset(v3 + a2, 0, size - a2);
	return v3;
d56 2
a57 5
	void *result; // eax@@1

	result = malloc(1000u);
	mbuf = result;
	return result;
d73 2
a74 1
	while( v4 && *v4 )
d76 1
d80 1
a80 1
	// NewSize now equals the buffer size required.
d82 3
d86 5
a90 1
	va_start(va, Src);	// go back to start of the list
d95 1
a95 2
		for ( ;*v4; )
		{
d97 1
a97 1
		}
d123 1
a123 1
		for ( ;*v4; )
d132 3
a134 2
	v10 = &v9[v16];	//Start at byte after original string
	
d139 1
a139 2
		for ( ;*v4; )
		{
d141 1
a141 1
		}
a159 1

d161 2
a162 1
	while (v6 && *v6 && BytesRemaining )
a164 1
		{
d166 1
a166 1
		}
@
