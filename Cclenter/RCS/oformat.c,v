head	1.4;
access;
symbols;
locks
	leslie:1.4; strict;
comment	@ * @;


1.4
date	2015.08.21.01.06.48;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2015.08.21.00.25.54;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.04.24.05.44.33;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.20.23.24.08;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.4
log
@intermediate
@
text
@#ifndef OFORMAT_C
#define OFORMAT_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include <monetary.h>	// for strfmon()
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

char *nfmt(char *a1, const char *format, double a3)
{
    signed int v3; // edi@@3
    const char *v4; // edx@@3
    char *i; // ecx@@3
    char *v6; // eax@@5
    //unsigned int v7; // ecx@@12
    size_t v8; // esi@@12
    int DecPlaces; // edx@@13

    int		NumLen = 0;
    bool	isNegative = false; 
    unsigned short mask_flg;			// bitmask which is set from features found in the format Mask
    char	NumBuff[112];
    char	v18[128];

	//printf("nfmt(a3 = '%g', Mask = '%s')\n", a3,format);

    if ( strchr(format, '%') )
    {
        strfmon(a1, 0x20u, format, a3);
        return a1;
    }

    v3 = 2;
    v4 = format;
    for ( i = v18; *v4; v4++ )
    {
        *i = *v4;
        if ( v3 == 1 )
        {
            v6 = i++;
            *v6 |= 0x80u;
            v3 = 2;
        }
        else if ( *v4 == '\\' )
			v3 = 1;
		else
			i++;
    }
    if ( v3 == 1 )
        i++;
    *i = 0;

//--------------------
    mask_flg = issign(v18);
//printf("nfmt(v18 = '%s', mask_flg = %d [x%04X])\n",v18,mask_flg,mask_flg);
    //v7 = strlen(v18) + 1;
    //v8 = v7 - 1;
    v8 = strlen(v18);
    if ( v8 > 0 )
    {
        NumLen = getdlen(v18, v8, mask_flg);			// v8 ignored by getdlen
        DecPlaces = getdp(v18, mask_flg);
        isNegative = 0.0 > a3;
        if ( DecPlaces && a3 == 0.0)
        {
            fillbuf(NumBuff, NumLen, ' ');
            NumBuff[NumLen] = 0;
        }
        else
        {
            if (isNegative)
				a3 = -a3;
            sprintf(NumBuff, "%*.*f", NumLen, DecPlaces, a3);
			//printf("nfmt(NumBuff = '%s') NumLen = %d, DecPlaces = %d, a3 = %g\n", NumBuff,NumLen,DecPlaces,a3);
        }
    }

    if ( !v8 || NumLen < (unsigned int)lenstr(NumBuff) || isNegative && !(mask_flg & 1) )
    {
        if ( mask_flg & 0x20 )		// "V" virtual decimal point
            --v8;
        else if ( mask_flg & 4 )	// true if trailing CR/DB is in fmt string
			++v8;

		fillbuf(a1, v8, '?');
        a1[v8] = 0;
        return a1;
    }
    return form(a1, NumBuff, v18, mask_flg, isNegative);
}

unsigned short issign(char *a1)	// does the output number need to be signed in anyway
{
    unsigned short MaskBits = 0;
	char *v3;
    char *i;

    switch ( *a1 )				// look at first char in string
    {
        case '\0':
            return 0;			// Null string, no formatting flags required
        case '(':
        case '+':
        case '-':
        case '<':
            MaskBits = 0x01u;			// 0x01 leading sign
            if ( a1[1] == *a1 )
                MaskBits = 0x09u;		// 0x08 indicates multiple leading signs
            break;
        case '#':
        case '&':
        case '*':
        case '.':
        case '9':
        case 'C':
        case 'D':
        case 'V':
        case 'Z':
        case 'c':
        case 'd':
        case 'v':
        case 'z':
            break;

        default:
            if ( a1[1] != *a1 )
                break;
            MaskBits = 0x18u;
            currency_symbol = a1[1];
            v3 = a1;
            if ( !*a1 )
                goto LABEL_17;
            do
            {
                if ( *v3 == currency_symbol )
                    *v3 = '$';
                v3++;
            }
            while ( *v3 );
            break;
    }

    for ( i = a1; *i; i++ )
    {
        if ( *i == 'v' || *i == 'V' )	// 0x20 == virtual decimal point
			MaskBits |= 0x20u;					
        else if ( *i == '$' )			// 0x10 indicates currency found
			MaskBits |= 0x10u;
    }

LABEL_17:
    switch ( a1[lenstr(a1) - 1] )	// examine last char in buffer
    {
        case '+':
        case '-':
            if ( !(MaskBits & 1) )		// if no leading sign, allow trailing sign
                MaskBits |= 0x3u;
            break;
        case 'C':
        case 'D':
        case 'c':
        case 'd':
            MaskBits |= 0x07u;			// accounting CR/DB or cr/db
            break;
    }
    return MaskBits;
}

int getdlen(char *a1, int a2, unsigned short a3)
{
    int v3; // esi@@1
    char *i; // edx@@1
    int result; // eax@@7

    v3 = 0;
    for ( i = a1; *i; ++i )
    {
        switch ( *i )
        {
            case '#':
            case '$':
            case '&':
            case '(':
            case '*':
            case '+':
            case '-':
            case '.':
            case '9':
            case '<':
            case 'V':
            case 'Z':
            case 'v':
            case 'z':
                ++v3;
                break;
            default:
                continue;
        }
    }
    if ( (a3 & 5) == 1 )
        --v3;
    result = v3 - 1;
    if ( !(a3 & 0x10) )
        result = v3;
    return result;
}

int getdp(char *a1, unsigned short Mask)		// find the number of decimal places required for the result string
{
    int result = 0;
    char *v3;
    char *i;

    v3 = a1;
    if ( *a1 )
    {
        if ( *a1 == '.' || *a1 == 'v' || *a1 == 'V' )
        {
LABEL_9:
            if ( *v3 )
            {
                for ( i = v3 + 1; *i; ++i )
                {
                    if ( !(Mask & 2) || *i != '+' && *i != '-' && *i != 'd' && *i != 'D' && *i != 'c' && *i != 'C' )
                    {
                        if ( *i != '>' && *i != ')' && *i != '0' && *i != '/' && *i != ' ' && *i != '_'
                          && (*i == '#' || *i == 'z' || *i == 'Z' || *i == '&' || *i == '9') )
                            result++;
                    }
                }
            }
        }
        else
        {
            while ( 1 )
            {
                ++v3;
                if ( !*v3 )
                    break;
                if ( *v3 == '.' || *v3 == 'v' || *v3 == 'V' )
                    goto LABEL_9;
            }
        }
    }
    return result;
}

char *form(char *OutBuff, char *Src, char *Mask, unsigned short mask_flg, bool Negative)
{
    char *Dest;
	char *i;
	
	bool ShowSign;
	bool DollarShown = false;	// flag to indicate '$' has appeared in output string
    
	char v10;
	
	//printf("form(Src = '%s', Mask = %s, mask_flg = x%04X, Negative = %s)\n", Src,Mask,mask_flg,Negative? "true" : "false");
    for ( i = Src; *i == ' '; i++ )
        ;
    if ( *i == '0' )
        *i = ' ';

    ShowSign = (mask_flg >> 3) & 1;	// 0x0008 multiple leading signs flag bit
    Dest = OutBuff;

	//Src = a2;
    //Mask = a3;
    while ( *Mask )
    {
        switch ( *Mask )
        {
            case ',':
                if (isdigit(*(Dest - 1)))
				{
					*Dest++ = *Mask++;
					break;
				}
                if ( *(Dest - 1) == '*' )
                {
                    *Dest = '*';
                }
                else
                {
                    if ( mask_flg & 0x18 )
                    {
                        *Dest = *(Dest - 1);
                        *(Dest - 1) = *(Dest - 2);
                        *(Dest - 2) = ' ';
                    }
                    else
                    {
                        if ( *(Dest - 1) == ' ' )
						{
                            *Dest++ = ' ';
						    Mask++;
							break;
						}
                        *Dest = *(Dest - 1);
                        *(Dest - 1) = ' ';
                    }
                }
                Dest++;
                Mask++;
                break;
            
			case 'V':	// This is an assumed decimal point. An assumed decimal point is never printed, it is used to align the number and the mask.
            case 'v':
                Src++;
                --Dest;	//******
                Dest++;
                Mask++;
                break;
            
			case '.':	// This character is a decimal point. A decimal point is always printed if there is a number to print.
                if ( isdigit(*(Dest - 1)) || Mask[1] == '&' || Mask[1] == '9' )
				{
				    *Dest++ = *Mask++;
					Src++;
				}
                else if ( *Src != ' ' )
				{
	                *Dest++ = *Src++;
					Mask++;
				}
				else
				{
					v10 = *(Dest - 1);
					*Dest = v10;
					
					if ( v10 != '*' )		// v7 == '*' means *(Dest - 1) was NOT a number
						*(Dest - 1) = ' ';

					Src++;
					Dest++;
					Mask++;
				}
				break;

            case '&':	// These are fill characters. Unless this position is occupied by a number it is filled with a zero (0).
            case '9':
                
				if ( *Src != ' ' )
					*Dest++ = *Src;
				else
					*Dest++ = '0';
				Src++;
				Mask++;
				break;

			case '(':
            case '+':
            case '-':
            case '<':
                if ( mask_flg & 8 )	// multiple leading signs flag bit
                {
                    if ( ShowSign )	// Do we need to add sign to dest buffer?
                    {
                        if ( *Mask == '+' && Negative )
						{
							*Dest++ = '-';
							Mask++;
						}
                        else if ( !Negative )
						{
							*Dest++ = ' ';
							Mask++;
						}
						else
						{
							*Dest++ = *Mask++;
						}
						ShowSign = false;	// indicate sign has been added to dest for next loop around
						break;
                    }
                    if ( *Src == ' ' )
                    {
                        v10 = *(Dest - 1);
                        *Dest = v10;
                        *(Dest - 1) = ' ';
                        Src++;
                    }
                    else
                    {
                        if ( mask_flg & 0x10 && !DollarShown )
                        {
                            *Dest = currency_symbol;
                            DollarShown = true;
                        }
                        else
                        {
                            *Dest = *Src++;
                        }
                    }
                }
                else
                {
                    if ( *Mask == '+' && Negative )
                    {
						*Dest++ = '-';
						Mask++;
						break;
                    }
                    else if ( !Negative )
                    {
						*Dest++ = ' ';
						Mask++;
						break;
                    }
                    *Dest = *Mask;
                }
                Dest++;
                Mask++;
                break;
            
			case '#':	// Space fill (or zero suppression) character. Unless this position is occupied by a number it is filled with a space.
            case 'Z':
            case 'z':
				*Dest++ = *Src++;	// Doesn't look like that is what is happening.....??
                Mask++;
                break;

            case '$':
                if ( !DollarShown )
				{
					*Dest++ = currency_symbol;
					DollarShown = true;
					Mask++;
					break;
				}
                if ( *Src != ' ' )
                {
	                *Dest++ = *Src++;
					Mask++;
					break;
				}
                if ( !DollarShown )	// unreachable?
				{
					Src++;
					Dest++;
					Mask++;
					break;
				}

				v10 = *(Dest - 1);
                if ( v10 != currency_symbol )
                {
                    *Dest++ = ' ';
				}
				else
				{
				    *(Dest - 1) = ' ';
				    *Dest++ = v10;
				}
				Src++;
				Mask++;
				break;

            case '*':				// Asterisk fill character. Unless this position is occupied by a number it is filled with an asterisk
                if ( *Src == ' ' )
                    *Dest++ = *Mask;
                else
                    *Dest++ = *Src;
				Src++;
                Mask++;
                break;

			case ')':		// This is a fixed accounting parenthesis that is used in place of a minus sign to indicate a negative number. 
            case '>':		// A single parenthesis generally closes a mask that begins with an opening parenthesis.
				if ( Negative )
					*Dest++ = *Mask;
				else
					*Dest++ = ' ';
				Mask++;
				break;

			case 'D':		// Fixed accounting indicator that is used in place of a trailing sign to indicate a negative number. Negative numbers are followed by 'db'.
            case 'd':
                if ( !Negative )
				{
                    *Dest++ = ' ';
                    *Dest = ' ';
				}
				else
				{
					*Dest++ = *Mask;
					if ( *Mask == 'd' )
					    *Dest = 'b';
					else
					    *Dest = 'B';
				}
				Dest++;
				Mask++;
				break;
            
			case 'C':		// Fixed accounting indicator that is used in place of a trailing sign to indicate a negative number. Negative numbers are followed by 'cr'.
            case 'c':
                if ( !Negative )
                {
                    *Dest++ = ' ';
                    *Dest = ' ';
                }
				else
				{
					*Dest++ = *Mask;
					if ( *Mask == 'c' )
					    *Dest = 'r';
					else
					    *Dest = 'R';
				}
				Dest++;
				Mask++;
				break;
			
            case '_':		// Underscore character (_) is used to indicate a fixed space. A space is always left at this position.
 
				*Dest++ = ' ';
				Mask++;
				break;

			case ' ':
            case '/':
            case '0':
			default:				// default action, just copy character unmodified
                
				*Dest++ = *Mask++;
                break;
        }
    }
    *Dest = 0;
    return OutBuff;
}

#endif
@


1.3
log
@intermediate
@
text
@d98 1
a98 1
    unsigned short v1 = 0;
d102 1
a102 1
    switch ( *a1 )
d110 1
a110 1
            v1 = 0x01u;			// 0x01 leading sign
d112 1
a112 1
                v1 = 0x09u;		// 0x08 indicates multiple leading signs
d132 1
a132 1
            v1 = 0x18u;
d150 1
a150 1
			v1 |= 0x20u;					
d152 1
a152 1
			v1 |= 0x10u;
d160 2
a161 2
            if ( !(v1 & 1) )		// if no leading sign, allow trailing sign
                v1 |= 0x3u;
d167 1
a167 1
            v1 |= 0x07u;			// accounting CR/DB or cr/db
d170 1
a170 1
    return v1;
d212 1
a212 1
int getdp(char *a1, unsigned short a2)		// find the number of decimal places required for the result string
d228 1
a228 1
                    if ( !(a2 & 2) || *i != '+' && *i != '-' && *i != 'd' && *i != 'D' && *i != 'c' && *i != 'C' )
d254 9
a262 8
    char *Dest; // esi@@5
    char v7; // al@@19
    char v10; // al@@33
    unsigned int v14; // [sp+0h] [bp-18h]@@5
    signed int v15; // [sp+4h] [bp-14h]@@5
    char *i; // [sp+8h] [bp-10h]@@1

	printf("form(Src = '%s', Mask = %s, mask_flg = x%04X, Negative = %s)\n", Src,Mask,mask_flg,Negative? "true" : "false");
d268 1
a268 2
    v14 = (mask_flg >> 3) & 1;	// 0x0008 flag bit
	v15 = 0;
a277 1
                //if ((*__ctype_b_loc())[*(Dest - 1)] & 0x0800 )	// isdigit()  ==	0x0800
a319 1
                //if ((*__ctype_b_loc())[*(Dest - 1)] & 0x0800 || Mask[1] == '&' || Mask[1] == '9' ) //isdigit()  ==	0x0800
d332 2
a333 2
					v7 = *(Dest - 1);
					*Dest = v7;
d335 1
a335 1
					if ( v7 != '*' )		// v7 == '*' means *(Dest - 1) was NOT a number
d359 1
a359 1
                if ( mask_flg & 8 )
d361 1
a361 1
                    if ( v14 )
d377 1
a377 1
						v14 = 0;
d389 1
a389 1
                        if ( mask_flg & 0x10 && !v15 )
d392 1
a392 1
                            v15 = 1;
d428 1
a428 1
                if ( !v15 )
d431 1
a431 1
					v15 = 1;
d441 1
a441 1
                if ( !v15 )	// unreachable?
d443 3
a445 3
					++Src;
					++Dest;
					++Mask;
d459 2
a460 2
				++Src;
				++Mask;
@


1.2
log
@intermediate
@
text
@d19 1
a19 1
    unsigned int v7; // ecx@@12
d39 1
a39 1
    for ( i = v18; *v4; ++v4 )
d48 4
a51 7
        else
        {
            if ( *v4 == '\\' )
                v3 = 1;
            else
                ++i;
        }
d54 1
a54 1
        ++i;
d60 3
a62 2
    v7 = strlen(v18) + 1;
    v8 = v7 - 1;
d67 1
a67 1
        isNegative = 0.0 > a3;					// isNegative signifies negative
d141 1
a141 1
                ++v3;
d147 1
a147 1
    for ( i = a1; *i; ++i )
d215 2
a216 2
    char *v3; // edx@@1
    char *i; // edx@@10
d261 2
a262 2
	//printf("form(Src = '%s', Mask = %s, mask_flg = x%04X, Negative = %s)\n", Src,Mask,mask_flg,Negative? "true" : "false");
    for ( i = Src; *i == ' '; ++i )
a267 1
    
d270 2
a271 1
    //Src = a2;
d278 2
a279 1
                if ((*__ctype_b_loc())[*(Dest - 1)] & 0x0800 )	// isdigit()  ==	0x0800
d308 2
a309 2
                ++Dest;
                ++Mask;
d314 1
a314 1
                ++Src;
d316 2
a317 2
                ++Dest;
                ++Mask;
d321 2
a322 1
                if ((*__ctype_b_loc())[*(Dest - 1)] & 0x0800 || Mask[1] == '&' || Mask[1] == '9' ) //isdigit()  ==	0x0800
a325 1
	                break;
d327 1
a327 1
                if ( *Src != ' ' )
a330 10
					break;
				}
                v7 = *(Dest - 1);
                *Dest = v7;
                if ( v7 == '*' )
				{
					++Src;
					++Dest;
					++Mask;
					break;
d334 9
a342 5
					*(Dest - 1) = ' ';
					++Src;
					++Dest;
				    ++Mask;
				    break;
d344 1
a352 1
				
d365 15
a379 23
                        if ( *Mask == '+' )
                        {
                            if ( Negative )
                            {
                                *Dest = '-';
                                v14 = 0;
				                ++Dest;
							    ++Mask;
								break;
                            }
                        }
                        else
                        {
                            if ( !Negative )
                            {
                                *Dest++ = ' ';
                                v14 = 0;
							    Mask++;
								break;
                            }
                        }
                        *Dest++ = *Mask++;
                        v14 = 0;
d387 1
a387 1
                        ++Src;
d404 1
a404 1
                    if ( *Mask == '+' )
d406 3
a408 6
                        if ( Negative )
                        {
                            *Dest++ = '-';
					        Mask++;
							break;
                        }
d410 1
a410 1
                    else
d412 3
a414 6
                        if ( !Negative )
                        {
                            *Dest++ = ' ';
						    Mask++;
							break;
                        }
d418 2
a419 2
                ++Dest;
                ++Mask;
a454 3
					++Src;
					++Mask;
					break;
a459 3
					++Src;
				    ++Mask;
				    break;
d461 3
@


1.1
log
@Initial revision
@
text
@d21 9
a29 6
    int v9; // edx@@13
    int NumLen; // [sp+2Ch] [bp-10Ch]@@1
    bool a5; // [sp+30h] [bp-108h]@@1
    int a4; // [sp+34h] [bp-104h]@@12
    char NumBuff[112]; // [sp+40h] [bp-F8h]@@15
    char v18[128]; // [sp+B0h] [bp-88h]@@3
a30 2
    a5 = 0;
    NumLen = 0;
d36 1
d58 2
d61 2
a62 2
    *i = 0;
    a4 = issign(v18);
d67 4
a70 4
        NumLen = getdlen(v18, v8, a4);	// v8 ignored by getdlen
        v9 = getdp(v18, a4);
        a5 = 0.0 > a3;					// a5 signifies negative
        if ( v9 && a3 == 0.0)
d77 1
a77 1
            if (a5)
d79 2
a80 1
            sprintf(NumBuff, "%*.*f", NumLen, v9, a3);
d83 2
a84 1
    if ( !v8 || NumLen < (unsigned int)lenstr(NumBuff) || a5 && !(a4 & 1) )
d86 1
a86 2
        if ( a4 & 0x20 )
        {
d88 4
a91 7
        }
        else
        {
            if ( a4 & 4 )
                ++v8;
        }
        fillbuf(a1, v8, '?');
d95 1
a95 1
    return form(a1, NumBuff, v18, a4, a5);
d98 1
a98 1
int issign(char *a1)
d100 3
a102 3
    int v1; // esi@@1
    char *v3; // edx@@6
    char *i; // edx@@10
a103 1
    v1 = 0;
d107 1
a107 1
            return 0;
d112 1
a112 1
            v1 = 1;
d114 1
a114 1
                v1 = 9;
d116 15
a146 14
        case '#':
        case '&':
        case '*':
        case '.':
        case '9':
        case 'C':
        case 'D':
        case 'V':
        case 'Z':
        case 'c':
        case 'd':
        case 'v':
        case 'z':
            break;
d148 1
d151 4
a154 9
        if ( *i != 'v' && *i != 'V' )
        {
            if ( *i == '$' )
                v1 |= 0x10u;
        }
        else
        {
            v1 |= 0x20u;
        }
d156 1
d158 1
a158 1
    switch ( a1[lenstr(a1) - 1] )
d162 2
a163 2
            if ( !(v1 & 1) )
                v1 |= 3u;
d169 1
a169 1
            v1 |= 7u;
a170 2
        default:
            return v1;
d175 1
a175 1
int getdlen(char *a1, int a2, int a3)
d214 1
a214 1
int getdp(char *a1, int a2)
d216 1
a216 1
    int result; // eax@@1
a219 1
    result = 0;
d254 1
a254 1
char *form(char *a1, char *a2, char *a3, unsigned int a4, bool Negative)
d256 1
a256 2
    char *v5; // esi@@5
    char *v6; // edi@@5
a257 2
    char *v8; // eax@@21
    char v9; // al@@22
a258 2
    char *v11; // edx@@50
    char v12; // al@@57
a261 1
    char *v17; // [sp+8h] [bp-10h]@@5
d263 2
a264 1
    for ( i = a2; *i == ' '; ++i )
d268 8
a275 6
    v14 = (a4 >> 3) & 1;
    v15 = 0;
    v5 = a1;
    v17 = a2;
    v6 = a3;
    while ( *v6 )
d277 1
a277 1
        switch ( *v6 )
d280 1
a280 1
                if ((*__ctype_b_loc())[*(v5 - 1)] & 0x0800 )	// isdigit()  ==	0x0800
d282 1
a282 4
					v12 = *v6;
					*v5 = v12;
					++v5;
					++v6;
d285 1
a285 1
                if ( *(v5 - 1) == '*' )
d287 1
a287 1
                    *v5 = '*';
d291 1
a291 1
                    if ( a4 & 0x18 )
d293 3
a295 3
                        *v5 = *(v5 - 1);
                        *(v5 - 1) = *(v5 - 2);
                        *(v5 - 2) = ' ';
d299 1
a299 1
                        if ( *(v5 - 1) == ' ' )
d301 2
a302 3
                            *v5 = ' ';
			                ++v5;
						    ++v6;
d305 2
a306 2
                        *v5 = *(v5 - 1);
                        *(v5 - 1) = ' ';
d309 2
a310 2
                ++v5;
                ++v6;
d312 2
a313 1
            case 'V':
d315 4
a318 4
                ++v17;
                --v5;	//******
                ++v5;
                ++v6;
d320 3
a322 2
            case '.':
                if ((*__ctype_b_loc())[*(v5 - 1)] & 0x0800 || v6[1] == '&' || v6[1] == '9' ) //isdigit()  ==	0x0800
d324 2
a325 5
				    v9 = *v6;
				    *v5 = v9;
					++v17;
					++v5;
	                ++v6;
d328 1
a328 1
                if ( *v17 != ' ' )
d330 2
a331 6
				    v11 = v17;
                    v9 = *v11;
	                *v5 = v9;
					++v17;
					++v5;
					++v6;
d334 2
a335 2
                v7 = *(v5 - 1);
                *v5 = v7;
d338 3
a340 3
					++v17;
					++v5;
					++v6;
d345 4
a348 4
					*(v5 - 1) = ' ';
					++v17;
					++v5;
				    ++v6;
d352 1
a352 1
            case '&':
d354 3
a356 7
                v8 = v17;
                if ( *v17 != ' ' )
				{
					v11 = v8;
				    v9 = *v11;
					*v5 = v9;
				}
d358 4
a361 7
				{
					v9 = '0';
					*v5 = v9;
				}
				++v17;
				++v5;
				++v6;
d368 1
a368 1
                if ( a4 & 8 )
d372 1
a372 1
                        if ( *v6 == '+' )
d376 1
a376 1
                                *v5 = '-';
d378 2
a379 2
				                ++v5;
							    ++v6;
d387 1
a387 1
                                *v5 = ' ';
d389 1
a389 2
				                ++v5;
							    ++v6;
d393 1
a393 1
                        *v5 = *v6;
a394 2
		                ++v5;
					    ++v6;
d397 1
a397 1
                    if ( *v17 == ' ' )
d399 4
a402 4
                        v10 = *(v5 - 1);
                        *v5 = v10;
                        *(v5 - 1) = ' ';
                        ++v17;
d406 1
a406 1
                        if ( a4 & 0x10 && !v15 )
d408 1
a408 1
                            *v5 = currency_symbol;
d413 1
a413 1
                            *v5 = *v17++;
d419 1
a419 1
                    if ( *v6 == '+' )
d423 2
a424 3
                            *v5 = '-';
			                ++v5;
					        ++v6;
d432 2
a433 3
                            *v5 = ' ';
			                ++v5;
						    ++v6;
d437 1
a437 2
                    v12 = *v6;
                    *v5 = v12;
d439 2
a440 2
                ++v5;
                ++v6;
d442 2
a443 1
            case '#':
d446 2
a447 3
				*v5 = *v17++;
                ++v5;
                ++v6;
d449 1
d453 1
a453 1
					*v5 = currency_symbol;
d455 1
a455 2
					++v5;
					++v6;
d458 1
a458 1
                if ( *v17 != ' ' )
d460 2
a461 6
                    v11 = v17;
                    v9 = *v11;
	                *v5 = v9;
					++v17;
					++v5;
					++v6;
d464 1
a464 1
                if ( !v15 )
d466 3
a468 3
					++v17;
					++v5;
					++v6;
d471 2
a472 1
				v10 = *(v5 - 1);
d475 3
a477 4
                    *v5 = ' ';
					++v17;
					++v5;
					++v6;
d482 4
a485 5
				    *v5 = v10;
				    *(v5 - 1) = ' ';
					++v17;
					++v5;
				    ++v6;
d489 3
a491 6
            case '*':
                v8 = v17;
                if ( *v17 == ' ' )
                {
                    v9 = *v6;
                }
d493 3
a495 8
                {
                    v11 = v8;
                    v9 = *v11;
                }
                *v5 = v9;
				++v17;
				++v5;
                ++v6;
d497 5
a501 8
			case ')':
            case '>':
                v12 = ' ';
                if ( Negative )
				{
					v12 = *v6;
					*v5 = v12;
				}
d503 2
a504 5
				{
					*v5 = v12;
				}
				++v5;
				++v6;
d506 2
a507 1
			case 'D':
d511 2
a512 2
                    *v5++ = ' ';
                    *v5 = ' ';
d516 3
a518 3
					*v5++ = *v6;
					if ( *v6 == 'd' )
					    v12 = 'b';
d520 1
a520 2
					    v12 = 'B';
					*v5 = v12;
d522 2
a523 2
				++v5;
				++v6;
d525 2
a526 1
            case 'C':
d530 2
a531 2
                    *v5++ = ' ';
                    *v5 = ' ';
d535 3
a537 3
					*v5++ = *v6;
					if ( *v6 == 'c' )
					    v12 = 'r';
d539 1
a539 2
					    v12 = 'R';
					*v5 = v12;
d541 8
a548 2
				++v5;
				++v6;
d550 1
d554 3
a556 19
            case '_':
                if ( *v6 != '_' )
				{
					v12 = *v6;
					*v5 = v12;
				}
				else
				{
				    v12 = ' ';
					*v5 = v12;
				}
				++v5;
				++v6;
				break;
			default:
				v12 = *v6;
                *v5 = v12;
                ++v5;
                ++v6;
d560 2
a561 2
    *v5 = 0;
    return a1;
@
