head	1.5;
access;
symbols;
locks
	leslie:1.5; strict;
comment	@ * @;


1.5
date	2016.01.15.01.10.50;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2014.12.16.02.17.12;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2014.11.27.09.48.48;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.24.02.29.32;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.27.03.34.53;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.5
log
@intermediate
@
text
@#ifndef PEDIT_C
#define PEDIT_C

#include <stdio.h>
#include <assert.h>
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include "DBdefs.h"
#include "cl4.h"

void setclvars(int ErrVal, int LockedVal)
{
    setvar(v_ERROR  , ErrVal);                          // "ERROR"
    setvar(v_LOCKED , LockedVal);                       // "LOCKED"
}

void pexcept(BTAB *bt)
{
    BTAB *btb; // eax@@1

    btb = &btab[bt->On_excep->BlockNo];
    ploop(btb, 0, btb->StartLine, btb->EndLine, btb->StartLine, btb->EndLine, 0);
}

char *getkerr(char *Src, BTAB *btb, FLDdesc *fld2)
{
    PTAB *ptb; // edi@@1
    XTAB *xtb; // esi@@4
    ENTAB *ent; // eax@@7
    FLDdesc *fld1; // [sp+2Ch] [bp-ACh]@@9
    FLDdesc fld; // [sp+30h] [bp-A8h]@@9
    char Buff[256]; // [sp+50h] [bp-88h]@@11

    *Src = 0;
	ptb = PTARR(getptabp(btb->TYPE24->PT_start));
    
	while ( ptb->OpCode != 950 )	// 950 = "break"
    {
        srclineno = ptb->SrcLineNo;				// *** global variable ***
        if ( ptb->OpCode == 1 )                 // accept field
        {
            xtb = XTARR(ptb->TABno);
            ent = ENARR(xtb->VarExpNo);
            fld1 = getftf(ent, 1, &fld);
            
			if ( xtb->Flags < 0 && fld1 <= fld2 )
            {
                fldtobuf(Buff, fld1, 0);
                cdbcpystr(Src, Src, "'", Buff, "' ", 0);
            }
            if ( fld1 == fld2 )
                break;
        }
		ptb++;
    }
    return Src;
}

int eaddkey(BTAB *bt, PTAB *pt, FLDdesc *fld, int TDno)
{
    short Error; // dx@@1
    int result; // eax@@9
    char Src[112]; // [sp+20h] [bp-F8h]@@8
    char format[128]; // [sp+90h] [bp-88h]@@8

    Error = rdrec(TDno, 0x0400u);				// 1024 = "lockr"  (0x400)
    if ( Error <= 0 && Error != -10 )
    {
        prerr(0, 0, 0);							// clear message line
        result = 0x40u;
    }
    else	// no error and/or record was locked
    {
        if ( bt->On_excep )
        {
            if ( Error == -10 )     // record locked
				setclvars(0,1);		// quick fn to set both ERROR and LOCKED variables  ErrVal = 0, LockedVal = 1, 
            else
				setclvars(1,0);		// ErrVal = 1, LockedVal = 0;
			pexcept(bt);            // do on_exception block routine
        }
        else
        {
            sprintf(format, "%snot unique", getkerr(Src, bt, fld), pt);
            prerr(format, 0, 1);
        }
        ulckrec(TDno);
        rfree(TDno, 0);
        disprec(bt, TDno, 0, 0, 0);
        result = 0x80u;
    }
    return result;
}

int egetkey(BTAB *bt, PTAB *ptb, XTAB *xtb, FLDdesc *fld, int TDno, int fno, int a5)
{
    RTAB *rtb; // ecx@@4
    RTAB *v26; // ecx@@4
    ENTAB *v10; // edx@@8
    ENTAB *v11; // eax@@10
    ENTAB *v12; // eax@@12
    FLDdesc *j; // edx@@40
    void *i; // edx@@37

    signed int v7; // edi@@2
    int v9; // eax@@8
    int v15; // eax@@26
    char v18; // zf@@34
    int ErrorCode; // [sp+2Ch] [bp-9Ch]@@1
    signed int v31; // [sp+30h] [bp-98h]@@1
    signed int v32; // [sp+34h] [bp-94h]@@1
    signed int v33; // [sp+38h] [bp-90h]@@1
    char SrchMode; // [sp+3Fh] [bp-89h]@@33
    char Src[128]; // [sp+40h] [bp-88h]@@29
	short RdRtn;

	//eprint("egetkey( TDNo = %d, fno = %d, a5 = %d)\n",TDno,fno,a5);

    v33 = 0;
    v32 = 0;
    v31 = 0;
    ErrorCode = 0;
    ++no_fields;
    if ( !bt->BTFlags )
    {
		//eprint("egetkey 127\n");
        bt->EXPR = (EXPR *)fretre(bt->EXPR, 0);
        v31 = 0;
        v7 = 0;
        if ( xtb->Flags & 0x0010 )	// Does this field have a range specifier?
        {
			//eprint("egetkey 133\n");
            rtb = RTARR(xtb->RangeID);
            if ( TDno == rtb->TTno )
            {
                v31 = 1;
                if ( rtb->WhereEXP )
                {
                    v9 = rtb->WhereEXP;
                    v10 = enarr.TableAddr;
					if ( *((short *)&v10[v9] - 2) )
                    {
                        v11 = rtb->WhereEXP ? &v10[v9 - 1] : 0;
                        v12 = &enarr.TableAddr[v11->enleft - 1];
                    }
                    else
                        v12 = 0;		// error.

					if ( bt->SrchMode )					
                    {											// 3 Operators bits: 
                        if ( bt->SrchMode == '-' )				// 0x08 == less than				'<'
                            v12->TTno = 0x18u;					// 0x10 == equal to					'='
                        else									// 0x20 == greater than				'>'
                            v12->TTno = 0x30u;					// Mixed bit tests:
                    }											// 0x30 == greater than or equal	'>='
                    else										// 0x18 == less than or equal		'<='
                    {											// 0x28 == not equal to				'<>'
                        v12->TTno = 0x10u;
                    }

                    v12->entype = 2;
                    bt->EXPR = getexpr(ENARR(rtb->WhereEXP), TDno);
                    v7 = 1;	// EXPR loaded ok
                }
            }
        }
        if ( !v7 )	// if not, create a default EXPR
            bt->EXPR = bldexpr(TDno, fno, bt->SrchMode);

		v15 = rtdget(&ttab[TDno]);
        ErrorCode = cdbrestrict(v15, bt->EXPR);
        if ( ErrorCode < 0 )
            dberror(ErrorCode, 0, v15);

		if ( !bt->SrchMode )
            getkerr(Src, bt, fld);
    }
//--------------------------------------
    if ( bt->SrchMode == '-' )	// don't check for '+'
        SrchMode = 'p';			// set searchmode to backwards
    else
        SrchMode = 'n';			// default searchmode == forward
//--------------------------------------
    if ( SrchMode != 'n' )
        goto LABEL_35;

LABEL_37:
    for ( RdRtn = rdnxt(TDno, bt->EXPR, 0, 1); RdRtn <= 0;  RdRtn = rdprev(TDno, bt->EXPR, 0, 1) )
    {
        if ( !bt->BTFlags )
        {
            if ( bt->SrchMode )
                prerr("no more", 0, 1);
            else
            {
                if ( bt->On_excep )
                {
                    setclvars(1, 0);            // "ERROR"
                    pexcept(bt);
                }
                else
                    prerr("%snot found", Src, 1);
                v33 = 1;
            }
        }
        SrchMode = 'q';
LABEL_74:
        if ( SrchMode == 'y' )
        {
			//eprint("egetkey 211 SrchMode == %C\n",SrchMode);
			if ( !rcheck(xtb, fld, 0) )
			{
				SrchMode = 'q';
				goto LABEL_84;	// get out of the routine
			}

			if ( bt->Curr_Mode == 'v' )
				ErrorCode = rdrec(TDno, 0);		// no lock required when in VIEW mode
			else
				ErrorCode = rdrec(TDno, 1024);	// lockr
			
			if ( ErrorCode <= 0 )       // rdrec filters -10 error code in View mode?
			{
				if ( bt->On_excep )
				{
					setclvars(0, 1);
					pexcept(bt);
				}
				else
					prerr("'%s' record locked", fldtobuf(Src, fld, 0), 1);
				SrchMode = 'q';
			}
		}

LABEL_84:
        if ( SrchMode == 'n' )
            goto LABEL_37;
LABEL_35:
        if ( !(SrchMode == 'p'))
            goto LABEL_86;				// if we go around here, we do a rdprev();
    }

// fall out of above loop when we found valid data
//eprint("egetkey 243 SrchMode == %C\n",SrchMode);

//-----------------------------
    rectott(TDno, fno);
    for ( j = fld; j->FLDstat < 0; j++ )
        j->FLDstat &= 0xFFEFu;				// clear 0x0010 bit on all Key fields

    if ( !bt->SrchMode )
    {
        dispfld(xtb, fld, 1, 0, 1, 0);
        goto LABEL_50;
    }
    if ( !v31 && !jcheck(ptb, fld, 0, 0) )
        goto LABEL_84;						// go back into main loop looking for more records

    dispfld(xtb, fld, 1, 0, 1, 0);

    v33 = 1;
    ErrorCode = sploop(bt, 0, a5, bt->TYPE24->PT_end, a5, bt->TYPE24->PT_end);
	//eprint("egetkey 262 ErrorCode = %d\n",ErrorCode);
    if ( ErrorCode == 1 || ErrorCode == 256 )
    {
        v33 = 1;
        setcvar(v_REPLY, "");	//	"REPLY"
LABEL_50:
        if ( bt->SrchMode )
        {
            if ( ErrorCode == 256 )
            {
                linput(&SrchMode, 0, 0);
                if ( SrchMode == 'n' )
					SrchMode = reply("<n>ext <p>rev or <q>uit", "npq");
                else
					SrchMode = reply("<p>rev <n>ext or <q>uit", "pnq");
				ErrorCode = 0;
            }
            else
            {
                if ( SrchMode == 'n' )
					SrchMode = reply("<y>es <n>ext <p>rev or <q>uit", "npyq");
                else
					SrchMode = reply("<y>es <p>rev <n>ext or <q>uit", "pnyq");
            }
        }
        else
            SrchMode = 'y';
        
		if ( SrchMode == 'n' || SrchMode == 'p' )	// next/previous
        {
            rfree(TDno, 0);
            if ( var_cr )
            {
                dscreen(bt, 0, a5);
                var_cr = false;
            }
            else
                disprec(bt, TDno, 0, 0, a5);
        }
        goto LABEL_74;	// go back into main loop looking for more records
    }
    bt->BTFlags = false;
    bt->SrchMode = 0;
    SrchMode = 'q';
    v32 = 1;

LABEL_86:
//eprint("egetkey 307 SrchMode == %C\n",SrchMode);

//------------------------------
    if ( SrchMode == 'q' )
    {
        bt->BTFlags = false;
        bt->SrchMode = 0;
    }
    if ( v33 )
    {
        if ( SrchMode != 'y' )
        {
            rfree(TDno, 0);
            if ( var_cr )
            {
                dscreen(bt, 0, 0);
                var_cr = false;
            }
            else
                disprec(bt, TDno, 0, 0, 0);

			if ( xtb->Flags & 0x10 )
            {
				v26 = RTARR(xtb->RangeID);
                rfree(v26->TTno, 0);
            }
            goto LABEL_98;
        }
LABEL_99:
        if ( bt->SrchMode )
            bt->BTFlags = true;
    }
    else
    {
LABEL_98:
        if ( SrchMode == 'y' )
            goto LABEL_99;
    }
//-----------------------------
    if ( !v32 )
    {
        if ( SrchMode == 'y' )
            ErrorCode = 0x40u;
        else
            ErrorCode = 0x80u;
    }
    return ErrorCode;
}

int pedit(XTAB *xtab, PTAB *ptab, FLDdesc *fld, BTAB *btab, int *skipPtr, bool inDoBlock, int a7, bool noScreenOut)
{
    char	*v13;
	int		fno;
	int		result;
	int		v11;
	int		TDno;
	char	WildChar;
	char	FLDtype;
	
    fno = gettdfno(ENARR(xtab->VarExpNo), &TDno, &FLDtype, 0);
	assert(fno >= 0);

	if ( xtab->Flags >= 0 || !btab->BTFlags )
    {
        result = modfld(btab, ptab, fld, *skipPtr, &v13, noScreenOut);
        if ( result == -17 || result == -5 || result == -22 )// error codes
            return result;
        
		if ( result == -27 )
            *skipPtr = 1;		// Update caller mem directly.  Sets "skip" global variable
        
		if ( xtab->Flags < 0 )	// reachable if !btab->BTFlags
        {
            key_i = a7;			// ** global var **
            v11 = v13 ? lenstr(v13) : 0;

            if ( !v11 || (WildChar = v13[v11 - 1], btab->SrchMode = WildChar, WildChar != '*') && WildChar != '+' && WildChar != '-' )
                btab->SrchMode = 0;
        }
        if ( !btab->SrchMode && (xtab->Flags & 0x08) && (fld->FLDstat & fld_ZERO) && (null_exit == 1) && !inDoBlock )
        {
            dispfld(xtab, fld, 0, 0, 1, 0);
            return 0;
        }
    }
    if ( xtab->Flags < 0 )	// Key Field   & 0x8000
    {
        if ( btab->Curr_Mode == 'a' )
        {
            if ( xtab->Flags & 0x40 )
                return eaddkey(btab, ptab, fld, TDno);
        }
        else
        {
            if ( btab->SrchMode || xtab->Flags & 0x40 )
                return egetkey(btab, ptab, xtab, fld, TDno, fno, a7);
        }
    }
    return 1;
}

#endif

@


1.4
log
@fixed all macros. time to get logic flow correct
@
text
@a79 1

d103 2
d109 1
a109 4
    void *i; // edx@@37
    short v21; // eax@@45
    char *v25; // eax@@82
    unsigned int ErrorCode; // [sp+2Ch] [bp-9Ch]@@1
d117 1
a117 1
printf("egetkey( TDNo = %d, fno = %d, a5 = %d)\n",TDno,fno,a5);
d124 1
a124 1
    if ( !bt->field_0 )
d126 1
a126 1
		printf("egetkey 127\n");
d132 1
a132 1
			printf("egetkey 133\n");
d171 1
a171 1
        ErrorCode = (signed short)cdbrestrict(v15, bt->EXPR);
d180 1
a180 1
        SrchMode = 'p';
d182 1
a182 2
        SrchMode = 'n';

d190 1
a190 1
        if ( !bt->field_0 )
d208 25
a232 7
        if ( SrchMode != 'y' )
            goto LABEL_84;
        
		if ( !rcheck(xtb, fld, 0) )
		{
			SrchMode = 'q';
			goto LABEL_84;	// get out of the routine
a234 20
        if ( bt->Curr_Mode == 'v' )
            ErrorCode = rdrec(TDno, 0);		// no lock required when in VIEW mode
        else
            ErrorCode = rdrec(TDno, 1024);	// lockr
        
        if ( (signed int)ErrorCode <= 0 )       // rdrec filters -10 error code in View mode?
        {
            if ( bt->On_excep )
            {
                setclvars(0, 1);
                pexcept(bt);
            }
            else
            {
                v25 = fldtobuf(Src, fld, 0);
                prerr("'%s' record locked", v25, 1);
            }
            SrchMode = 'q';
        }

d240 1
a240 2
            goto LABEL_86;
// if we go around here, we do a rdprev();
d243 3
d248 1
a248 1
    for ( j = fld; j->FLDstat < 0; ++j )
d257 1
a257 1
        goto LABEL_84;
d262 3
a264 3
    v21 = sploop(bt, 0, a5, bt->TYPE24->PT_end, a5, bt->TYPE24->PT_end);
    ErrorCode = v21;
    if ( v21 == 1 || v21 == 256 )
a277 1

d297 1
a297 1
                var_cr = 0;
d302 1
a302 1
        goto LABEL_74;
d304 1
a304 1
    bt->field_0 = 0;
d310 2
d315 1
a315 1
        bt->field_0 = 0;
d326 1
a326 1
                var_cr = 0;
d340 1
a340 1
            bt->field_0 = 1;
d361 8
a368 8
    int fno; // edi@@4
    int result; // eax@@8
    int v11; // edx@@15
    char v12; // al@@18
    char *v13; // [sp+20h] [bp-18h]@@8
    int TDno; // [sp+24h] [bp-14h]@@4
    char FLDtype; // [sp+2Bh] [bp-Dh]@@4

d372 1
a372 1
	if ( xtab->Flags >= 0 || !btab->field_0 )
d381 1
a381 1
		if ( xtab->Flags < 0 )	// reachable if !btab->field_0
d386 1
a386 1
            if ( !v11 || (v12 = v13[v11 - 1], btab->SrchMode = v12, v12 != '*') && v12 != '+' && v12 != '-' )
@


1.3
log
@prior to ENARR() fix
@
text
@d42 2
a43 2
            xtb = ptb->TABno ? &xtarr.TableAddr[ptb->TABno - 1] : 0;
            ent = xtb->VarExpNo ? &enarr.TableAddr[xtb->VarExpNo - 1] : 0;
d96 1
a96 1
int egetkey(BTAB *bt, PTAB *ptb, XTAB *xtb, FLDdesc *fld, int TDno, int RecNo, int a5)
d119 1
a119 1
printf("egetkey( TDNo = %d, RecNo = %d, a5 = %d)\n",TDno,RecNo,a5);
d135 1
a135 1
            rtb = xtb->RangeID ? &rtarr.TableAddr[xtb->RangeID - 1] : 0;
d164 1
a164 1
                    bt->EXPR = getexpr(rtb->WhereEXP ? &enarr.TableAddr[rtb->WhereEXP - 1] : 0, TDno);
d170 1
a170 1
            bt->EXPR = bldexpr(TDno, RecNo, bt->SrchMode);
d250 1
a250 1
    rectott(TDno, RecNo);
d335 1
a335 1
				v26 = xtb->RangeID ? &rtarr.TableAddr[xtb->RangeID - 1] : 0;
d363 1
a363 1
    int RecNo; // edi@@4
d371 2
a372 4
    RecNo = gettdfno(xtab->VarExpNo ? &enarr.TableAddr[xtab->VarExpNo - 1] : 0, &TDno, &FLDtype, 0);
    //if ( RecNo < 0 )
    //    __assert_fail("fno >= 0", "pedit.c", 0x106u, "pedit");
	assert(RecNo >= 0);
d407 1
a407 1
                return egetkey(btab, ptab, xtab, fld, TDno, RecNo, a7);
@


1.2
log
@intermediate
@
text
@d5 1
d146 1
a146 1
                        v12 = &enarr.TableAddr[v11->Dest - 1];
d372 3
a374 2
    if ( RecNo < 0 )
        __assert_fail("fno >= 0", "pedit.c", 0x106u, "pedit");
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
    char s[256]; // [sp+50h] [bp-88h]@@11
d38 1
a38 1
        srclineno = ptb->SrcLineNo;
d47 2
a48 2
                fldtobuf(s, fld1, 0);
                cdbcpystr(Src, Src, "'", s, "' ", 0);
a60 1
    char *v5; // eax@@8
d65 1
a65 1
    Error = rdrec(TDno, 0x0400u);                // 1024 = "lockr"  (0x400)
d68 1
a68 1
        prerr(0, 0, 0);
d71 1
a71 1
    else
d84 1
a84 2
            v5 = getkerr(Src, bt, fld);
            sprintf(format, "%snot unique", v5, pt);
d114 1
a114 1
    char Buffer; // [sp+3Fh] [bp-89h]@@33
d118 2
d127 1
d133 1
d142 1
a142 1
	                    if ( *((short *)&v10[v9] - 2) )
d148 1
a148 1
                        v12 = 0;
d161 1
d181 1
a181 1
        Buffer = 'p';
d183 1
a183 1
        Buffer = 'n';
d186 1
a186 1
    if ( Buffer != 'n' )
a194 1
            {
a195 1
            }
a203 1
                {
a204 1
                }
d208 1
a208 1
        Buffer = 'q';
d210 1
a210 1
        if ( Buffer != 'y' )
d212 2
a213 1
        if ( !rcheck(xtb, fld, 0) )
d215 1
a215 1
			Buffer = 'q';
d218 1
d220 1
a220 1
            ErrorCode = rdrec(TDno, 0);
d222 1
a222 1
            ErrorCode = rdrec(TDno, 1024);	//lockr
d236 1
a236 1
            Buffer = 'q';
d240 1
a240 1
        if ( Buffer == 'n' )
d243 1
a243 1
        if ( !(Buffer == 'p'))
d247 1
d260 1
d275 3
a277 3
                linput(&Buffer, 0, 0);
                if ( Buffer == 'n' )
					Buffer = reply("<n>ext <p>rev or <q>uit", "npq");
d279 1
a279 1
					Buffer = reply("<p>rev <n>ext or <q>uit", "pnq");
d285 2
a286 2
                if ( Buffer == 'n' )
					Buffer = reply("<y>es <n>ext <p>rev or <q>uit", "npyq");
d288 1
a288 1
					Buffer = reply("<y>es <p>rev <n>ext or <q>uit", "pnyq");
d292 1
a292 3
        {
            Buffer = 'y';
        }
d294 1
a294 1
		if ( Buffer == 'n' || Buffer == 'p' )	// next/previous
a302 1
            {
a303 1
            }
d309 1
a309 1
    Buffer = 'q';
d314 1
a314 1
    if ( Buffer == 'q' )
d321 1
a321 1
        if ( Buffer != 'y' )
a329 1
            {
d331 2
a332 2
            }
            if ( xtb->Flags & 0x10 )
d346 1
a346 1
        if ( Buffer == 'y' )
d352 1
a352 1
        if ( Buffer == 'y' )
d360 1
a360 1
int pedit(XTAB *xtab, PTAB *ptab, FLDdesc *fld, BTAB *btab, int *skipPtr, int a6, int a7, int a8)
d376 1
a376 1
        result = modfld(btab, ptab, fld, *skipPtr, &v13, a8);
d379 2
a380 1
        if ( result == -27 )
d382 2
a383 1
        if ( xtab->Flags < 0 )	// reachable if !btab->field_0
d385 1
a385 1
            key_i = a7;
d391 1
a391 1
        if ( !btab->SrchMode && (xtab->Flags & 8) && (fld->FLDstat & fld_ZERO) && (null_exit == 1) && !a6 )
d397 1
a397 1
    if ( xtab->Flags < 0 )	// Key Field
@
