head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2015.04.21.05.58.42;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef TUPTOREC_C
#define TUPTOREC_C

#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

void tuptor(char *dest, POS *Pos, char *src,TDef *TDefptr)
{
	short v4;
	TDef *tdef;
	char *buffptr; 
	short v7;
	short v8;
	char* dump;

	dump = dest;
	tdef = TDefptr;
	for ( buffptr = src; tdef->TDFentry; ++tdef )
	{
		if ( Pos )	// POS tables allow fields to be re-positioned in target data area.
		{
			v8 = cdbrindex(Pos, tdef->TDFentry);
			if ( v8 >= 0 )		// Possible to not have a POS record for each field!
			{
				v4 = domtox(&dest[v8], buffptr, tdef->TDFsize, tdef->TDFtype);
			}
			else	// We don't want this field! Bump to next one
			{
				if ( tdef->TDFtype & tdf_STRING ) // string variable
					v4 = _fwidth(buffptr, tdef->TDFsize, tdef->TDFtype);
				else
					v4 = tdef->TDFsize;
			}
			buffptr += v4;
		}
		else	// No Pos record, just save record to Memory in same order as on disk
		{
			if ( tdef->TDFtype & tdf_STRING ) // string variable
				v7 = _fwidth(buffptr, tdef->TDFsize, tdef->TDFtype);
			else
				v7 = tdef->TDFsize;
			buffptr += cpybuf(dest, buffptr, v7);	// dest buffer is unpacked!
			dest += tdef->TDFsize;
		}
	}
}

#endif
@
