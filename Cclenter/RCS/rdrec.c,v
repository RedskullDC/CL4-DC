head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.08.26.02.38.55;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.14.03.45.24;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.08.27.06.49.19;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@clean-up
@
text
@#ifndef READREC_C
#define READREC_C

#include "DBdefs.h"
#include "cl4.h"

int rdrec(int TDno, int Lock)
{
	TDesc	*TTptr; // esi@@1
	char	*WorkArea1;
	int		v4;
	int		v6;
	int		result;
	int		TTno;
	int		v11;
	int		a2a;
	short	ErrorCode;
	short	v7;
	size_t	NumBytes;
	char	Src[180];

	//printf("rdrec(TDno = %d,Lock = %d)\n" ,TDno,Lock);

	v11			= 0;
	TTptr		= &ttab[TDno];
	ulckrec(TDno);
	TTno		= rtdget(TTptr);
	WorkArea1	= TTptr->TDworkarea1;

	tttorec(TDno, WorkArea1, 1);
	rdfree(TDno);

	TTptr->TDlocked &= 0xFFDFu;		// clear x0020
	a2a = Lock;
	if ( TTptr->TDlocked & 0x0200 )
		a2a = 0;

	ErrorCode = getr(TTno, WorkArea1, 0);
	if ( ErrorCode >= 0 )
	{
		if ( a2a )                                  // Get record with a LOCK
		{
			v6 = keysize(TTno);
			NumBytes = v6;
			if ( ErrorCode != 1 )
			{
				tttorec(TDno, WorkArea1, 2);
				v6 = NumBytes;
			}
			cpybuf(Src, WorkArea1, v6);
			fix_buf(TDno, WorkArea1);
			while ( 1 )
			{
				v7 = lgetr(TTno, WorkArea1, 0);
				v11 = v7;
				if ( v7 != -10 || a2a == 1024 )	// record locked by another user || lockr
					break;
				sleep(1u);
				//printf("rdrec stuck in lock loop!!\n");
			}
			if ( v7 != -10 )
				TTptr->TDlocked |= ttl_LOCK;	// 0x0001u;

			cpybuf(WorkArea1, Src, NumBytes);
			cpybuf(TTptr->TDworkarea2, WorkArea1, TTptr->TDrecsize);
		}
		if (ErrorCode == 1 )
		{
			rkfree(TDno);
			ravail(TDno);
		}
	}
    if ( ErrorCode >= 0 )	// success!
    {
        result = ErrorCode;
        if ( v11 != -10 )
            return result;
        return v11;
    }
    if ( v11 != -10 )	// If < 0, and !-10, we have a bad error
    {
        dberror(ErrorCode, 0, TTno);
        result = ErrorCode;
        if ( v11 != -10 )
            return result;
        return v11;
    }
    return v11;	// return -10 (locked)
}
#endif
@


1.2
log
@nearly done
@
text
@d9 12
a20 12
	TDesc *TTptr; // esi@@1
	char *WorkArea1;
	int v4;
	int v6;
	int result;
	int TTno;
	int v11;
	short ErrorCode;
	short v7;
	size_t NumBytes;
	char Src[180];
	int a2a;
d34 3
a36 3
	a2a = 0;
	if ( !(TTptr->TDlocked & 0x0200) )
		a2a = Lock;
d62 1
a62 1
				TTptr->TDlocked |= 0x0001u;
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
	char *v3;
a15 1
	short v5;
d22 1
a22 1
	printf("rdrec(TDno = %d,Lock = %d)\n" ,TDno,Lock);
d24 2
a25 2
	v11 = 0;
	TTptr = &ttab[TDno];
d27 4
a30 3
	TTno = rtdget(TTptr);
	v3 = TTptr->TDworkarea1;
	tttorec(TDno, TTptr->TDworkarea1, 1);
d33 1
a33 1
	TTptr->TDlocked &= 0xFFDFu;
d38 2
a39 3
	v5 = getr(TTno, v3, 0);
	ErrorCode = v5;
	if ( v5 >= 0 )
d47 1
a47 1
				tttorec(TDno, v3, 2);
d50 2
a51 2
			cpybuf(Src, v3, v6);
			fix_buf(TDno, v3);
d54 1
a54 1
				v7 = lgetr(TTno, v3, 0);
d59 1
a59 1
				printf("rdrec stuck in lock loop!!\n");
d63 3
a65 2
			cpybuf(v3, Src, NumBytes);
			cpybuf(TTptr->TDworkarea2, v3, TTptr->TDrecsize);
@
