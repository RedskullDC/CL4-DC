head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.06.17.22.55.49;	author leslie;	state Exp;
branches;
next	;


desc
@Equalises Nodes. Moves node entries from end of left to start of right
@


1.1
log
@Initial revision
@
text
@#ifndef MOVERIGHT_C
#define MOVERIGHT_C

#include "DBdefs.h"
#include "cl4.h"

int moveright(NODE *NodeSRC, NODE *NodeDEST, short NumEntries)
{
	int v7; // edx@@3
	int result; // eax@@5
	short v12; // [sp+Ch] [bp-1Ch]@@1
	short i; // [sp+Ch] [bp-1Ch]@@3
	short v14; // [sp+10h] [bp-18h]@@1

	NODE_1 *v8; // esi@@3
	NODE_1 *v4; // esi@@1
	NODE_1 *v6; // ecx@@1
	
	NODE_2 *v5; // edi@@1
	NODE_2 *v9; // edi@@3
	NODE_2 *v15;
	NODE_2 *v16;

	//printf("moveright(SRC = x%08X, DEST = x%08X, Num: %d\n",NodeSRC,NodeDEST, NumEntries);

	_chkitems(NodeDEST, NumEntries);	// has an error exit, may not return.

	v12 = NodeDEST->NumEntries;
	v4 = &NodeDEST->NODE1ptr[v12];
	v5 = &NodeDEST->NODE2ptr[v12 + 1];
	v6 = &v4[NumEntries];                         // Expand DestNODE by NumEntries.
	v15 = &v5[NumEntries];
	v14 = 0;
	while ( v12 > 0 )                                 // If DestNODE empty, no need to shift entries
	{  
		--v4;										  // make NumEntries space at start of DestNODE
		--v6;
		v6->Data = v4->Data;
		v6->Size = v4->Size;
		--v15;
		--v5;
		v15->PageNo = v5->PageNo;
		--v12;
	}
  
	v7 = NodeSRC->NumEntries;
	v8 = &NodeSRC->NODE1ptr[v7];
	v16 = v15 - 1;
	v9 = &NodeSRC->NODE2ptr[v7];
	v16->PageNo = v9->PageNo;
	for ( i = NumEntries; i > 0; --i )            // Copy entries into start of DestNODE
	{	
		--v8;
		--v6;
		v6->Data = v8->Data;
		v6->Size = v8->Size;
		--v16;
		--v9;
		v16->PageNo = v9->PageNo;
		v14 += v6->Size;
	}
	result = (v14 + NumEntries * NodeDEST->field_16);
	NodeDEST->DataEnd += result;
	NodeDEST->NumEntries += NumEntries;
	NodeSRC->DataEnd -= result;
	NodeSRC->NumEntries -= NumEntries;
	return result;
}
#endif

@
