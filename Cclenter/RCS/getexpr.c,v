head	1.6;
access;
symbols;
locks
	leslie:1.6; strict;
comment	@ * @;


1.6
date	2016.08.29.09.10.31;	author leslie;	state Exp;
branches;
next	1.5;

1.5
date	2015.08.21.02.16.46;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2014.12.10.10.44.43;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2014.11.27.05.48.38;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.24.11.52.41;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.11.04.37.03;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.6
log
@clean up
@
text
@#ifndef GETEXPRESSION_C
#define GETEXPRESSION_C

#include <stdio.h>
#include <assert.h>
#include "DBdefs.h"
#include "cl4.h"

short getlit(FLDdesc *fld, ENTAB *entab, char *Dest, short *OpCode)
{
    char	*v5;
    char	*v13;
    char	*v16;
    
	double v21;
    
	int		v6;
    int		v22;
    
	short	FLDlen;
    short	Src;
    
	char	s[1002];
    char	LastChar;

	//printf("getlit(fld = x%08X, entab = x%08X,  *OpCode = x%04X)\n",fld,entab,*OpCode);
    FLDlen = 0;
    if ( fld->FLDtype == 'C' )
    {
        zap(s, 1001u);
        evalstr(ENARR(entab->enright), s);

		if ( *OpCode & 0x0004 )		// 0004 is the 'like' bit. do wildcard search
        {
            for (v5 = s; *v5 ; v5++)
            {
				v6 = (unsigned char)*v5;
                //if ( v6 == '*' || v6 == '?' || v6 == '[')
                if ( v6 == 0x2A || v6 == 0x3F || v6 == 0x5B)		// set high bit on wildcard chars
					*v5 |= 0x80u;

				//else if ( v6 == 170 || v6 == '+' || v6 == '¦' )
				else if ( v6 == 0xAA || v6 == 0xBF || v6 == 0xDB )	// chars above with high bit set
					*v5 &= 0x7Fu;
            }
        }
        else
            s[fld->FLDlen] = 0;
		//printf("getlit(s = %s\n",s);
    }
    else
    {
        if ( entab->entype == 0x02 && entab->TTno & 0x0200 )		// Integer calc flag 0x200
            v21 = (double)evalint(ENARR(entab->enright));
        else
            v21 = clround(evalnum(ENARR(entab->enright), fld->FLDtype), fld->FLDtype);
        FLDlen = fld->FLDlen;
    }
//-----------------------------
    switch ( fld->FLDtype & 0xFFFFBFFF )		// 1111 1111 1011 1111
    {
        case 'B':
        case 'I':
            Src = (short)v21;
            v13 = (char *)&Src;
			break;
        case 'N':
            v22 = (signed int)v21;
            v13 = (char *)&v22;
			break;
        case 'D':
            v22 = 0;
            if ( v21 >= 0.0 )
                v22 = (int)v21;
            v13 = (char *)&v22;
			break;
        case 'T':
            if ( v21 < 0.0 )
                v21 = 0.0;
            v13 = (char *)&v21;
			break;
        case 'C':
            FLDlen = lenstr(s);
            if ( FLDlen )
            {
                v16 = &s[FLDlen - 1];							// look at last char of the string
                LastChar = *v16;	
                if ( LastChar == '*' || LastChar == '+' || LastChar == '-' )	// Is it a wildcard? We might change the operator type!!
                {
                    *v16 = 0;									// get rid of wildcard char
                    --FLDlen;
                    
					if (*OpCode == 0x10)						// *OpCode are CL4 Operators. 0x10 == equal to	'='
					{
						if ( LastChar == '+' )		
							*OpCode = 0x30u;					// 0x30 == greater than or equal	'>='
						else if (LastChar == '-')
							*OpCode = 0x18u;					// 0x18 == less than or equal		'<='
					}											// if wildcard was '*', we just test the truncated length
                }
				else
					++FLDlen;									// ensure we copy the \0 byte
            }
			else
			{
			    if ( *OpCode == 0x10 || *OpCode == 0x28 )		// 0x10 == equal to					'='
			        ++FLDlen;									// 0x28 == not equal to				'<>'
			}
            v13 = s;
			break;
        default:
            v13 = (char *)&v21;
			break;
    }
	xtodom(Dest, FLDlen, fld->TDFtype, v13);
    return FLDlen;
}

EXPR *getexpr(ENTAB *entab, int TDno)
{
	FLDdesc	*fld;
	
	int		TTno;
	int		Operator;
	
	short	FieldNo;
	short	v9;
	short	OpCode;

    char	a3[1002];
	char	FLDtype;


    if ( entab && entab->entype == 2 )
    {
		//printf("getexpr entab && entab->entype == 2\n");
        Operator = entab->TTno & 0x1FF;
        switch ( Operator )
        {

            case 0x01:	// OR
            case 0x02:	// AND
                //expr_r = getexpr(ENARR(entab->enright), TDno);		// recursive
                //expr_l = getexpr(ENARR(entab->enleft), TDno);			// recursive
                //result = newjunc(expr_l, Operator, expr_r);
                return newjunc(getexpr(ENARR(entab->enleft), TDno), Operator, getexpr(ENARR(entab->enright), TDno));
                break;
						// 3 Operators bits: 
            case 0x08:	// 0x08 == less than				'<'
            case 0x10:	// 0x10 == equal to					'='
            case 0x20:	// 0x20 == greater than				'>'

	// Mixed bit tests:

            case 0x14:	// 0x14 == equal to	and like		'=*'
            case 0x18:	// 0x18 == less than or equal		'<='
            case 0x28:	// 0x28 == not equal to				'<>'
            case 0x30:	// 0x30 == greater than or equal	'>='
                FieldNo = gettdfno(ENARR(entab->enleft), &TTno, &FLDtype, 0);
				assert(FieldNo >= 0);
                
				if ( TDno && TTno != TDno )
                    return 0;
                
				entab->TTno &= 0xFDFFu;		// 1111 1101 1111 1111     clear the integer calc bit 0x0200

                fld = &ttab[TTno].TTfields[FieldNo];
                
				zap(a3, 1000u);
                OpCode = entab->TTno & 0x003C;	// mask all but relative operator bits
                v9 = getlit(fld, entab, a3, &OpCode);

                return v9 ? newexpr(fld->FLDelemID, OpCode, a3, v9) : 0;
                break;
            //default:			all others fall through
                //return 0;
        }
    }
    return 0;
}

#endif
@


1.5
log
@intermediate
@
text
@d11 14
a24 11
    char *v5;
    char *v13;
    char *v16;
    int v6;
    int v22;
    short FLDlen;
    short Src;
    double v21;
    char s[1002];
    char v7;
    char v17;
d39 1
a39 1
                if ( v6 == 0x2A || v6 == 0x3F || v6 == 0x5B)
d43 1
a43 1
				else if ( v6 == 0xAA || v6 == 0xBF || v6 == 0xDB ) // chars above with high bit set
d87 2
a88 2
                v17 = *v16;	
                if ( v17 == '*' || v17 == '+' || v17 == '-' )	// Is it a wildcard? We might change the operator type!!
d95 1
a95 1
						if ( v17 == '+' )		
d97 1
a97 1
						else if (v17 == '-')
d121 11
a131 11
    int Operator; // esi@@3
    EXPR *expr_l; // eax@@10
    EXPR *expr_r; // [sp+10h] [bp-428h]@@7
    EXPR *result; // eax@@10
    FLDdesc *fld; // [sp+14h] [bp-424h]@@18
    short FieldNo; // ax@@14
    short v9; // ax@@18
    int TTno; // [sp+18h] [bp-420h]@@14
    char a3[1002];
    short OpCode;
	char FLDtype;
d140 7
a146 5
            case 0x01:
            case 0x02:
                expr_r = getexpr(ENARR(entab->enright), TDno);		// recursive
                expr_l = getexpr(ENARR(entab->enleft), TDno);		// recursive
                result = newjunc(expr_l, Operator, expr_r);
a158 1

d173 1
a173 1
                result = v9 ? newexpr(fld->FLDelemID, OpCode, a3, v9) : 0;
d175 2
a176 2
            default:
                return 0;
a177 1
		return result;
@


1.4
log
@nearly done
@
text
@d9 1
a9 1
short getlit(FLDdesc *fld, ENTAB *entab, char *Dest, short *a4)
a14 1
    int v18;
a15 1
    short v15;
d19 1
a19 1
    char s[1022];
d23 1
a23 2
	//printf("getlit(fld = x%08X, entab = x%08X,  *a4 = %d)\n",fld,entab,*a4);

d30 1
a30 1
		if ( *a4 & 0x0004 )		//if ( *(_BYTE *)a4 & 4 ) 
d32 1
a32 2
            v5 = s;
            while ( *v5 )
d35 2
a36 1
                if ( v6 == '[' || v6 == '*' || v6 == '?')
d38 3
a40 1
				else if ( v6 == '+' || v6 == '¦' || v6 == 170 )
a41 1
				++v5;
d46 1
d57 1
a57 1
    switch ( fld->FLDtype & 0xFFFFBFFF )
d80 2
a81 3
            v15 = lenstr(s);
            FLDlen = v15;
            if ( v15 )
d83 3
a85 3
                v16 = &s[v15 - 1];
                v17 = *v16;
                if ( v17 == '*' || v17 == '+' || v17 == '-' )
d87 1
a87 1
                    *v16 = 0;
d89 8
a96 7
                    if ( v17 != '+' || *a4 != 0x10 )		// *a4 are CL4 Operators.
                    {
                        if ( v17 == '-' && *a4 == 0x10 )	// 0x10 == equal to					'='
                            *a4 = 0x18u;					// 0x18 == less than or equal		'<='
                    }
                    else
                        *a4 = 0x30u;						// 0x30 == greater than or equal	'>='
d99 1
a99 1
					++FLDlen;
d103 2
a104 3
			    v18 = (short)*a4;
			    if ( v18 == 0x10 || v18 == 0x28 )			// 0x10 == equal to					'='
			        ++FLDlen;								// 0x28 == not equal to				'<>'
d126 2
a127 2
    char a3[1022]; // [sp+1Fh] [bp-419h]@@14
    short a4;
d130 1
d133 1
d139 2
a140 2
                expr_r = getexpr(ENARR(entab->enright), TDno);
                expr_l = getexpr(ENARR(entab->enleft), TDno);
d143 12
a154 7
            case 0x08:
            case 0x10:
            case 0x14:
            case 0x18:
            case 0x20:
            case 0x28:
            case 0x30:
d166 2
a167 2
                a4 = entab->TTno & 0x003C;	// mask all but relative operator bits
                v9 = getlit(fld, entab, a3, (short*)&a4);
d169 1
a169 1
                result = v9 ? newexpr(fld->FLDelemID, a4, a3, v9) : 0;
@


1.3
log
@prior to ENARR fix
@
text
@d31 1
a31 1
        evalstr(entab->enright ? &enarr.TableAddr[entab->enright - 1] : 0, s);
d51 2
a52 2
        if ( entab->entype == 2 && entab->TTno & 0x0200 )		// Integer calc flag 0x200
            v21 = (double)evalint(entab->enright ? &enarr.TableAddr[entab->enright - 1] : 0);
d54 1
a54 1
            v21 = clround(evalnum(entab->enright ? &enarr.TableAddr[entab->enright - 1] : 0, fld->FLDtype), fld->FLDtype);
d139 2
a140 2
                expr_r = getexpr(entab->enright ? &enarr.TableAddr[entab->enright - 1] : 0, TDno);
                expr_l = getexpr(entab->enleft ? &enarr.TableAddr[entab->enleft - 1] : 0, TDno);
d150 1
a150 1
                FieldNo = gettdfno(entab->enleft ? &enarr.TableAddr[entab->enleft - 1] : 0, &TTno, &FLDtype, 0);
@


1.2
log
@intermediate. prior to asserts being fixed
@
text
@d4 2
d121 2
a122 1
    EXPR *v5; // eax@@10
a123 1
    EXPR *v11; // [sp+10h] [bp-428h]@@7
d139 3
a141 3
                v11 = getexpr(entab->enright ? &enarr.TableAddr[entab->enright - 1] : 0, TDno);
                v5 = getexpr(entab->enleft ? &enarr.TableAddr[entab->enleft - 1] : 0, TDno);
                result = newjunc(v5, Operator, v11);
d151 1
a151 2
                if ( FieldNo < 0 )
                    __assert_fail("fno_l >= 0", "getexpr.c", 0xD4u, "getexpr");
d161 1
a161 1
                a4 = entab->TTno & 0x003C;
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
        evalstr(entab->Src ? &enarr.TableAddr[entab->Src - 1] : 0, s);
d50 1
a50 1
            v21 = (double)evalint(entab->Src ? &enarr.TableAddr[entab->Src - 1] : 0);
d52 1
a52 1
            v21 = clround(evalnum(entab->Src ? &enarr.TableAddr[entab->Src - 1] : 0, fld->FLDtype), fld->FLDtype);
d135 4
a138 4
            case 1:
            case 2:
                v11 = getexpr(entab->Src ? &enarr.TableAddr[entab->Src - 1] : 0, TDno);
                v5 = getexpr(entab->Dest ? &enarr.TableAddr[entab->Dest - 1] : 0, TDno);
d141 8
a148 8
            case 8:
            case 16:
            case 20:
            case 24:
            case 32:
            case 40:
            case 48:
                FieldNo = gettdfno(entab->Dest ? &enarr.TableAddr[entab->Dest - 1] : 0, &TTno, &FLDtype, 0);
@
