head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2016.06.21.02.29.57;	author leslie;	state Exp;
branches;
next	;


desc
@move to common code
@


1.1
log
@Initial revision
@
text
@#ifndef CHKPATH_C
#define CHKPATH_C

//#define _LARGEFILE64_SOURCE
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>	// for strncmp()
#include "DBdefs.h"
#include "cl4.h"

char	file_0[8192];

// a1 must be in global mem, not on caller's stack since we are modding directly!!
// segment violation will occur if a1 on caller's stack!!

void rmdots(char *a1)
{
	char *v6;
	char *v17; // edx@@20
	char *v18; // [sp+8h] [bp-20h]@@2

	char *j; // [sp+8h] [bp-20h]@@20
	signed int v20; // [sp+10h] [bp-18h]@@1
	char *s; // [sp+14h] [bp-14h]@@1
	char *sa; // [sp+14h] [bp-14h]@@13
	char *v24; // [sp+18h] [bp-10h]@@1

	//printf("rmdots(%s)\n",a1);
	do
	{
		v20 = 0;
		v24 = 0;
		// look for all instances of "/./" and replace with "/" 
		for ( s = a1; ; s = sa + 1 )
		{
			sa = strchr(s, '/');
			if ( !sa )
				break;
			v18 = sa;
			while (!(strncmp(sa,"/./",3)))
			{
				v6 = v18 + 2;	// point at trailing '/'
				while (*v6)
				{
					*++v18 = *++v6;	
				}
				v18 = sa;
			}
		}
		//printf("passed 1st section a1 = %s\n", a1);
		
		// now look for all instances of "/../" and replace with "/"
		for ( sa = a1; ; v24 = sa )
		{
			sa = strchr(sa + 1, '/');
			if ( !sa )
				break;
			if ( v24 )	// first run through, v24 always == 0
			{
				if (!(strncmp(sa,"/../",4)))
				{
					v17 = sa + 3;
					for ( j = v24; *v17; )
					{
						*++j = *++v17;
					}
					v20 = 1;
				}
			}
		}
	}
	while ( v20 );
	//printf("rmdots returned %s\n",a1);
}

int canopen(char *FileName, unsigned short a2)
{
	signed int v2;
	unsigned int v3;
	struct stat64 stat_buf;

	//printf("canopen(%s, a2 = x%02X)\n",FileName,a2);
	v2 = 0;
	if ( strlen(FileName) <= 127 )
	{
		if ( __xstat64(3, FileName, &stat_buf))
			return 0;
		if (!geteuid()||!getuid())	// effectively UMASK 000?
			return 1;
		if ( stat_buf.st_uid == getuid() )
			v3 = a2;
		else
			v3 = stat_buf.st_gid == getgid() ? a2 >> 3 : a2 >> 6;
		
		v2 = 1;
		if (!(stat_buf.st_mode & v3))
			return 0;
	}
	return v2;
}
/*
//	int v5; // [sp+20h] [bp-78h]@@2
//	int v6; // [sp+30h] [bp-68h]@@11
//	int v7; // [sp+38h] [bp-60h]@@6
//	int v8; // [sp+3Ch] [bp-5Ch]@@8

		DumpBlock(&stat_buf, sizeof(stat_buf));
		printf("getuid() = %d [x%08X]\n", getuid(),getuid());
		printf("getgid() = %d [x%08X]\n", getgid(),getgid());

		printf("st_uid  = %d [x%08X]\n", stat_buf.st_uid, stat_buf.st_uid);
		printf("st_gid  = %d [x%08X]\n", stat_buf.st_gid, stat_buf.st_gid);
		printf("st_mode = %d [x%08X]\n", stat_buf.st_mode, stat_buf.st_mode);

BFFFEEE0 = 01 08 00 00 00 00 00 00 00 00 00 00 F8 EB 9D 00  ................
BFFFEEF0 = F6 81 00 00 01 00 00 00 8E 1E 00 00 64 00 00 00  ............d...
BFFFEF00 = 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00  ................
BFFFEF10 = 00 00 00 00 00 10 00 00 80 02 00 00 00 00 00 00  ................
BFFFEF20 = 8A 58 07 51 00 00 00 00 56 C4 88 4A 00 00 00 00  .X.Q....V..J....
BFFFEF30 = 9A F6 01 51 00 00 00 00 F8 EB 9D 00 00 00 00 00  ...Q............
getuid() = 7822 [x00001E8E]
getgid() = 100 [x00000064]
st_uid  = 7822 [x00001E8E]
st_gid  = 100 [x00000064]
st_mode = 33270 [x000081F6]
		
		if ( !geteuid() || !getuid() )
			return 1;
		if ( v7 == getuid() )
			v3 = a2;
		else
			v3 = v8 == getgid() ? a2 >> 3 : a2 >> 6;
		v2 = 1;
		if (!(v6 & v3))
			return 0;
*/		

int chkperm(char *a1, int a2, short a3)
{
	int v5;
	char FileName[128]; // [sp+10h] [bp-88h]@@2 guessing at size

	//printf("chkperm 1#  a1 = %s, a2 = %d, a3 = %d\n",a1,a2,a3);

	if ( a2 )
	{
		cdbcpystr(FileName, a1, ".enc", 0);
		v5 = canopen(FileName, a3);
		if ( v5 )
			return 1;
		cdbcpystr(FileName, a1, ".ent", 0);
		v5 = canopen(FileName, a3);
	}
	else
		v5 = canopen(a1,a3);

	if ( v5 )
		return 1;
	return 0;
}

char *chkpath(char *a1, char *a2, char *Name, int a4, short a5)
{
	char *v5; // edx@@1
	char *v6; // eax@@2
	char *v8; // eax@@15
	char *v9; // edi@@17
	char *v10; // edx@@17
	char *v17; // [sp+28h] [bp-2020h]@@2

	int v7; // eax@@9
	int v11; // eax@@26
	bool v18; // [sp+2Ch] [bp-201Ch]@@20
	char Buffer[256]; // [sp+30h] [bp-2018h]@@1

	//printf("chkpath(a1 %s, a2 %s, Name %s, a4 %d, a5 %d)\n",a1,a2,Name,a4,a5);
	Buffer[0] = 0;
	v5 = 0;
	if ( a1 )
	{
		v6 = getdirname(a1);
		v17 = v6;
		if ( *v6 == '.' )
		{
			if ( v6[1] == '/' )
			{
				cdbcpystr(Buffer, ":", 0);
				v17 += 2;
			}
			else
			{
				if ( v6[1] == '.' && v6[2] == '/' )
				{
					cdbcpystr(Buffer, "..:", 0);
					v17 += 3;
				}
			}
			goto LABEL_12;
		}

		if ( *v6 != '/' )
		{
LABEL_12:
			if ( !Buffer[0] )
			{
				if ( a2 )
					cdbcpystr(Buffer, a2, "/:", 0);
				v8 = getevar(Name);
				cdbcpystr(Buffer, Buffer, v8, 0);
				if ( Buffer[0] != ':' )
					cdbcpystr(Buffer, Buffer, "::", 0);
			}

			v9 = Buffer;
			v10 = Buffer;
			while ( 1 )
			{
				while ( *v9 != ':' && *v9 )
					++v9;
				v18 = *v9 == 0;
				*v9 = 0;
				
				if ( v10 == v9 )
					cdbcpystr(file_0, cwd, "/", v17, 0);
				else if ( *v10 != '.' )
					cdbcpystr(file_0, v10, "/", v17, 0);
				else
					cdbcpystr(file_0, cwd, "/", v10, "/", v17, 0);

				rmdots(file_0);
				v11 = chkperm(file_0, a4, a5);
				if ( v11 )
					return file_0;

				++v9;
				v10 = v9;
				if ( v18 || !*v9 )
					return 0;
			}
		}
		// *v6 == '/'
		v7 = chkperm(v6, a4, a5);
		v5 = v17;
		if ( !v7 )
			v5 = 0;
	}
	return v5;
}


#endif
@
