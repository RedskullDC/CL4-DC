head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2016.01.13.04.59.30;	author leslie;	state Exp;
branches;
next	;


desc
@initial
@


1.1
log
@Initial revision
@
text
@#ifndef CL_FORK_C
#define CL_FORK_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include <termio.h>		// for ioctl etc.
#include <unistd.h>		// for isatty(fileno(stdout))
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"                    // Table numbers

int _ltransfer(int DBno, int NewPID)
{
    DBinfo	*DBptr; // esi@@1
    EXPR	*expr; // edi@@4
    int		*v6; // eax@@4

    int		result; // eax@@1
    int		v4; // eax@@2
    int		PID; // eax@@4
    TD2REC	td2; // [sp+20h] [bp-A8h]@@4

    DBptr = _chkdb(DBno);                        // transfer lock records to new PID after a fork()
    result = 0;
    if ( DBptr )
    {
        v4 = check_bup_sem(DBptr);
        if ( v4 )
            derror(v4, DBptr, 0);
        PID = getpid();
        v6 = ltoms((int *)&td2.TableIndex, PID);
        for ( expr = newexpr(115, 0x10, (char *)v6, 4); DBptr; DBptr = DBptr->DBnextDB )
        {
            if ( DBptr->DBvflag > 3 )
            {
                _chktd(2)->TDDBinfo = DBptr;
                cdbrestrict(2, expr);
                while ( getnxt(2, &td2.TableIndex, expr) > 0 )
                {
                    ltoms(&td2.PID, NewPID);
                    putr(2, &td2.TableIndex, 0);
                }
            }
        }
        fretre(expr, 0);
        result = 1;
    }
    return result;
}

/*void ltransfer(int DBno, int a2)
{
    xenter((int)ltransfer, DBno, a2);
}
*/

void clfork(int DBno, int a2, int NewPID)
{
    DBinfo *DBptr; // eax@@1

    DBptr = _chkdb(DBno);
    if ( a2 )
    {
        DBptr->PageList1[0] = 0;
    }
    else
    {
        DBptr->SpareList[0] = 0;
        _ltransfer(DBno, NewPID);		// should call through xenter!
    }
}

#endif

@
