head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.10.02.05.01.39;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef SALLOC_C
#define SALLOC_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

SALLOCBUF *_salloc(SALLOCBUF *Buffer, int LDsize, int avgRecSize)
{
    short MaxRecs; // ax@@1
    char **v4; // edx@@1
    int v5; // eax@@1

    MaxRecs = (LDsize - 52) / (unsigned int)(avgRecSize + 12);// calc how many recs fit in buffer
    Buffer->NextSA = Buffer + 1;	//*** this is wrong ***
    Buffer->field_8 = MaxRecs;
    Buffer->field_4 = 0;
    Buffer->field_6 = MaxRecs;
    Buffer->field_10 = (char *)&Buffer[1] + 8 * Buffer->field_8;// point into buffer area
    v4 = (char **)((char *)Buffer + (LDsize & 0xFFFFFFFC));
    Buffer->field_14 = (int)v4;
    Buffer->field_C = (char *)(v4 - 1);         // following field point back at each other
    *(v4 - 1) = (char *)&Buffer->field_C;
    v5 = 0;
    do
    {
        Buffer->field_18[v5] = 0;
        v5++;
    }
    while ( v5 <= 5 );
    Buffer->field_30 = 0;
    return Buffer;
}


#endif
@
