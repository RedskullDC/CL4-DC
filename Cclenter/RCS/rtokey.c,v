head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.11.19.05.42.11;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef RTOKEY_C
#define RTOKEY_C

#include "DBdefs.h"
#include "cl4.h"

int rtokey(char *KeyBuf, char *Src, POS *Pos, TDef *TDefP)
{
	TDef *tdef;
	char *Dest;
	short TDFtype;
	size_t v6;
	short v7;
	short v10;
	short v11;

	int localsize;
	char local[128];	// for testing

	//printf("rtokey(KeyBuf: x%08X,Src: x%08X,POS: x%08X, TDef: x%08X)\n" ,KeyBuf,Src,Pos,TDefP);

	tdef = TDefP;
	Dest = KeyBuf;
	if ( TDefP->TDFentry )
	{
		for ( TDFtype = TDefP->TDFtype; TDFtype & tdf_KEY; TDFtype = tdef->TDFtype )	// & 1 == Keyfield.
		{
			if ( Pos )	// Has a re-position record been supplied?
			{
				v7 = cdbrindex(Pos, tdef->TDFentry);
				if ( v7 >= 0 )
				{	
					v10 = tdef->TDFtype;
					if ( v10 & 0x0008 )  //???
					{
						if ( v10 & tdf_STRING )
							v11 = _fwidth(&Src[v7], tdef->TDFsize, tdef->TDFtype);
						else
							v11 = tdef->TDFsize;
						Dest += cpytuc(Dest, &Src[v7], v11);
					}
					else
					{
						Dest += xtodom(Dest, tdef->TDFsize, tdef->TDFtype, &Src[v7]);
						/*DumpBlock(Dest, tdef->TDFsize);
						printf("rtokey: v9 = %d\n",v9);
						localsize = Lxtodom(local, tdef->TDFsize, tdef->TDFtype, &Src[v7]);
						DumpBlock(local, tdef->TDFsize);
						printf("rtokey: localsize = %d\n",localsize);*/

					}
				}
				else
				{
					Dest += cdbfclear(Dest, tdef->TDFsize, tdef->TDFtype);
				}
			}
			else	// No Pos specified, just place in buffer at normal position.
			{
				if ( TDFtype & tdf_STRING )				// String field variable
					v6 = (size_t)_fwidth(Src, tdef->TDFsize, TDFtype);
				else
					v6 = tdef->TDFsize;

				Dest += cpybuf(Dest, Src, v6);
				Src += tdef->TDFsize;
			}
			tdef++;
			if ( !tdef->TDFentry )
				break;
		}
	}
	return Dest - KeyBuf;
}

#endif
@
