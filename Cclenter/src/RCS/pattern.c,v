head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2016.04.08.01.36.54;	author leslie;	state Exp;
branches;
next	;


desc
@initial
@


1.1
log
@Initial revision
@
text
@#ifndef PATTERN_C
#define PATTERN_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

short trysmatch(char *a2, char *arg0);

short smatch(char *a1, char *a2)
{
    char *v2; // esi@@1
    char *v3; // edx@@1
    short v4; // ax@@2
    short result; // ax@@10
    char v6; // [sp+Fh] [bp-9h]@@10

    v2 = a2;
    v3 = a2;
    if ( *a2 )
    {
        while ( 1 )
        {
            v4 = 0;
            while ( *v2 && (*v2 != ('|') || v4))
			{
				if ( *v2 == '\\' )
					v4 = v4 == 0;
				else
					v4 = 0;
				++v2;
            }
            v6 = *v2;
            *v2 = 0;
            result = trysmatch(a1, v3);
            if ( result )
                break;
            *v2 = v6;
            if ( v6 )
                ++v2;
            v3 = v2;
            if ( !*v2 )
                goto LABEL_15;
        }
        *v2 = v6;
    }
    else
    {
LABEL_15:
        result = 0;
    }
    return result;
}

short trysmatch(char *a2, char *arg0)
{
    char *v2; // edi@@1
    short result; // ax@@1
    char *v4; // eax@@2
    char *v5; // esi@@2
    signed short v6; // ax@@6
    char *MatchChars; // eax@@8
    short MaxLen; // [sp+4h] [bp-24h]@@8
    int MatchCount; // [sp+8h] [bp-20h]@@8
    short v10; // [sp+14h] [bp-14h]@@1
    char *a3; // [sp+18h] [bp-10h]@@2

    v10 = 0;
    //v2 = recomp(arg0, 0, 0, 0); need to fixx!!!!!!
	v2 = a2;	/** fudge**/
    result = -1;
    if ( v2 )
    {
        setmatch("", 0, 0);                     // clear any existing values for "MATCH" and "LMATCH"
        a3 = 0;
        v4 = reexec(v2, a2, &a3);
        v5 = v4;
        if ( v4 )
        {
            if ( lenstr(v4) > 1000 )
                v5[1000] = 0;
            v10 = (short)(__loc1 - a2 + 1);
            if ( a3 )
            {
                v6 = lenstr(a3);
                if ( v6 >= 1001 )
                    v6 = 1000;
                MatchCount = v5 - __loc1;
                MaxLen = v6;
                MatchChars = a3;
            }
            else
            {
                MatchCount = v5 - __loc1;
                MaxLen = 0;
                MatchChars = "";
            }
            setmatch(MatchChars, MaxLen, MatchCount);
        }
        mfree_0(v2);
        result = v10;
    }
    return result;
}


void setmatch(char *MatchChars, short MaxLen, int MatchCount)
{
    FLDdesc *MatchFLD; // edi@@1
    int v4; // esi@@1

	MatchFLD = &ttab->TTfields[v_MATCH];		// "MATCH" fld
    v4 = MaxLen;
    if ( MaxLen >= 1000 )
        v4 = 999;
    
	cpybuf((char *)ttab->TTfields[v_MATCH].FLDdata, MatchChars, v4);// Max 1000 chars
    *((char *)MatchFLD->FLDdata + v4) = 0;
    
	if ( *MatchChars )
        MatchFLD->FLDstat = (MatchFLD->FLDstat | fld_DATA_AVAIL) & ~fld_ZERO;
//        MatchFLD->FLDstat = (MatchFLD->FLDstat | 0x0010) & 0xFFFB;

    setvar(v_LMATCH, MatchCount);		// "LMATCH"
}

// pmatch() not called in clenter

#endif
@
