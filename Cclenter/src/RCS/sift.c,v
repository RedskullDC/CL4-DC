head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2016.08.31.00.38.20;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.08.05.21.55;	author leslie;	state Exp;
branches;
next	;


desc
@inital checkin
@


1.2
log
@cleanup
@
text
@#ifndef SIFT_C
#define SIFT_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

void swapref(REFR *refr, short Left, short Right)
{
    REFR	**v6;
	REFR	**v7;
	
	REFR	*R_left;
	REFR	*R_rght;
	char	*v5;
	
    R_left			= &refr[Left];
    R_rght			= &refr[Right];
    v5				= R_left->Offset;
    v6				= R_left->Data;
    R_left->Offset	= R_rght->Offset;
    v7				= R_rght->Data;
    R_left->Data	= R_rght->Data;
    *v7				= R_left;
    R_rght->Offset	= v5;
    R_rght->Data	= v6;
    *v6				= R_rght;
}

void _siftdown(REFR *a1, short a2, short a3, TDef *tdef)
{
    short v4;
	short idx;
	
    v4 = a3;
    for ( idx = (2 * a3 + 1); idx < a2; idx = (2 * idx + 1) )
    {
        if ( idx + 1 < a2 && _cmpkey(a1[idx + 1].Offset, a1[idx].Offset, tdef) <= -1 )
            idx++;

		if ( _cmpkey(a1[v4].Offset, a1[idx].Offset, tdef) <= 0 )
            break;

        swapref(a1, v4, idx);
        v4 = idx;
    }
}

void _siftup(REFR *a1, short a2, TDef *tdef)
{
    short idx;
	short v4;
	
    for ( idx = a2 - 1; ; idx = (idx - 1) / 2 )
    {
        v4 = (idx - 1) / 2;
        if ( v4 >= idx || _cmpkey(a1[idx].Offset, a1[v4].Offset, tdef) >= 0 )
            break;

		swapref(a1, idx, v4);        // i-1/2 == v4
        //swapref(a1, idx, (idx - 1) / 2);        // i-1/2 == v4
    }
    _siftdown(a1, a2, idx, tdef);
}


#endif
@


1.1
log
@Initial revision
@
text
@d14 18
a31 17
    REFR *R_left; // eax@@1
    REFR *R_rght; // edx@@1
    char *v5; // edi@@1
    REFR *v6; // esi@@1
    REFR *v7; // ecx@@1

    R_left = &refr[Left];
    R_rght = &refr[Right];
    v5 = R_left->Offset;
    v6 = R_left->Data;
    R_left->Offset = R_rght->Offset;
    v7 = R_rght->Data;
    R_left->Data = R_rght->Data;
    v7->Data = R_left;
    R_rght->Offset = v5;
    R_rght->Data = v6;
    v6->Data = R_rght;
d36 3
a38 3
    short v4; // edi@@1
    short idx; // esi@@1

d55 3
a57 3
    short idx; // esi@@1
    short v4; // edi@@3

@
