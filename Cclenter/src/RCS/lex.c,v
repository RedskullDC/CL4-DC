head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.08.18.05.56.24;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.07.17.06.06.56;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2015.05.06.06.56.42;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@cleanup, remove ctype stuff
@
text
@#ifndef LEXX_C
#define LEXX_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

int Lex(_IO_FILE *stream)
{
    int NextState;
    int CharRead;
    char *v6;
    char s2[80];

    NextState = 1;	// state machine default. Look for control chars
    v6 = 0;

    while ( 2 )
    {
        CharRead = Lex_GetChar(stream);
        if ( CharRead == -1 )
            return -1;
        switch ( NextState )
        {
            case 1:
                switch ( CharRead )
                {
                    case '\t':				// ignore, these are treated as white space chars
                    case ' ':
                        continue;
                    case '{':				// Add a new sub-list
                        return 1;
                    case '}':				// end of sub-list
                        return 2;
                    case '<':				// "keypress" Next item will be KeyName/Function name
                        NextState = 8;
                        continue;
                    case '+':
                        v6 = s2;
                        NextState = 7;
                        continue;
                    case '\'':
                        Lex_KeyType = Lex_GetSChar(stream, &Lex_CommRStart, &Lex_CommREnd);
                        NextState = 2;	// look for a closing single quote
                        continue;
                    case '"':
                        v6 = Lex_CommString;
		                NextState = 4;
				        continue;
                    case '#':				// comment line
                        NextState = 10;
                        continue;
                    case '@@':
                        NextState = 11;
                        continue;
                    default:
                        if ( isalpha(CharRead))
						{
                            Lex_CommFunctionName[0] = CharRead;
                            v6 = &Lex_CommFunctionName[1];
                            NextState = 3;
                        }
                        else
                        {
                            if ( !(isdigit(CharRead)) )
                            {
                                fprintf(stderr, "file error bad char %c in file, line %d\n", CharRead, LineNumber);
                                exit(1);
                            }
                            s2[0] = CharRead;
                            v6 = &s2[1];
                            NextState = 6;
                        }
                        break;
                    case '\n':
                    case '\r':
	                    ++LineNumber;
		                continue;
                }
                continue;

            case 2:		// look for a closing single quote
                if ( CharRead == '\'' )
                    return 3;
                fprintf(stderr, "file error no closing quote at line %d\n", LineNumber);
                exit(1);
            
			case 3:		// Return a function name? 
                if ( (*__ctype_b_loc())[CharRead] & 8 || CharRead == '_' )
				{
                    *v6++ = CharRead;
                    continue;
				}
                ungetc(CharRead, stream);
                *v6 = 0;
				//printf("Lex case:3, Lex_CommFunctionName = %s\n",Lex_CommFunctionName);
                return 4;		// Function name found and returned to caller

            case 4:				// string value handler
                if ( CharRead == '\\' )	// skip over slash chars
                {
                    NextState = 5;
                }
                else
                {
                    if ( CharRead == '"' )	// end of string value.
                    {
                        *v6 = 0;
                        return 5;
                    }
                    *v6++ = CharRead;	// copy to output stream
                }
                continue;
            case 5:
                *v6++ = CharRead;
                NextState = 4;
                continue;
            case 6:			// look for a numeric value
                if ((*__ctype_b_loc())[CharRead] & 0x0800 )
				{
                    *v6++ = CharRead;
	                continue;
				}
                ungetc(CharRead, stream);
                *v6 = 0;
                Lex_CommDigit = strtol(s2, 0, 10);
				//printf("Lex case:6, Lex_CommDigit = x%04X\n",Lex_CommDigit);
                return 6;
            case 7:
                if ( (*__ctype_b_loc())[CharRead] & 8 || CharRead == '_' )
				{
                    *v6++ = CharRead;
	                continue;
				}
                ungetc(CharRead, stream);
                *v6 = 0;
                Lex_CommRStart = KeyToNumber(s2);
				//printf("Lex case:7, Lex_CommRStart = x%04X, KeyName = %s\n",Lex_CommRStart,s2);
                if ( !Lex_CommRStart )
                    fprintf(stderr, "no such key name |%s| at line %d\n", s2, LineNumber);
                Lex_CommREnd = 0;
                Lex_KeyType = 1;
                return 3;

            case 8:
                if ( CharRead == '\t' || CharRead == ' ' )
                {
                    if ( CharRead != '\n' )	//should always be true!
                        continue;
                    ++LineNumber;
                    continue;
                }
                if ( CharRead == '\n' )
				{
					++LineNumber;
                    continue;
				}
				if ( (*__ctype_b_loc())[CharRead] & 8 || CharRead == '_' )
                {
                    s2[0] = CharRead;
                    v6 = &s2[1];
                    NextState = 9;
                }
                else
                {
                    NextState = 14;
                    if ( CharRead != '@@' )
                    {
                        ungetc(CharRead, stream);
                        Lex_CommRStart = -1;
                        return 8;
                    }
                }
                continue;
            case 9:					// look for a text keyname
                if ( (*__ctype_b_loc())[CharRead] & 8 || CharRead == '_' )
                {
                    *v6++ = CharRead;
                    continue;
                }
                ungetc(CharRead, stream);
                *v6 = 0;
                Lex_CommRStart = KeyToNumber(s2);	// Convert KeyName to int
                if ( !Lex_CommRStart )
                    fprintf(stderr, "no such key name |%s| line %d\n", s2, LineNumber);
                return 8;
            case 10:		// comment line handler.
                if ( CharRead == '\n' ) // Ignore chars till NewLine found
                    NextState = 1;
                continue;
            case 11:
                if ( CharRead == '\'' )
                {
                    Lex_KeyType = Lex_GetSChar(stream, &Lex_CommRStart, &Lex_CommREnd);
                    Lex_CommDigit = Lex_CommRStart;
                    NextState = 13;
                }
                else
                {
                    s2[0] = CharRead;
                    v6 = &s2[1];
                    NextState = 12;
                }
                continue;
            case 12:
                if ( (*__ctype_b_loc())[CharRead] & 8 || CharRead == '_' )
				{
                    *v6++ = CharRead;
	                continue;
				}
                ungetc(CharRead, stream);
                *v6 = 0;
				//printf("Lex case:12, s2 = %s\n",s2);
                Lex_CommDigit = KeyToNumber(s2);
                if ( !Lex_CommDigit )
                    fprintf(stderr, "no such key name |%s| at line %d\n", s2, LineNumber);
                return 6;
            case 13:
                if ( CharRead == '\'' )
                    return 6;
                fprintf(stderr, "file error no closing quote at line %d\n", LineNumber);
                exit(1);
            case 14:
                if ( CharRead != '\'' )
                    fwrite("expected a ' after an @@ in a <\n", 1u, 0x1Fu, stderr);
                Lex_GetSChar(stream, &Lex_CommRStart, &Lex_CommREnd);
                NextState = 15;
                continue;
            case 15:
                if ( CharRead == '\'' )
                    return 8;
                fprintf(stderr, "no closing quote for < @@'#' construct at line %d\n", LineNumber);
                exit(1);
            default:
                continue;
        }
    }
}

int Lex_GetSChar(_IO_FILE *fp, int *Rstart, int *Rend)
{
    char *v12; // [sp+1Ch] [bp-7Ch]@@1
    int NextState; // esi@@1
    int result; // eax@@11
    int CharRead; // [sp+20h] [bp-78h]@@2
    int v14; // [sp+24h] [bp-74h]@@22
    int v15; // [sp+28h] [bp-70h]@@16
    int v16; // [sp+2Ch] [bp-6Ch]@@16
    char Buffer[80]; // [sp+30h] [bp-68h]@@35

    NextState = 1;
    v12 = 0;
    while ( 1 )
    {
_L185_0:
        while ( 1 )
        {
            CharRead = _IO_getc(fp);
            if ( CharRead != '\t' )
            {
                if ( CharRead != ' ' )
                    break;
            }
            if ( CharRead == '\n' )		// end of line, go around again
                goto LABEL_7;
        }
        if ( CharRead != '\n' )
            break;
LABEL_7:
        ++LineNumber;
    }

    switch ( NextState )
    {
        case 1:		// deal with first character. determine what should follow.
            if ( CharRead == '[' )	// range definition should follow  eg. [A-K]
            {
                if ( Lex_GetSChar(fp, &v15, &v16) != 1 )
                {
                    fprintf(stderr, "Specifics only in range start at line %d", LineNumber);
                    exit(1);
                }
                *Rstart = v15;	// range starting char
                NextState = 8;	// Range handler
                goto _L185_0;
            }
            if ( CharRead > '[' )
            {
                if ( CharRead == '\\' )
                    NextState = 7;	// slash char should follow
                else
                {
                    NextState = 9;
                    if ( CharRead != '^' )	// control char should follow
					{
						*Rstart = CharRead;
						return 1;
					}
                }
                goto _L185_0;
            }
            result = 3;
            if ( CharRead != '*' )
            {
                *Rstart = CharRead;
                result = 1;
            }
            return result;

        case 8:
            if ( CharRead != '-' )
            {
                fprintf(stderr, "'-' missing line %d\n", LineNumber);
                exit(1);
            }
            if ( Lex_GetSChar(fp, &v14, &v16) != 1 )
            {
                fprintf(stderr, "Specifics only in range end line %d", LineNumber);
                exit(1);
            }
            *Rend = v14;
            NextState = 3; 
            goto _L185_0;

        case 3:				// look for end of range specifier
            if ( CharRead != ']' )
            {
                fprintf(stderr, "missing closing ] line %d\n", LineNumber);
                exit(1);
            }
            return 2; // range read

        case 4:										// deal with HEX value digits
            if (isxdigit(CharRead))		// 0-9,A-F
			{
		        *v12 = CharRead;
		        v12++;
	            goto _L185_0;
			}
            ungetc(CharRead, fp);		// hit a non hex-digit character, back up one
            *v12 = 0;
            sscanf(Buffer, "%x", &CharRead);	// try and interpret as hex number
			*Rstart = CharRead;
			return 1;

        case 5:										// deal with octal digits
            if (isdigit(CharRead))		// 0-9
            {
				*v12 = CharRead;
				v12++;
				goto _L185_0;
            }
			ungetc(CharRead, fp);		// hit a non-digit character, back up one
			*v12 = 0;
			sscanf(Buffer, "%o", &CharRead);	// try and interpret as octal number
			*Rstart = CharRead;
			return 1;
        
		case 9:							// deal with control chars (0-31)
            if ( CharRead == '^' )
                *Rstart = '^';
			else
				*Rstart = CharRead & 0x1F;	// mask 0-31
			return 1;

		case 7:							// deal with slash chars
            switch ( CharRead )
            {
                case 'n':
                    *Rstart = '\n';
                    return 1;
                case 't':
                    *Rstart = '\t';
                    return 1;
                case 'b':
                    *Rstart = '\b';
                    return 1;
                case 'E':
                case 'e':
                    *Rstart = '\x1B';	// <ESC>
                    return 1;
                case 'f':
                    *Rstart = '\f';
                    return 1;
                case 'r':
                    *Rstart = '\r';
                    return 1;
                case 's':
                    *Rstart = ' ';		// <SPC>
                    return 1;
                case '\\':
                    *Rstart = '\\';
					return 1;
                case '\'':
                    *Rstart = '\'';
                    return 1;
                case 'x':				// hex value follows
                    NextState = 4;
				    v12 = Buffer;
		            goto _L185_0;
                default:
                    //if ( !((*__ctype_b_loc())[CharRead] & 0x0800) )		// isdigit() == 0x0800
                    if (!isdigit(CharRead))
					{
						*Rstart = CharRead;
						return 1;
					}
                    Buffer[0] = CharRead;	// assume that following values are octal digits
                    v12 = &Buffer[1];
                    NextState = 5;
                    break;
            }
            goto _L185_0;
        default:
            goto _L185_0;
    }
}

int Lex_GetChar(_IO_FILE *stream)
{
    char *v5; // [sp+18h] [bp-70h]@@1
    int CharRead; // [sp+1Ch] [bp-6Ch]@@2
    int NextState; // esi@@1
    char Buffer[80]; // [sp+20h] [bp-68h]@@20

    NextState = 1;
    v5 = 0;
    while ( 2 )
    {
        CharRead = _IO_getc(stream);
        if ( CharRead == -1 )
            return -1;
        switch ( NextState )
        {
            case 1:
                if ( CharRead == '\\' )
                    NextState = 3;
                else
                {
                    NextState = 2;
                    if ( CharRead != '^' )
                        return CharRead;
                }
                continue;
            case 2:
                return CharRead & 0x1F;
            case 3:
                switch ( CharRead )
                {
                    case 'n':
                        return '\n';
                    case 't':
                        return '\t';
                    case 'b':
                        return '\b';
                    case 'r':
                        return '\r';
                    case 's':
                        return ' ';
                    case '\\':
                        return '\\';
                    case '\'':
                        return '\'';
                    case 'f':
                        return '\f';
                    case 'E':
                    case 'e':
                        return '\x1B';
                    case 'x':
                        NextState = 4;			// look for hex digits
                        v5 = Buffer;
                        continue;
                    default:
                        //if ( !((*__ctype_b_loc())[CharRead] & 0x0800) )		// isdigit() == 0x0800
                        if (!isdigit(CharRead))		// isdigit() == 0x0800
                            return CharRead;
                        Buffer[0] = CharRead;
                        v5 = &Buffer[1];
                        NextState = 5;
                        break;
                }
                continue;
            case 4:
                //if ((*__ctype_b_loc())[CharRead] & 0x1000 ) // isxdigit() == 0x1000
                if (isxdigit(CharRead)) // isxdigit() == 0x1000
                {
                    *v5++ = CharRead;
                    continue;
                }
                ungetc(CharRead, stream);
                *v5 = 0;
                sscanf(Buffer, "%x", &CharRead);
                return CharRead;
            case 5:
				//if ((*__ctype_b_loc())[CharRead] & 0x0800 ) // isdigit() == 0x0800
			    if (isdigit(CharRead)) // isdigit() == 0x0800
                {
                    *v5++ = CharRead;
                    continue;
                }
                ungetc(CharRead, stream);
                *v5 = 0;
                sscanf(Buffer, "%o", &CharRead);
                return CharRead;
            default:
                continue;
        }
    }
}

#endif
@


1.2
log
@intermediate
@
text
@a60 1
                        //if ((*__ctype_b_loc())[CharRead] & 0x0400 ) //isalpha()  ==	0x0400
a68 1
                            //if ( !((*__ctype_b_loc())[CharRead] & 0x0800) )// isdigit()  ==	0x0800
d246 1
a247 1
    //int v4; // eax@@2
a248 1
    char *v12; // [sp+1Ch] [bp-7Ch]@@1
d268 1
a268 1
            if ( CharRead == '\n' )
a293 1
                {
a294 1
                }
d406 2
a407 1
                    if ( !((*__ctype_b_loc())[CharRead] & 0x0800) )
a424 1
    int NextState; // esi@@1
d427 1
a440 1
                {
a441 1
                }
d474 1
a474 1
                        NextState = 4;
d478 2
a479 1
                        if ( !((*__ctype_b_loc())[CharRead] & 0x0800) )
d488 2
a489 1
                if ((*__ctype_b_loc())[CharRead] & 0x1000 ) // isxdigit() == 0x1000
d499 2
a500 1
                if ((*__ctype_b_loc())[CharRead] & 0x0800 ) // isdigit() == 0x0800
@


1.1
log
@Initial revision
@
text
@d14 4
a17 5
    int NextState; // edi@@1
    int CharRead; // esi@@2
    int result; // eax@@2
    char *v6; // [sp+1Ch] [bp-6Ch]@@1
    char s2[80]; // [sp+20h] [bp-68h]@@8
a24 1
        result = -1;
d26 1
a26 1
            return result;
d87 1
a88 1
                result = 3;
d90 1
a90 1
                    return result;
d93 2
a94 1
            case 3:		// Return a function name? 
d104 1
d150 1
a224 1
                result = 6;
d226 1
a226 1
                    return result;
a235 1
                result = 8;
d237 1
a237 1
                    return result;
d249 1
a249 1
    int v4; // eax@@2
d265 2
a266 3
            v4 = _IO_getc(fp);
            CharRead = v4;
            if ( v4 != '\t' )
d268 1
a268 1
                if ( v4 != ' ' )
d274 1
a274 1
        if ( v4 != '\n' )
d279 1
d318 1
d333 1
d341 3
a343 2
        case 4:												// deal with HEX value digits
            if ((*__ctype_b_loc())[CharRead] & 0x1000 )
d349 1
a349 1
            ungetc(CharRead, fp);
d351 1
a351 1
            sscanf(Buffer, "%x", &CharRead);
d354 3
a356 2
        case 5:												// deal with octal digits
            if ((*__ctype_b_loc())[CharRead] & 0x0800 )
d362 1
a362 1
			ungetc(CharRead, fp);
d364 1
a364 1
			sscanf(Buffer, "%o", &CharRead);
d367 2
a368 1
        case 9:							// deal with control chars (0-31)
a369 1
            {
d371 2
a372 3
                return 1;
            }
			*Rstart = CharRead & 0x1F;	// mask 0-31
d374 2
a375 1
        case 7:							// deal with slash chars
@
