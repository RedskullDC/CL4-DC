head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2015.06.13.13.56.23;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.14.04.03.39;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@intermediate
@
text
@#ifndef READNEXT_C
#define READNEXT_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include "DBdefs.h"
#include "cl4.h"

void fix_buf(int TTno, char *WorkArea)
{
	FLDdesc *fld;
	char *v3;
	int v4;
	signed int v7;

	// convert all string key fields to uppercase for comparison  
	for ( fld = ttab[TTno].TTfields; fld->FLDstat & fld_KEY; fld++ )
	{
		if ( fld->FLDtype == 'C' )
		{
			v3 = WorkArea;
			v7 = 0;
			while ( fld->FLDlen > v7 && *v3 )
			{
				v4 = *v3;
				if (islower(v4))
					*v3 = toupper(v4);
				++v7;
				++v3;
			}
		}
		WorkArea += fld->FLDlen;
	}
}

short rdnxt(int TDno, EXPR *expr, int Lock, int a4)
{
    char *v4; // edi@@1
    int v5; // eax@@1
    short v7; // esi@@9
    short v8; // ax@@11
    int MaxLen; // [sp+14h] [bp-B4h]@@6
    int TDNo; // [sp+18h] [bp-B0h]@@1
    TDesc *TTptr; // [sp+1Ch] [bp-ACh]@@1
    char Src[1024]; // [sp+20h] [bp-A8h]@@6

	//printf("rdnxt(TDno = %d, EXPR = x%08X, Lock = %d, a4 = %d)\n",TDno,expr,Lock,a4);

    TTptr = &ttab[TDno];
    TDNo = rtdget(TTptr);
    v4 = TTptr->TDworkarea1;
    ulckrec(TDno);
    
	v5 = 0;
    if ( a4 )
        v5 = 99;	// This will break records with > 98 fields if a4 is set!

    rfree(TDno, v5);
    TTptr->TDlocked &= 0xFFDFu;		// clear 0x0040
    if ( TTptr->TDlocked & 0x0200 )	// Lock bit included by clcomp?
        Lock = 0;
    
	while ((v7 = getnxt(TDNo, v4, expr)) > 0 )			// (< 0) == ERROR, 0 = no data, (> 0) == success
	{
        //v7 = getnxt(TDNo, v4, expr);
        //if ( v7 <= 0 )	// Either no data, or error condition
        //    break;
        if ( !Lock )		// Data found, if no lock requested, return to caller
		{
            rkfree(TDno);
            ravail(TDno);	// Set flags indication data is in WorkArea buffer
            break;
		}
        
		MaxLen = keysize(TDNo);
        cpybuf(Src, v4, MaxLen);
        fix_buf(TDno, v4);

        while ((v7 = lgetr(TDNo, v4, 0)) == -10 && Lock != 1024)
        {
            //v7 = lgetr(TDNo, v4, 0);
            //if ( v7 != -10 || Lock == 1024 )
            //    break;
            sleep(1u);	// Keep trying until record becomes free. Potential deadlock!
			//printf("rdnxt stuck in lock loop, v7 = %d, Lock = %d\n",v7,Lock);
        }
		//printf("rdnxt 952 - v7 = %d, Lock = %d\n",v7,Lock);
        if ( v7 )
        {
            if ( v7 > 0 || v7 == -10 )
                cpybuf(v4, Src, MaxLen);
            
			if ( v7 <= 0 )
			{
                if ( v7 != -10 )
                    break;
	            rkfree(TDno);
		        ravail(TDno);
			    break;
			}
            TTptr->TDlocked |= 0x0001u;
            cpybuf(TTptr->TDworkarea2, v4, TTptr->TDrecsize);
            if ( v7 <= 0 )	// not reachable due to test above
            {
                if ( v7 != -10 )
                    break;
            }
            rkfree(TDno);
            ravail(TDno);
            break;
        }
		//printf("rdnxt 967 - v7 = %d, Lock = %d\n",v7,Lock);
        v8 = ulockr(TDNo, v4, 0);
        if ( v8 < 0 )
            dberror(v8, 0, TDNo);
    }
//================================
    if ( v7 < 0 && v7 != -10 )
        dberror(v7, 0, TDNo);
    return v7;
}

#endif

@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
	signed int v6;
d18 1
a18 1
	for ( fld = ttab[TTno].TTfields; fld->FLDstat & fld_KEY; ++fld )
d23 2
a24 2
			v6 = 0;
			while ( fld->FLDlen > v6 && *v3 )
d29 1
a29 1
				++v6;
a40 1
    short v6; // ax@@9
a42 1
    short v9; // ax@@21
d64 6
a69 7
	while ( 1 )
    {
        v9 = getnxt(TDNo, v4, expr);
        v7 = v9;
        if ( v9 <= 0 )	// Either no data, or error condition
            break;
        if ( !Lock )	// Data found, if no lock requested, return to caller
d80 1
a80 1
        while ( 1 )
d82 3
a84 4
            v6 = lgetr(TDNo, v4, 0);
            v7 = v6;
            if ( v6 != -10 || Lock == 1024 )
                break;
d86 1
a86 1
			//printf("rdnxt stuck in lock loop\n");
d88 2
a89 2
		//printf("rdnxt 952 - v6 = %d, Lock = %d\n",v6,Lock);
        if ( v6 )
d91 1
a91 1
            if ( v6 > 0 || v6 == -10 )
d93 2
a94 1
            if ( v7 <= 0 )
d104 1
a104 1
            if ( v7 <= 0 )
d113 1
a113 1
		//printf("rdnxt 967 - v6 = %d, Lock = %d\n",v6,Lock);
@
