head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2016.08.29.08.08.20;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.03.04.37.03;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@clean-up
@
text
@#ifndef BUILDEXPR_C
#define BUILDEXPR_C

#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

EXPR* bldexpr(int TTno, int FieldNo, int SrchMode)
{
	EXPR	*v12;
	EXPR	*v17;
	FLDdesc *Fld;
	char	*Src;
	
	double	v21;
	int		v19;
	int		CurrFldNo;
	int		v22;
	size_t	NumBytes;

	short	v6;
	short	Operator;
	short	v24;
	char	WildChar;
	char	last;

	char	ExprData[142];

	//printf("bldexpr(TDno: %d,FieldNo = %d, SrchMode = %C)\n" ,TTno,FieldNo,SrchMode);

	NumBytes = 0;
	Src = 0;
	if ( FieldNo < 0 )			// delset() passes -1 in here
		FieldNo = 0x200u;		// special flag, see below includes *all* key fields
	
	WildChar  = 0;
	v17		  = 0;
	CurrFldNo = 0;
	Fld = ttab[TTno].TTfields;
	
	while ( Fld->FLDstat < 0 && FieldNo >= CurrFldNo )	// Can only build expression using Key fields
	{
		v19 = 0;
		if ( CurrFldNo == FieldNo )
		{
			if ( Fld->FLDtype == 'C' )
				WildChar = SrchMode;
			else if ( SrchMode )	// Numeric type
				WildChar = '+';		// Only allow >= searches for numeric types ??  *CL4 ERROR?!?*
		}
		if ( !(Fld->FLDstat & fld_DATA_AVAIL) )	// field has data loaded at *fld->FLDdata
			rectott(TTno, CurrFldNo);

		if ( Fld->FLDtype == 'C' )
		{
			if ( !(Fld->FLDstat & fld_DATA_AVAIL))	// 0x10) )
				*(char*)Fld->FLDdata = 0;			// char pointer. set single byte to zero

			NumBytes = lenstr(Fld->FLDdata);
			if ( NumBytes == 1 )
				v19 = WildChar ? 1 : 0 ;
		}
		else
		{
			v21 = Fld->FLDstat & fld_DATA_AVAIL ? *(double*)Fld->FLDdata : 0.0;
			if ( WildChar && v21 == 0.0 )
				v19 = 1;
			else
				NumBytes = Fld->FLDlen;
		}

		if ( !v19 )		// v19 can only be true id SrchMode != 0
		{
			switch ( Fld->FLDtype )
			{
				case 'B':
				case 'I':
					v24 = (short)v21;
					Src = (char*)&v24;
					break;
				case 'D':
				case 'N':
					v22 = (int)v21;
					Src = (char*)&v22;
					break;
				case 'C':
					Src = Fld->FLDdata;
					NumBytes = lenstr(Fld->FLDdata);
					if ( NumBytes && WildChar )
					{
						last = Src[NumBytes - 1];
						if (last == '+' || last == '*' || last == '-') // look for, and 
							Src[--NumBytes] = 0;		// remove wildcard char from buffer
					}
					else if ( !WildChar )
					{
						if ( Fld->FLDlen <= NumBytes )
							NumBytes = Fld->FLDlen;
						else
							NumBytes++;	// allow room for \0 terminator?
					}
					break;
				default:
					Src = (char*)&v21;	// double
					break;
			}
		}
		if ( !v19 || FieldNo == 0x200 )	// if v19 was true, Src is uninitialised at this point. *CRASH*
		{
			xtodom(ExprData, NumBytes, Fld->TDFtype, Src);
			switch (WildChar)
			{
				case '+' :
					Operator = 0x30u;	// 0x30 == greater than or equal	'>='
					break;
				case '-' :
					Operator = 0x18u;	// 0x18 == less than or equal		'<='
					break;
				default:	// 0x00
					Operator = 0x10u;	// 0x10 == equal to					'='
					break;
			}
			v12 = newexpr(Fld->FLDelemID, Operator, ExprData, NumBytes);	// don't simplify. GCC opt error! 
			if ( v17 )
				v12 = newjunc(v17, 2, v12);	// 2 == AND of two expressions
			v17 = v12;
		}
		CurrFldNo++;
		Fld++;
	}
	return v17;
}

#endif
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
EXPR* bldexpr(int TTno, signed int a2, int a3)
d10 2
a11 2
	EXPR *v12;
	EXPR *v17;
d13 7
a19 14
	signed int v3;
	short v6;
	signed int v7;
	size_t v8;
	short Operator;
	char *Src;
	char v16;
	size_t NumBytes;
	signed int v19;
	int FieldNo;
	double v21;
	int v22;
	short v24;
	char ExprData[142];
d21 9
a29 1
	//printf("bldexpr(TDno: %d,a2 = %d, a3 = %d)\n" ,TTno,a2,a3);
a30 1
	v3 = a2;
d33 6
a38 5
	if ( a2 < 0 )			// delset() passes -1 in here
		v3 = 0x200u;		// special flag, see below
	v16 = 0;
	v17 = 0;
	FieldNo = 0;
d40 2
a41 1
	if ( Fld->FLDstat < 0 && v3 >= 0 )	// Can only build expression using Key fields
d43 2
a44 1
		while ( 1 )
d46 7
a52 15
			v19 = 0;
			if ( FieldNo == v3 )
			{
				if ( Fld->FLDtype == 'C' )
				{
					v16 = a3;
				}
				else
				{
					if ( a3 )
						v16 = '+';
				}
			}
			if ( !(Fld->FLDstat & fld_DATA_AVAIL) )	// field has data loaded at *fld->FLDdata
				rectott(TTno, FieldNo);
d54 4
a57 4
			if ( Fld->FLDtype == 'C' )
			{
				if ( !(Fld->FLDstat & fld_DATA_AVAIL))	// 0x10) )
					*(char*)Fld->FLDdata = 0;			// char pointer. set single byte to zero
d59 9
a67 9
				NumBytes = lenstr(Fld->FLDdata);
				if ( NumBytes == 1 )
				{
					v7 = 1;
					if ( !v16 )
						v7 = 0;
					v19 = v7;
				}
			}
d69 1
a69 16
			{	// Fld->FLDstat & 0x10  data available flag
				v21 = Fld->FLDstat & fld_DATA_AVAIL ? *(double*)Fld->FLDdata : 0.0;
				if ( v16 && v21 == 0.0 )
					v19 = 1;
				else
					NumBytes = Fld->FLDlen;
			}
			if ( !v19 )
				break;
			if ( v3 == 0x200 )
				goto LABEL_43;
LABEL_48:
      		FieldNo++;
			++Fld;
			if ( Fld->FLDstat >= 0 || FieldNo > v3 )
				return v17;
d71 2
a72 2
//--------------------------------------		
		switch ( Fld->FLDtype )
d74 22
a95 17
			case 'B':
			case 'I':
				v24 = (short)v21;
				Src = (char*)&v24;
				break;
			case 'D':
			case 'N':
				v22 = (int)v21;
				Src = (char*)&v22;
				break;
			case 'C':
				Src = Fld->FLDdata;
				v8 = lenstr(Fld->FLDdata);
				NumBytes = v8;
				if ( v8 )
				{
					if ( v16 )
d97 4
a100 5
						if ( (Src[v8 - 1] - 42) <= 1u || Src[v8 - 1] == '-' )
						{
							NumBytes = (v8 - 1);
							Src[NumBytes] = 0;
						}
d102 25
a126 12
				}
				if ( !v16 )
				{
					if ( Fld->FLDlen <= NumBytes )
						NumBytes = Fld->FLDlen;
					else
						NumBytes++;
				}
				break;
			default:
				Src = (char*)&v21;	// double
				break;
d128 2
a129 10
LABEL_43:
		xtodom(ExprData, NumBytes, Fld->TDFtype, Src);
		Operator = 0x30u;
		if ( v16 != 0x2Bu )
			Operator = 8 * (v16 == 0x2Du) + 0x10;		//-> 0x18 or 0x10
		v12 = newexpr(Fld->FLDelemID, Operator, ExprData, NumBytes);
		if ( v17 )
			v12 = newjunc(v17, 2, v12);
		v17 = v12;
		goto LABEL_48;
@
