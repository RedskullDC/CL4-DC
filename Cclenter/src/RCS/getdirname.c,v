head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2016.06.21.06.52.41;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2016.05.09.03.43.43;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2016.01.14.00.35.55;	author leslie;	state Exp;
branches;
next	;


desc
@initial
@


1.3
log
@move to common code
@
text
@#ifndef GETDIRNAME_C
#define GETDIRNAME_C

#include <sys/types.h>
#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <pwd.h>
#include "DBdefs.h"
#include "cl4.h"

char	*myuser_0;		// not public in libcl4

char	*getdirname(char *a1)
{
	struct passwd *v3;
	char *v1;
	char *v2;
	char *result;
	char *i;
	char *v7;
	char *v8;
	char *ptr;
	char v10;
	
	//printf("getdirname(%s)\n",a1);
	if ( *a1 == '~' )					// shortcut for current user home dir
	{
		v1 = a1 + 1;
		v2 = a1 + 1;
		while ( *v1 && *v1 != '/' )
			++v1;

		v10 = *v1;
		*v1 = 0;
		if ( !*v2 )
		{
			if ( !myuser_0 )
				myuser_0 = gelogin();
			v2 = myuser_0;
		}
		v3 = getpwnam(v2);
		if ( v3 )
		{
			*v1 = v10;
			result = mstrcpy(v3->pw_dir, v1, 0);
		}
		else
			result = mstrcpy("", 0);
	}
	else if ( *a1 == '$' )				// system variable as pointer
	{
		ptr = mstrcpy(a1, 0);
		if ( *ptr == '$' )
		{
			while ( 1 )
			{
				for ( i = ptr + 1; *i && *i != '/'; ++i )
					;
				v10 = *i;
				*i = 0;
				v7 = getevar(ptr + 1);
				*i = v10;
				result = a1;
				if ( !v7 )
					break;
				v8 = mstrcpy(v7, i, 0);
				mfree_0(ptr);
				ptr = v8;
				if ( *v8 != '$' )
					goto LABEL_21;
			}
		}
		else
		{
LABEL_21:
			result = ptr;
		}
	}
	else
		result = a1;	// just return to caller

	//printf("getdirname(%s) = %s\n",a1, result);
	return result;
}


#endif
@


1.2
log
@intermediate
@
text
@d25 2
a26 2
	printf("getdirname(%s)\n",a1);
	if ( *a1 == '~' )
d45 1
a45 1
			result = mstrcpy(v3->pw_dir, v1);
d50 1
a50 1
	else if ( *a1 == '$' )
d66 1
a66 1
				v8 = mstrcpy(v7, i);
d81 2
@


1.1
log
@Initial revision
@
text
@d15 11
a25 11
	char *v1; // edi@@2
	char *v2; // eax@@2
	struct passwd *v3; // eax@@10
	char *result; // eax@@11
	char *i; // esi@@15
	char v6; // ST1B_1@@19
	char *v7; // edx@@19
	char *v8; // esi@@20
	char *ptr; // [sp+14h] [bp-14h]@@14
	char v10; // [sp+1Bh] [bp-Dh]@@6

d59 1
a59 1
				v6 = *i;
d62 1
a62 1
				*i = v6;
@
