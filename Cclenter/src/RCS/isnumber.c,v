head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2016.08.16.05.39.30;	author leslie;	state Exp;
branches;
next	;


desc
@initial version
@


1.1
log
@Initial revision
@
text
@#ifndef CLISNUMBER_C
#define CLISNUMBER_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

// if not a number, returns the offending character.

char clisnumber(char *a1)
{
    char	*v1;
	char	*i;
	char	*v3;
	int		radix_chars;
	char	v4;
	
    v1 = a1;
    radix_chars = 0;
	// remove blank spaces, or commas (or language specific thousands separator char)
    for ( i = a1; *i; ++i )
    {
        while ( *i == THOU_SEP[0] || *i == ' ' )
        {
            v3 = i;
            if ( *i )
            {
                do
                {
                    v4 = v3[1];
                    *v3++ = v4;
                }
                while ( v4 );
            }
        }
    }

	// See if string has a sign character, or if it begins with '.' (or lang specific radix)
    if ( *a1 == '+' || *a1 == '-' || *a1 == RADIX_CHAR[0] )
    {
        v1 = a1 + 1;	// skip past sign/radix char
        if ( *a1 == RADIX_CHAR[0] )		// normally a decimal point
            radix_chars = 1;
    }

    while ( *v1 )
    {
        if ( *v1 == RADIX_CHAR[0] )
            goto LABEL_24;
        if ( !(isdigit(*v1)) )
            return *v1;
        if ( *v1 == RADIX_CHAR[0] )
        {
LABEL_24:
            if ( ++radix_chars > 1 )	// more than 1 radix char is bad!
                return *v1;
        }
        ++v1;
    }
    return *v1;
}

#endif
@
