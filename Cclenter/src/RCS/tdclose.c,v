head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.11.24.01.14.43;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef TDCLOSE_C
#define TDCLOSE_C

#include <stdio.h>
#include <assert.h>		// for assert() naturlich!
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include "DBdefs.h"
#include "cl4.h"

void tdclose(int TTno)
{
	TDesc *TTptr;
	FLDdesc *FLDptr;
	Qlen *v3;
	Qlen *v4;
	int v5;

	TTptr = &ttab[TTno];
	FLDptr = TTptr->TTfields;
	if ( FLDptr )
	{
		if ( TTptr->TTrtd == -1 )
			__assert_fail("tt->runtd != -1", "closedb.c", 0x5Fu, "tdclose");
		for ( ; FLDptr->FLDelemID; ++FLDptr )
		{
			if ( FLDptr->FLDdata )
				mfree_0(FLDptr->FLDdata);
			if ( FLDptr->FLDname )
				mfree_0(FLDptr->FLDname);
			if ( FLDptr->FLDqlen )
			{
				v3 = FLDptr->FLDqlen;
				if ( v3->QfieldHd )
					mfree_0(v3->QfieldHd);
				v4 = FLDptr->FLDqlen;
				if ( v4->Qdata )
					mfree_0(v4->Qdata);
				mfree_0(FLDptr->FLDqlen);
			}
		}
		if ( TTptr->TTfields )
			TTptr->TTfields = mfree_0(TTptr->TTfields);
	}
  
	if ( TTptr->TDworkarea1 )
		TTptr->TDworkarea1 = mfree_0(TTptr->TDworkarea1);
	if ( TTptr->TDworkarea2 )
		TTptr->TDworkarea2 = mfree_0(TTptr->TDworkarea2);
//=========================================
	// libcl4  functionality
	if ( TTptr->TTselect )
		TTptr->TTselect = (EXPR*)fretre(TTptr->TTselect, 0);
	// clenter functionality 
	//TTptr->TTfields = 0;            // possible memory leak here ??......
//=========================================
	TTptr->NumFields = 0;
	TTptr->TableAlias[0] = 0;
	TTptr->TableName[0] = 0;
	if ( TTptr->TTrtd != -1 )
	{
		v5 = release(TTptr->TTrtd);
		if ( v5 < 0 )
			dberror(v5, 0, TTptr->TTrtd);
	}
	TTptr->TTrtd = -1;
}

#endif

@
