head	1.7;
access;
symbols;
locks
	leslie:1.7; strict;
comment	@ * @;


1.7
date	2020.01.25.14.51.34;	author leslie;	state Exp;
branches;
next	1.6;

1.6
date	2015.11.05.05.26.03;	author leslie;	state Exp;
branches;
next	1.5;

1.5
date	2015.08.23.12.07.17;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2015.07.16.14.17.21;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2014.12.10.12.00.43;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.27.06.16.03;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.21.03.09.18;	author leslie;	state Exp;
branches;
next	;


desc
@initital checkin
@


1.7
log
@prior to 64 bit stuff
@
text
@#ifndef FILE_OPS_C
#define FILE_OPS_C

#include <stdio.h>
#include <assert.h>		// for assert() naturlich!
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include <sys/wait.h>	// for pclose() wait calls
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

int _write(FCB *fcb, PRTAB *prtb)
{
    FILE	*op_save;
    short	pr_save;
    short	rtncode;

    if ( fcb->WR_FILE )
    {
        op_save	= op;				// save values
        pr_save	= pr_out;

		op		= fcb->WR_FILE;		// temp direct output to FILE*
        pr_out	= 0;
        
		rtncode	= prfield(prtb);
		if ( bp_flag )				// indicates that a broken pipe interrupt has occured
        {
            bp_flag = false;		// reset interrupt flag
            rtncode	= 28;
        }

		op		= op_save;			// restore old vals
        pr_out	= pr_save;
        if ( rtncode == 0x2000 )	// not an error, _prfield() indicates to close file
        {
            fclose(fcb->WR_FILE);
            fcb->WR_FILE	= 0;
            fcb->field_C	= 0;
            fcb->cmd_flags	&= 0xFFFDu;		// 1111-1111-1111-1101
            rtncode			= 0;
        }
        return rtncode;				// exit_success
    }
    else
        return 23;					// error_exit - no Write FILE*
}

int _read(FCB *fcb, PRTAB *prtb)
{
    FLDdesc *fld;
	PRTAB	*v10;
	char	*a1;
	
	short	FLDno;
	short	FLDlen;
	int		ErrVal;
	FLDdesc fld2;
    char	Buffer[16384];

    Buffer[0] = 0;
    if ( fcb->RD_FILE )			// FILE* for reading
		ErrVal = (fgets(Buffer, 16384, fcb->RD_FILE) == 0) ? 26 : 0 ;	// 0 means read OK, 26 == read error
    else
        ErrVal = 22;			// no read FILE*

    a1 = Buffer;
    while ( prtb )
    {
        fld = getftf(ENARR(prtb->VAR_ENTno), 0, &fld2);
        if ( fld->FLDstat & fld_ARRAY)			// Read *all* subscripts of an entire Array	0x0002			
		{
			if ( fld->FLDtype == 'C' )
				FLDlen = fld->FLDlen + 1;		// allow for \0 string terminator
			else
				FLDlen = sizeof(double);
            
			fld->FLDdata = fld->FLDname;		// Array variables hang of FLDname.
			FLDno = 0;
			while ( fld->FLDelemID > FLDno )	// FLDelemID is size of array subscript.
			{
				a1 = buftott(a1, fld);
				FLDno++;
				fld->FLDdata = (char *)fld->FLDdata + FLDlen;
			}
        }
        else	// read a single variable
		{
			a1 = buftott(a1, fld);				// returns pointer past buffer for easy chaining!
        }
        v10 = PRARR(prtb->NextPR);
		prtb = v10;
	}
    return ErrVal;
}

int _pclose(FCB *fcb)							// Pipe close
{
	int		stat_loc;
    short	v1;
	__sighandler_t hnd2_sve;
	__sighandler_t hnd3_sve;
	
    stat_loc		= 0;
    if ( fcb->RD_FILE )
        fclose(fcb->RD_FILE);
    fcb->RD_FILE	= 0;
    fcb->field_8	= 0;
    
	if ( fcb->WR_FILE )
        fclose(fcb->WR_FILE);
    fcb->WR_FILE	= 0;
    fcb->field_C	= 0;
    fcb->cmd_flags	= 0;
    mfree_0(fcb->ALIAS);
    fcb->ALIAS		= 0;

    hnd2_sve = signal(SIGINT, SIG_IGN);		// save sig handlers, replace with ignore defaults
    hnd3_sve = signal(SIGQUIT, SIG_IGN);
    do
    {
        v1 = wait(&stat_loc);						// wait for the child fcb->child_PID to complete
    }
    while ( v1 != fcb->child_PID && v1 != -1 );	// v1 == 1 means parent received a signal
    
	signal(SIGINT, hnd2_sve);							// restore saved handlers
    signal(SIGQUIT, hnd3_sve);

    //setvar(6, BYTE1(stat_loc));	// __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)
	setvar(v_EXIT,__WEXITSTATUS(stat_loc));		// "EXIT"

    return (unsigned char)stat_loc;	// Not quite sure which flags we are looking at here ..... ??
}
//
// If WIFEXITED(STATUS), the low-order 8 bits of the status.  */
// #define __WEXITSTATUS(status)   (((status) & 0xff00) >> 8)

// * If WIFSIGNALED(STATUS), the terminating signal.  */
// #define __WTERMSIG(status)      ((status) & 0x7f)

int _popen(SFTAB *sftab)	// Pipe open
{
    FCB		*fcb;
	char	**v13;
	
    int		v11;
	int		MaxLen;
	int		fd2[2];
	int		fd[2];
	
    short	pno;
    short	cmd_bits;
	
    char	Aliasname[128];
	char	a1[8192];
	char	FileName[8192];
	
	exptobuf(FileName, ENARR(sftab->FileNameEnt), 0);	// Expression number describing Filename

    if ( !FileName[0] )
        return 21;
    cdbcpystr(a1, FileName, 0);		// need a second copy in allocated mem space as passed externally!
    
    exptobuf(Aliasname, ENARR(sftab->AliasEnt), 0);	// Expression number describing Aliasname

	MaxLen = (signed short)(lenstr(Aliasname) + 1);

    fcb = _files;
    pno = 0;
    if ( no_files <= 0 || !_files->cmd_flags )
    {
LABEL_13:
        if ( no_files == pno )
        {
            newfile();
			assert(pno < no_files);			// couldn't allocate mem for a new FCB
            fcb = &_files[pno];
        }
        
		cmd_bits = sftab->cmd_flags;		// command flag bits
        if ( cmd_bits & 0x01 && ( pipe(fd) < 0) || cmd_bits & 0x02 && ( pipe(fd2) < 0) )
            return 21;	// error_exit
        
		fflush(stdout);
        fflush(stderr);
        
        fcb->child_PID = fork();
        if ( !fcb->child_PID )				//  == 0 is the child process, parent process continues below
        {
            if ( cmd_bits & 0x01 )
            {
                close(fd[0]);
                close(1);
                dup(fd[1]);
                close(fd[1]);
            }
            if ( cmd_bits & 0x02 )
            {
                close(fd2[1]);
                close(0);
                dup(fd2[0]);
                close(fd2[0]);
            }
            signal(SIGINT, SIG_DFL);		// why set to default prior to ignore???
            signal(SIGINT, SIG_IGN);
            signal(SIGQUIT, SIG_IGN);
            
			v11 = 3;						// not sure why it closes these file descriptors....?
            do
                close(v11++);
            while ( v11 <= 19 );

            if ( isalist(a1) )
            {
                execlp("/bin/sh", "sh", "-c", a1, 0);	// *** does not return on success ***
				syserror("pfile:execlp[%s]", a1);
            }
            else
            {
                v13 = camake(a1, 32);		// split on space chars
				execvp(*v13, v13);			// *** does not return on success ***
	            syserror("%s", *v13);
            }
            _exit(127);
        }
		else if ( fcb->child_PID == -1 )	// -1 == error in fork() above
		{
			return 21;						// error, we couldn't fork() for some reason!
		}
		else								// This is the parent process continuing if all was ok.
        {
            if ( cmd_bits & 0x01 )		
            {
                close(fd[1]);
                fcb->field_8	= fd[0];
                fcb->RD_FILE	= fdopen(fd[0], "r");
            }
            if ( cmd_bits & 0x02 )
            {
                close(fd2[0]);
                fcb->field_C	= fd2[1];
                fcb->WR_FILE	= fdopen(fd2[1], "w");
            }
            fcb->cmd_flags		= cmd_bits;
            fcb->ALIAS			= mstrcpy(Aliasname, 0);
            return 0;						// exit_success!
        }
    }
    while ( 1 )
    {
        if ( cmpbuf(fcb->ALIAS, Aliasname, MaxLen))
            return 27;	// file already open error - does nothing? (in real clenter too)
        pno++;
        fcb++;
        if ( no_files <= pno || !fcb->cmd_flags )
            goto LABEL_13;
    }
}


int _fclose(FCB *fcb)
{
    int ErrVal;
	FILE *ReadFile;
	FILE *WriteFile;
	
    ErrVal = 0;
    ReadFile = fcb->RD_FILE;                         // read FILE*
    if ( ReadFile != stdin )
    {
        WriteFile = fcb->WR_FILE;                     // write FILE*
        if ( WriteFile != stdout && WriteFile != stderr )
        {
			if ( ReadFile && fclose(ReadFile) < 0)		// Read takes precedence over WriteFile?
				ErrVal = 24;
			else if ( WriteFile && fclose(WriteFile) < 0)
				ErrVal = 24;
			else if (!WriteFile && !ReadFile)	// error, couldn't close one of the files properly!
				ErrVal = 25;
        }
    }
    fcb->RD_FILE	= 0;
    fcb->WR_FILE	= 0;
    fcb->cmd_flags	= 0;
    mfree_0(fcb->ALIAS);	// free alias name memory
    fcb->ALIAS		= 0;
    return ErrVal;
}

int _fopen(SFTAB *sftb)
{
    FCB		*fcb;
	FILE	*v11;
	short	fno;
	short	cmd_bits;
	short	v9;
	short	MaxLen;
	char	Alias[128];
	char	FileName[1024];
	
    exptobuf(FileName, ENARR(sftb->FileNameEnt), 0);	// Expression number describing filename
    exptobuf(Alias, ENARR(sftb->AliasEnt), 0);			// Expression number describing Aliasname


	MaxLen	= lenstr(Alias) + 1;
    fcb		= _files;
    fno		= 0;
    if ( no_files <= 0 || !fcb->cmd_flags )
    {
LABEL_12:
        if ( no_files == fno )
        {
            newfile();
			assert(fno < no_files);	// couldn't allocate mem for a new FCB
            fcb = &_files[fno];
        }

		cmd_bits = sftb->cmd_flags;		// command flag bits
        if ( cmd_bits & 1 )	// read mode
        {
            if ( (unsigned short)getresf(FileName) )
            {
                v11 = fopen64(FileName, "r");
                if ( !v11 )
                    return 21;		// error, couldn't open file
            }
            else
                v11 = stdin;
			fcb->RD_FILE = v11;
        }
        else if ( cmd_bits & 6 )	// 0x04 write/ 0x02 append mode
		{
			v9 = getresf(FileName);
			if ( v9 == 1 )
			    v11 = stdout;
			else if ( v9 == 2 )
			    v11 = stderr;
			else if ( !(cmd_bits & 4) || (v11 = fopen64(FileName, "a")) == 0 )	// Append trumps write?
			{
				if ( !(cmd_bits & 2) || (v11 = fopen64(FileName, "w")) == 0 )
					return 21;
			}
			fcb->WR_FILE = v11;
		}
		else
			return 21;					// error_exit
		
		fcb->cmd_flags = cmd_bits;				// copy sftab flag bits to the fcb structure
		fcb->ALIAS = mstrcpy(Alias, 0);
		return 0;						// exit_success
    }
    while ( 1 )
    {
        if ( cmpbuf(Alias, fcb->ALIAS, MaxLen) )
			return 27;			// file already open error - does nothing? (in real clenter too)
        fno++;
        fcb++;
        if ( no_files <= fno || !fcb->cmd_flags )
            goto LABEL_12;
    }
}

int getresf(char *FileName)
{
	if (cmpbuf(FileName, "stdin", 6))
		return 0;
	else if (cmpbuf(FileName, "stdout", 7))
		return 1;
	else if (cmpbuf(FileName, "stderr", 7))
		return 2;
	else
		return -1;	// not a reserved name
}

void newfile(void)
{
    int v0;

    v0 = no_files++;
    _files = (FCB *)mrealloc(_files, sizeof(FCB) * v0, sizeof(FCB) * no_files);	// sizeof(FCB) == 28
}

FCB *getfp(short AliasEntNo)
{
    FCB		*fcb;
	short	fno;
	short	MaxLen;
	char	AliasStr[256];
	
    exptobuf(AliasStr, ENARR(AliasEntNo), 0);

    MaxLen	= lenstr(AliasStr) + 1;
    fcb		= _files;
    fno		= 0;
	while ( fno < no_files )		// ** global no_files **
    {
		if ( fcb->cmd_flags && cmpbuf(AliasStr, fcb->ALIAS, MaxLen) )
			break;
		fno++;
        fcb++;
    }

    if ( no_files == fno ) // reached end of list with no match
        return 0;		// not found
    else
        return fcb;		// exit_success
}

void _closefp(short cmd_mask)
{
    FCB *fcb; // esi@@1
    short fileno; // di@@1

    fcb = _files;
    fileno = 0;

    while ( no_files > fileno )
	{
		if ( fcb->ALIAS && (cmd_mask == fcb->cmd_flags || !cmd_mask) )
		{
			if ( cmd_mask & 0x40 )	// pipe
				_pclose(fcb);
			else
				_fclose(fcb);
		}
		fileno++;
		fcb++;
	}
}

void closefp(void)		// called by main() on exit
{
    _closefp(0x41u);	// close all read-only pipes
    _closefp(0x42u);	// close all write-only pipes
    _closefp(0x43u);	// close all read/write pipes
    _closefp(0);		// close all other open files
}


void pfile(SFTAB *sftab)
{
    FCB *fcb;
	short cmd_bits;
	int ErrVal;
	
    if ( no_files < 0 )			// initialised to -1
    {
        _files = (FCB *)mmalloc(0);
        no_files = 0;
    }

    cmd_bits = sftab->cmd_flags;	// command flag bits

    if ( cmd_bits & 0x10 )			// open command
    {
        if ( cmd_bits & 0x40 )		// true if a pipe
            ErrVal = _popen(sftab);
        else
			ErrVal = _fopen(sftab);
    }
	else if ( cmd_bits & 0x20 )		// close 'tables' command
        ErrVal = closedb(0);		// *** closes databases, not FCB's ***
	else
	{
		fcb = getfp(sftab->AliasEnt);
		ErrVal = 25;
		if ( fcb )
		{
			if ( cmd_bits & 8 )		// 8 = close
			{
			    if ( fcb->cmd_flags & 0x40 )		// true if a pipe
			        ErrVal = _pclose(fcb);
			    else
					ErrVal = _fclose(fcb);
			}
			else if ( cmd_bits & 1 )	// 1 = read
			    ErrVal = _read(fcb, PRARR(sftab->PRTno));		// PRTAB no. describing variable to be read/written

			else if ( cmd_bits & 6 )	// 2 = write, 4 = append
				ErrVal = _write(fcb, PRARR(sftab->PRTno));		// PRTAB no. describing variable to be read/written

			else
				ErrVal = 29;	// invalid command bits?
		}
	}
    setvar(v_ERROR, ErrVal);                          // "ERROR" 1
}

#endif
@


1.6
log
@intermediate
@
text
@d15 3
a17 4
    int ErrVal; // eax@@2
    short pr_save; // di@@3
    short v4; // edx@@3
    FILE *op_save; // [sp+8h] [bp-10h]@@3
d21 8
a28 7
        op_save = op;
        pr_save = pr_out;
        op = fcb->WR_FILE;
        pr_out = 0;
        v4 = prfield(prtb);
//printf("_write v4 = x%04X\n",(unsigned short)v4);
        if ( bp_flag )
d30 2
a31 2
            bp_flag = 0;
            v4 = 28;
d33 4
a36 3
        op = op_save;
        pr_out = pr_save;
        if ( v4 == 0x2000 )
a37 1
//printf("_write #36 v4 = x%04X\n",(unsigned short)v4);
d39 4
a42 4
            fcb->WR_FILE = 0;
            fcb->field_C = 0;
            fcb->cmd_flags &= 0xFFFDu;	// 1111-1111-1111-1101
            v4 = 0;
d44 1
a44 1
        ErrVal = v4;
d47 1
a47 4
    {
        ErrVal = 23;
    }
    return ErrVal;
d52 9
a60 9
    FLDdesc *fld; // eax@@10
    PRTAB *v10; // eax@@22
    char *a1; // [sp+14h] [bp-4064h]@@6

	short FLDno; // di@@14
    short FLDlen; // [sp+18h] [bp-4060h]@@12
    int ErrVal; // [sp+1Ch] [bp-405Ch]@@2
    FLDdesc fld2; // [sp+40h] [bp-4038h]@@10
    char Buffer[16384]; // [sp+60h] [bp-4018h]@@1
d63 2
a64 2
    if ( fcb->RD_FILE )	// FILE* for reading
		ErrVal = (fgets(Buffer, 16384, fcb->RD_FILE) == 0) ? 26 : 0 ;	// 0 means read OK
d66 1
a66 1
        ErrVal = 22;
a67 1
//---------------
d72 1
a72 1
        if ( fld->FLDstat & fld_ARRAY)	// 0x0002u )			// Read *all* subscripts of an entire Array
d77 1
a77 1
				FLDlen = sizeof(double);		//8;
d81 1
a81 1
			while ( fld->FLDelemID > FLDno );	// FLDelemID is size of array subscript.
d90 1
a90 1
			a1 = buftott(a1, fld);
d98 1
a98 1
int _pclose(FCB *stream)
d100 2
a101 1
    short v1;
a103 1
	int stat_loc;
d105 5
a109 5
    stat_loc = 0;
    if ( stream->RD_FILE )
        fclose(stream->RD_FILE);
    stream->RD_FILE = 0;
    stream->field_8 = 0;
d111 7
a117 7
	if ( stream->WR_FILE )
        fclose(stream->WR_FILE);
    stream->WR_FILE = 0;
    stream->field_C = 0;
    stream->cmd_flags = 0;
    mfree_0(stream->ALIAS);
    stream->ALIAS = 0;
d123 1
a123 1
        v1 = wait(&stat_loc);						// wait for the child stream->child_PID to complete
d125 1
a125 1
    while ( v1 != stream->child_PID && v1 != -1 );	// v1 == 1 means parent received a signal
d142 1
a142 1
int _popen(SFTAB *sftab)
d144 14
a157 10
    FCB		*fcb; // esi@@8
    char	**v13; // esi@@30

    signed int v11; // esi@@26
    int MaxLen; // [sp+2Ch] [bp-40ACh]@@8
    int fd2[2]; // [sp+30h] [bp-40A8h]@@20
    int fd[2]; // [sp+38h] [bp-40A0h]@@18

    short pno;		// pipe number?
    short cmd_bits;
d159 1
a159 5
    char v21[128]; // [sp+40h] [bp-4098h]@@8
    char a1[8192]; // [sp+C0h] [bp-4018h]@@5
    char s[8192]; // [sp+20C0h] [bp-2018h]@@4

	exptobuf(s, ENARR(sftab->FileNameEnt), 0);	// Expression number describing Filename
d161 1
a161 1
    if ( !s[0] )
d163 1
a163 1
    cdbcpystr(a1, s, 0);	// not sure why we need a second copy?
d165 1
a165 1
    exptobuf(v21, ENARR(sftab->AliasEnt), 0);	// Expression number describing Aliasname
d167 1
a167 1
	MaxLen = (signed short)(lenstr(v21) + 1);
d177 1
a177 1
			assert(pno < no_files);	// couldn't allocate mem for a new FCB
d189 1
a189 1
        if ( !fcb->child_PID )					//  == 0 is the child process, parent process continues below
d205 1
a205 1
            signal(SIGINT, SIG_DFL);	// why set to default prior to ignore???
d209 1
a209 1
			v11 = 3;			// not sure why it closes these file descriptors....?
d236 2
a237 2
                fcb->field_8 = fd[0];
                fcb->RD_FILE = fdopen(fd[0], "r");
d242 2
a243 2
                fcb->field_C = fd2[1];
                fcb->WR_FILE = fdopen(fd2[1], "w");
d245 2
a246 2
            fcb->cmd_flags = cmd_bits;
            fcb->ALIAS = mstrcpy(v21, 0);
d252 1
a252 1
        if ( cmpbuf(fcb->ALIAS, v21, MaxLen))
d283 3
a285 3
    fcb->RD_FILE = 0;
    fcb->WR_FILE = 0;
    fcb->cmd_flags = 0;
d287 1
a287 1
    fcb->ALIAS = 0;
d293 8
a300 8
    FCB *fcb;
	FILE *v11;
	short fno;
	short cmd_bits;
	short v9;
	short MaxLen;
	char Alias[128];
	char FileName[1024];
d306 3
a308 3
	MaxLen = lenstr(Alias) + 1;
    fcb = _files;
    fno = 0;
d378 1
a378 1
    int v0; // ecx@@1
d386 4
a389 4
    FCB *fcb;
	short fno;
	short MaxLen;
	char AliasStr[256];
d393 4
a396 4
    MaxLen = lenstr(AliasStr) + 1;
    fcb = _files;
    fno = 0;
	while ( no_files > fno )
d400 2
a401 2
		++fno;
        ++fcb;
d405 1
a405 1
        return 0;	// not found
d407 1
a407 1
        return fcb;	// exit_success
d481 1
a481 1
				ErrVal = _write(fcb, PRARR(sftab->PRTno));	// PRTAB no. describing variable to be read/written
@


1.5
log
@intermediate
@
text
@d41 1
a41 1
            fcb->field_0 &= 0xFFFDu;
d104 5
a108 7
    short v1; // ax@@6
	__sighandler_t v3; // [sp+Ch] [bp-1Ch]@@5

    void (*handler)(int); // [sp+10h] [bp-18h]@@5
    int stat_loc; // [sp+14h] [bp-14h]@@1
    int *v6; // [sp+18h] [bp-10h]@@6

d114 2
a115 1
    if ( stream->WR_FILE )
d119 1
a119 1
    stream->field_0 = 0;
d123 2
a124 2
    handler = signal(2, (__sighandler_t)1);
    v3 = signal(3, (__sighandler_t)1);
d127 1
a127 2
        v6 = &stat_loc;
        v1 = wait(&stat_loc);
d129 5
a133 3
    while ( v1 != stream->field_4 && v1 != -1 );
    signal(2, handler);
    signal(3, v3);
d135 1
a135 1
	setvar(6,__WEXITSTATUS(stat_loc));
d148 3
a150 8
    FCB *fcb; // esi@@8
    short pno;				// pipe number?
    int v5; // eax@@10
    //int v6; // edx@@10
    short v7; // di@@17
    int v8; // eax@@18
    int v9; // eax@@20
    __pid_t v10; // eax@@21
a151 3
    char *v12; // eax@@29
    char **v13; // esi@@30
    char *v15; // [sp+4h] [bp-40D4h]@@29
d153 6
a158 4
    int v17; // [sp+30h] [bp-40A8h]@@20
    int v18; // [sp+34h] [bp-40A4h]@@25
    int fd; // [sp+38h] [bp-40A0h]@@18
    int v20; // [sp+3Ch] [bp-409Ch]@@23
d163 1
a163 1
	exptobuf(s, ENARR(sftab->field_6), 0);
d167 1
a167 1
    cdbcpystr(a1, s, 0);
d169 1
a169 1
    exptobuf(v21, ENARR(sftab->field_4), 0);
d175 1
a175 1
    if ( no_files <= 0 || !_files->field_0 )
d184 3
a186 2
        v7 = sftab->field_0;
        if ( v7 & 1 && (v8 = pipe(&fd), v8 < 0) || v7 & 2 && (v9 = pipe(&v17), v9 < 0) )
d192 2
a193 3
		v10 = fork();
        fcb->field_4 = v10;
        if ( !v10 )
d195 1
a195 1
            if ( v7 & 1 )
d197 1
a197 1
                close(fd);
d199 2
a200 2
                dup(v20);
                close(v20);
d202 1
a202 1
            if ( v7 & 2 )
d204 1
a204 1
                close(v18);
d206 2
a207 2
                dup(v17);
                close(v17);
d209 5
a213 4
            signal(2, 0);
            signal(2, (__sighandler_t)1);
            signal(3, (__sighandler_t)1);
            v11 = 3;
d220 2
a221 3
                execlp("/bin/sh", "sh", "-c", a1, 0);
                v15 = a1;
                v12 = "pfile:execlp[%s]";
d225 3
a227 4
                //v13 = camake(a1, 32);		*************************************************
                execvp(*v13, v13);
                v15 = *v13;
                v12 = "%s";
a228 1
            syserror(v12, v15);
d231 5
a235 1
        if ( fcb->field_4 != -1 )
d237 1
a237 1
            if ( v7 & 1 )
d239 3
a241 3
                close(v20);
                fcb->field_8 = fd;
                fcb->RD_FILE = fdopen(fd, "r");
d243 1
a243 1
            if ( v7 & 2 )
d245 3
a247 3
                close(v17);
                fcb->field_C = v18;
                fcb->WR_FILE = fdopen(v18, "w");
d249 1
a249 1
            fcb->field_0 = v7;
d251 1
a251 1
            return 0;
a252 1
        return 21;
d256 2
a257 3
        v5 = cmpbuf(fcb->ALIAS, v21, MaxLen);
        if ( v5 )
            return 27;
d260 1
a260 1
        if ( no_files <= pno || !fcb->field_0 )
d268 4
a271 4
    int ErrVal; // edi@@1
    FILE *ReadFile; // ecx@@1
    FILE *WriteFile; // edx@@2

a276 1
//printf("_fclose ReadFile = x%08X, WriteFile = x%08X \n",ReadFile,WriteFile);
d279 5
a283 11
			if ( ReadFile )	// takes precedence over WriteFile?
			{
				if (fclose(ReadFile) < 0)
					ErrVal = 24;
			}
			else if ( WriteFile )
			{
				if (fclose(WriteFile) < 0)
					ErrVal = 24;
			}
			else
d289 1
a289 1
    fcb->field_0 = 0;
d297 11
a307 12
    FCB *fcb; // edi@@7
    FILE *v11; // eax@@26
    short fno; // esi@@7
    int v5; // eax@@9
    short v7; // si@@16
    short v9; // dx@@22
    short MaxLen; // [sp+1Ch] [bp-209Ch]@@7
    char Alias[128]; // [sp+20h] [bp-2098h]@@7
    char FileName[1024]; // [sp+A0h] [bp-2018h]@@4

    exptobuf(FileName, ENARR(sftb->field_6), 0);
    exptobuf(Alias, ENARR(sftb->field_4), 0);
d313 1
a313 1
    if ( no_files <= 0 || !fcb->field_0 )
a321 2
        v7 = sftb->field_0;
//printf("_fopen fname = '%s', alias = '%s', v7 = %04X, fcb = x%08X\n",FileName,Alias, (unsigned short)v7, fcb);
d323 2
a324 1
        if ( v7 & 1 )	// read mode
d330 1
a330 1
                    return 21;	// error, couldn't open file
d336 1
a336 1
        else if ( v7 & 6 )	// 0x04 write/ 0x02 append mode
d343 1
a343 1
			else if ( !(v7 & 4) || (v11 = fopen64(FileName, "a")) == 0 )
d345 1
a345 1
				if ( !(v7 & 2) || (v11 = fopen64(FileName, "w")) == 0 )
d353 1
a353 1
		fcb->field_0 = v7;
d359 2
a360 3
        v5 = cmpbuf(Alias, fcb->ALIAS, MaxLen);
        if ( v5 )
			return 27;			// file already open error         
d363 1
a363 1
        if ( no_files <= fno || !fcb->field_0 )
d388 1
a388 1
FCB *getfp(short ENTno)
d390 6
a395 7
    FCB *fcb; // esi@@3
    FCB *result; // eax@@8
    short fno; // di@@3
    short MaxLen; // [sp+1Ch] [bp-9Ch]@@3
    char s[256]; // [sp+20h] [bp-98h]@@3

    exptobuf(s, ENARR(ENTno), 0);
d397 1
a397 1
    MaxLen = lenstr(s) + 1;
d402 1
a402 1
		if ( fcb->field_0 && cmpbuf(s, fcb->ALIAS, MaxLen) )
d407 1
d409 1
a409 1
        result = 0;
d411 1
a411 2
        result = fcb;
    return result;
d414 1
a414 1
void _closefp(int a1)
d416 2
a417 2
    FCB *v1; // esi@@1
    short v2; // di@@1
d419 4
a422 3
    v1 = _files;
    v2 = 0;
    while ( no_files > v2 )
d424 1
a424 1
		if ( v1->ALIAS && (a1 == v1->field_0 || !a1) )
d426 2
a427 2
			if ( a1 & 0x40 )
				_pclose(v1);
d429 1
a429 1
				_fclose(v1);
d431 2
a432 2
		++v2;
		++v1;
d436 1
a436 1
void closefp(void)
d438 4
a441 4
    _closefp(0x41u);
    _closefp(0x42u);
    _closefp(0x43u);
    _closefp(0);
d447 5
a451 7
    FCB *fcb; // eax@@9
    const char *v8; // [sp+4h] [bp-14h]@@0
    short v1; // ax@@3
    short v2; // ax@@5
    int ErrVal; // edx@@9

    if ( no_files < 0 )	// initlialised to -1
d457 3
a459 3
    v1 = sftab->field_0;
//printf("pfile no_files = %d, v1 = x%04X\n",no_files, (unsigned short)v1);
    if ( v1 & 0x10 )
d461 2
a462 2
        if ( v1 & 0x40 )
            ;	// v2 = _popen(sftab, v8);	*** Not yet supported!!! ***
d466 2
a467 2
	else if ( v1 & 0x20 )
        ErrVal = closedb(0);
d470 1
a470 1
		fcb = getfp(sftab->field_4);
d474 1
a474 1
			if ( v1 & 8 )
d476 2
a477 2
			    if ( fcb->field_0 & 0x40 )
			        ;	// v2 = _pclose(fcb);	*** Not yet supported!!! ***
d481 5
a485 2
			else if ( v1 & 1 )
			    ErrVal = _read(fcb, PRARR(sftab->field_2));
d488 1
a488 5
			{
				ErrVal = 29;
				if ( v1 & 6 )
				    ErrVal = _write(fcb, PRARR(sftab->field_2));
			}
@


1.4
log
@intermediate
@
text
@a385 16
    /*int v1; // eax@@1
    int v2; // edx@@1
    int v3; // eax@@2

    v1 = cmpbuf(FileName, "stdin", 6);
    v2 = 0;
    if ( !v1 )
    {
        v3 = cmpbuf(FileName, "stdout", 7);
        v2 = 1;
        if ( !v3 )
            v2 = 3 * (cmpbuf(FileName, "stderr", 7) != 0) - 1;
    }
    return v2;
	*/

d407 1
a408 1
    FCB *result; // eax@@8
d464 1
a467 1
    const char *v8; // [sp+4h] [bp-14h]@@0
@


1.3
log
@intermediate version
@
text
@d58 2
a59 2
    //char v2; // zf@@3
    short FLDno; // di@@14
a66 5
    {
        //v2 = fgets(Buffer, 16384, fcb->RD_FILE) == 0;
        //ErrVal = 0;
        //if ( v2 )
        //    ErrVal = 26;
a67 1
    }
a147 2
    //ENTAB *v1; // eax@@2
    //ENTAB *v2; // eax@@6
a186 2
            //if ( no_files <= pno )
            //    __assert_fail("pno < no_files", "pfile.c", 0x60u, "_popen");
a332 2
            //if ( no_files <= fno )
            //    __assert_fail("fno < no_files", "pfile.c", 0xF0u, "_fopen");
d345 1
a345 1
                    return 21;
a347 1
			{
a348 1
			}
d351 1
a351 1
        else if ( v7 & 6 )	// write/append mode
a365 1
		{
a366 1
		}
d386 1
a386 1
    int v1; // eax@@1
d400 10
@


1.2
log
@prior to ENARR() fixes
@
text
@d81 1
a81 1
        fld = getftf(prtb->VAR_ENTno ? &enarr.TableAddr[prtb->VAR_ENTno - 1] : 0, 0, &fld2);
d102 1
a102 1
        v10 = prtb->NextPR ? &prarr.TableAddr[prtb->NextPR - 1] : 0;
d177 1
a177 1
	exptobuf(s, sftab->field_6 ? &enarr.TableAddr[sftab->field_6 - 1] : 0, 0);
d183 1
a183 1
    exptobuf(v21, sftab->field_4 ? &enarr.TableAddr[sftab->field_4 - 1] : 0, 0);
d330 2
a331 2
    exptobuf(FileName, sftb->field_6 ? &enarr.TableAddr[sftb->field_6 - 1] : 0, 0);
    exptobuf(Alias, sftb->field_4 ? &enarr.TableAddr[sftb->field_4 - 1] : 0, 0);
d434 1
a434 1
    exptobuf(s, ENTno ? &enarr.TableAddr[ENTno - 1] : 0, 0);
d522 1
a522 1
			    ErrVal = _read(fcb, sftab->field_2 ? &prarr.TableAddr[sftab->field_2 - 1] : 0);
d528 1
a528 1
				    ErrVal = _write(fcb, sftab->field_2 ? &prarr.TableAddr[sftab->field_2 - 1] : 0);
@


1.1
log
@Initial revision
@
text
@d5 1
d20 1
a20 1
    if ( fcb->field_14 )
d24 1
a24 1
        op = fcb->field_14;
d27 1
d37 3
a39 2
            fclose(fcb->field_14);
            fcb->field_14 = 0;
d58 1
a58 1
    char v2; // zf@@3
a61 1
    //FLDdesc fld1; // [sp+20h] [bp-4058h]@@20
d66 1
a66 1
    if ( fcb->field_10 )	// FILE* for reading
d68 5
a72 4
        v2 = fgets(Buffer, 16384, fcb->field_10) == 0;
        ErrVal = 0;
        if ( v2 )
            ErrVal = 26;
d94 1
a94 1
				++FLDno;
a110 1
    //void (*v3)(int); // [sp+Ch] [bp-1Ch]@@5
d118 3
a120 3
    if ( stream->field_10 )
        fclose(stream->field_10);
    stream->field_10 = 0;
d122 3
a124 3
    if ( stream->field_14 )
        fclose(stream->field_14);
    stream->field_14 = 0;
d127 2
a128 2
    mfree_0(stream->field_18);
    stream->field_18 = 0;
d156 2
a157 2
    FCB *v3; // esi@@8
    int v4; // edi@@8
d159 1
a159 1
    int v6; // edx@@10
a176 7
	///if ( sftab->field_6 )
    ///    v1 = &enarr.TableAddr[sftab->field_6 - 1];
    ///else
    ///    v1 = 0;
	
	//v1 = sftab->field_6 ? &enarr.TableAddr[sftab->field_6 - 1] : 0;
	//exptobuf(s, v1, 0);
a182 6
	///if ( sftab->field_4 )
    ///    v2 = &enarr.TableAddr[sftab->field_4 - 1];
    ///else
    ///    v2 = 0;
	//v2 = sftab->field_4 ? &enarr.TableAddr[sftab->field_4 - 1] : 0;
    //exptobuf(v21, v2, 0);
d187 2
a188 2
    v3 = _files;
    v4 = 0;
d192 1
a192 1
        if ( no_files == (short)v4 )
d195 4
a198 3
            if ( no_files <= (signed short)v4 )
                __assert_fail("pno < no_files", "pfile.c", 0x60u, "_popen");
            v3 = &_files[v4];
d201 2
a202 2
        if ( v7 & 1 && (v8 = pipe(&fd), v6 = 21, v8 < 0) || v7 & 2 && (v9 = pipe(&v17), v6 = 21, v9 < 0) )
            return v6;
d208 1
a208 1
        v3->field_4 = v10;
d232 1
d249 1
a249 1
        if ( v3->field_4 != -1 )
d254 2
a255 2
                v3->field_8 = fd;
                v3->field_10 = fdopen(fd, "r");
d260 2
a261 2
                v3->field_C = v18;
                v3->field_14 = fdopen(v18, "w");
d263 2
a264 2
            v3->field_0 = v7;
            v3->field_18 = mstrcpy(v21, 0);
d271 1
a271 2
        v5 = cmpbuf(v3->field_18, v21, MaxLen);
        v6 = 27;
d273 4
a276 4
            return v6;
        v4 = (signed short)(v4 + 1);
        ++v3;
        if ( no_files <= (signed short)v4 || !v3->field_0 )
d285 2
a286 2
    struct _IO_FILE *ReadFile; // ecx@@1
    struct _IO_FILE *WriteFile; // edx@@2
d289 1
a289 1
    ReadFile = fcb->field_10;                         // read FILE*
d292 2
a293 1
        WriteFile = fcb->field_14;                     // write FILE*
d298 1
a298 1
				fclose(ReadFile) < 0;
d303 1
a303 1
				fclose(WriteFile) < 0;
d310 2
a311 2
    fcb->field_10 = 0;
    fcb->field_14 = 0;
d313 2
a314 2
    mfree_0(fcb->field_18);
    fcb->field_18 = 0;
d322 1
a322 1
    short FileNo; // esi@@7
d327 1
a327 1
    char v14[128]; // [sp+20h] [bp-2098h]@@7
d331 1
a331 1
    exptobuf(v14, sftb->field_4 ? &enarr.TableAddr[sftb->field_4 - 1] : 0, 0);
d333 2
a334 1
	MaxLen = lenstr(v14) + 1;
d336 1
a336 1
    FileNo = 0;
d340 1
a340 1
        if ( no_files == FileNo )
d343 4
a346 3
            if ( no_files <= (signed short)FileNo )
                __assert_fail("fno < no_files", "pfile.c", 0xF0u, "_fopen");
            fcb = &_files[FileNo];
d349 1
d360 1
d362 2
a363 5

			fcb->field_10 = v11;
            fcb->field_0 = v7;
            fcb->field_18 = mstrcpy(v14, 0);
            return 0;
d377 5
a381 4
			fcb->field_14 = v11;
			fcb->field_0 = v7;
			fcb->field_18 = mstrcpy(v14, 0);
			return 0;
d383 4
a386 1
        return 21;
d390 1
a390 1
        v5 = cmpbuf(v14, fcb->field_18, MaxLen);
d392 4
a395 4
            return 27;
        FileNo++;
        ++fcb;
        if ( no_files <= FileNo || !fcb->field_0 )
d423 1
a423 1
    _files = (FCB *)mrealloc(_files, 28 * v0, 28 * no_files);
d429 1
a429 1
    short v3; // di@@3
d438 2
a439 2
    v3 = 0;
	while ( no_files > v3 )
d441 1
a441 1
		if ( fcb->field_0 && cmpbuf(s, fcb->field_18, MaxLen) )
d443 1
a443 1
		++v3;
d446 1
a446 1
    if ( no_files == v3 ) // reached end of list with no match
d460 12
a471 16
    if ( no_files > 0 )
    {
        do
        {
            if ( v1->field_18 && (a1 == v1->field_0 || !a1) )
            {
                if ( a1 & 0x40 )
                    _pclose(v1);
                else
                    _fclose(v1);
            }
            ++v2;
            ++v1;
        }
        while ( no_files > v2 );
    }
d496 1
d498 1
a505 1
    
a507 1

@
