head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.08.27.12.31.05;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef FRESHNODE_C
#define FRESHNODE_C

#include "DBdefs.h"
#include "cl4.h"

NODE* freshnode(TDinfo *TDptr, short NodeType)
{
	int PageNo; // edi@@1
	NODE *Node; // eax@@3
	int v5; // ecx@@5

    printf("freshnode(TDptr: %08X, TDptr->field_0 : x%04X, NodeType: x%04X )\n",TDptr, TDptr->field_0, NodeType);
	
	PageNo = _capture(TDptr->TDDBinfo);	// Go get a free Page.
	if ( !PageNo )
		derror(42, 0, TDptr);
	
	Node = ealloc(40u, 0);
	Node->PageNo = PageNo;
	Node->NumEntries = 0;
	Node->field_8 = 0;
	Node->field_C = 0;
	
	if ( NodeType & 2 )
	{
		Node->DataEnd = 14;
		if ( (char)TDptr->field_0 >= 0 )
		{
			if ( TDptr->TDDBinfo->DBvflag != 2 )
				Node->DataEnd += 2;
			Node->PageType = 2;
			Node->field_16 = 8;
			v5 = TDptr->TDKeySize;
		}
		else
		{
			Node->PageType = 3;
			Node->field_16 = 8;
			v5 = 1;
		}
	}
	else
	{
		Node->DataEnd = 2;
		if ( TDptr->field_0 & 0x40 )
		{
			Node->PageType = 1;
			Node->field_16 = 2;
			v5 = TDptr->TDRecMin;
		}
		else
		{
			if ( TDptr->TDDBinfo->DBvflag != 2 )
				Node->DataEnd += 2;
			Node->PageType = 0;
			Node->field_16 = 0;
			v5 = TDptr->TDRecSize;
		}
	}	
	Node->RecsInPage = (TDptr->TDDBinfo->DBpgsize - Node->DataEnd) / (v5 + Node->field_16);
	Node->NODE1ptr = ealloc(8 * Node->RecsInPage, 0);
	Node->NODE2ptr = ealloc(4 * (Node->RecsInPage + 1), 0);
	return Node;
}

#endif
@
