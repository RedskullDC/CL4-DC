head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.08.26.01.13.15;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.06.13.13.55.32;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.14.03.54.32;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@clean-up
@
text
@#ifndef READPREV_C
#define READPREV_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include "DBdefs.h"
#include "cl4.h"

short rdprev(int TDno, EXPR *expr, int Lock, int a4)
{
    char *v4; // edi@@1
    int v5; // eax@@1
    short v7; // esi@@9
    int MaxLen; // [sp+14h] [bp-B4h]@@6
    int TDNo; // [sp+18h] [bp-B0h]@@1
    TDesc *TTptr; // [sp+1Ch] [bp-ACh]@@1
    char Src[1024]; // [sp+20h] [bp-A8h]@@6

//printf("rdprev(TDno = %d, EXPR = x%08X, Lock = %d, a4 = %d)\n",TDno,expr,Lock,a4);

    TTptr = &ttab[TDno];
    TDNo = rtdget(&ttab[TDno]);
    v4 = TTptr->TDworkarea1;
    ulckrec(TDno);
    v5 = 0;
    if ( a4 )
        v5 = 99;					// possible bug, will trash sub-recs if they are #99 in table
    rfree(TDno, v5);
    TTptr->TDlocked &= 0xFFDFu;
    if ( TTptr->TDlocked & 0x0200 )
        Lock = 0;
    
	while ((v7 = getprev(TDNo, v4, expr)) > 0)// (< 0) == ERROR, 0 = no data, (> 0) == success
    {
        if ( !Lock )				// Data found, if no lock requested, return to caller
		{
            rkfree(TDno);
            ravail(TDno);			// Set flags indicating data is in WorkArea buffer
            break;
		}
        
		MaxLen = keysize(TDNo);		// called with "lock" or "lockr"
        cpybuf(Src, v4, MaxLen);
        fix_buf(TDno, v4);

        while ((v7 = lgetr(TDNo, v4, 0)) == -10 && Lock != 1024)
            sleep(1u);	// Keep trying until record becomes free. Potential deadlock!

		//printf("rdprv 50 - v7 = %d, Lock = %d\n",v7,Lock);
		if ( !v7 )			// very difficult to get here. Means getnxt() found some data, but it disappeared  :o(
        {
			v7 = ulockr(TDNo, v4, 0);
			if ( v7 < 0 )
				dberror(v7, 0, TDNo);
		}
		else if (v7 < 0 && v7 != -10)
		{
			break;
		}
		else	// v7 > 0 == success or v7 = -10, record was locked but we used a lockr request
		{
			cpybuf(v4, Src, MaxLen);	// copy orginal key back (without case conversion)
			if ( v7 > 0 )
			{
				TTptr->TDlocked |= ttl_LOCK;	//0x0001u;
				cpybuf(TTptr->TDworkarea2, v4, TTptr->TDrecsize);
            }
            rkfree(TDno);
            ravail(TDno);
            break;
        }
    }
    if ( v7 < 0 && v7 != -10 )
        dberror(v7, 0, TDNo);
    return v7;
}

#endif

@


1.2
log
@intermediate
@
text
@a14 1
    short v8; // ax@@11
d39 1
a39 1
            ravail(TDno);			// Set flags indication data is in WorkArea buffer
d46 6
a51 1
        while ( 1 )
d53 15
a67 20
            v7 = lgetr(TDNo, v4, 0);
            if ( v7 != -10 || Lock == 1024)
                break;
            sleep(1u);
        }
        if ( v7 )
        {
            if ( v7 > 0 || v7 == -10 )
                cpybuf(v4, Src, MaxLen);
			
			if ( v7 <= 0 )
                goto LABEL_28;
            
			TTptr->TDlocked |= 0x0001u;
            cpybuf(TTptr->TDworkarea2, v4, TTptr->TDrecsize);
            if ( v7 <= 0 )	// not reachable due to test above
            {
LABEL_28:
                if ( v7 != -10 )
                    break;
a72 3
        v8 = ulockr(TDNo, v4, 0);
        if ( v8 < 0 )
            dberror(v8, 0, TDNo);
@


1.1
log
@Initial revision
@
text
@a13 1
    short v6; // ax@@9
a15 1
    short v9; // ax@@21
d29 1
a29 1
        v5 = 99;
d34 2
a35 1
    while ( 1 )
d37 4
a40 3
        v9 = getprev(TDNo, v4, expr);
        v7 = v9;
        if ( v9 <= 0 )
d42 3
a44 3
        if ( !Lock )
            goto LABEL_18;
        MaxLen = keysize(TDNo);
d49 2
a50 5
            v6 = lgetr(TDNo, v4, 0);
            v7 = v6;
            if ( v6 != -10 )
                break;
            if ( Lock == 1024 )
d54 1
a54 1
        if ( v6 )
d56 1
a56 1
            if ( v6 > 0 || v6 == -10 )
d58 2
a59 1
            if ( v7 <= 0 )
d61 2
a62 1
            TTptr->TDlocked |= 0x0001u;
d64 1
a64 2
LABEL_18:
            if ( v7 <= 0 )
@
