head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	2016.06.21.02.10.19;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2016.03.08.04.08.59;	author leslie;	state Exp;
branches;
next	;


desc
@initial
@


1.2
log
@change to common code
@
text
@#ifndef ALLOC_C
#define ALLOC_C

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>		// for var args stuff
#include <string.h>		// for void *memset(void *s, int c, size_t n);
#include "DBdefs.h"
#include "cl4.h"

void* alloc(unsigned int size, void* vector)
{
//	char *v3;
//	char *v4;
	char *buff;
	char s[80];
	
	if ( size < 4 )			// minimum size required to store vector
		size = 4;
	
	buff = malloc(size);
	if ( !buff )
	{
		sprintf(s, "out of heap (wanted %u bytes)", size);
		errexit(s, 0);
	}
	// DumpBlock(buff,size);
	//printf("**alloc - buff = %08X, size = %d, vector = %08X\n",buff,size,vector);

	memset(buff, 0, size);

	// ensure the memory block returned is alway long-word aligned. -> 0x...8 or 0x...0
	// Unnecessary. GNU Linux malloc() returns blocks aligned to longword addresses anyway.

//	v3 = buff;
//	if ( size > 7 && (int)buff & 4 )
//	{
//		*(int*)buff = 0;
//		v3 = buff + 4;
//		size -= 4;
//	}
//	
//	memset(v3, 0, 4 * (size >> 2));
//	
//	v4 = &v3[4 * (size >> 2)];
//	if ( size & 2 )
//	{
//		*(short*)v4 = 0;
//		v4 += 2;
//	}
//	if ( size & 1 )
//		*v4 = 0;
	
	*(int*)buff = (int)vector;	// init value
	return buff;
}

void* nalloc(unsigned int size, void* vector)
{
	char *buff;
//	char *v4;
//	char *v5;

	if ( size < 4 )			// minimum size required to store vector
		size = 4;
	
	buff = malloc(size);
	if ( buff )
	{
		//printf("nalloc - buff = %08X, size = %d, vector = %08X\n",buff,size,vector);
		memset(buff, 0, size);		// clears the allocated memory area to ZERO

		// ensure the memory block returned is alway long-word aligned. -> 0x...8 or 0x...0
		// Unnecessary. GNU Linux malloc() returns blocks aligned to longword addresses anyway.

//		v4 = buff;
//		if ( size > 7 && (int)buff & 4 )
//		{
//			*(int*)buff = 0;
//			v4 = buff + 4;
//			size -= 4;
//		}
//		
//		memset(v4, 0, 4 * (size >> 2));		// clears the allocated memory area to ZERO
//		
//		v5 = &v4[4 * (size >> 2)];
//		if ( size & 2 )
//		{
//			*(short*)v5 = 0;
//			v5 += 2;
//		}
//		if ( size & 1 )
//			*v5 = 0;
	
		*(int*)buff = (int)vector;
	}
	return buff;
}

void* nfree(void *ptr, void *vector)
{
  if ( ptr )
    free(ptr);
  return vector;
}

#endif
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
void* alloc(unsigned int BytesRequired,void* a2)
d13 3
a15 4
	unsigned int v2;
	char *v3;
	char *v4;
	char *v6;
d18 2
a19 3
	v2 = BytesRequired;
	if ( BytesRequired <= 4 )
		v2 = 4;
d21 2
a22 2
	v6 = malloc(v2);
	if ( !v6 )
d24 1
a24 1
		sprintf(s, "out of heap (wanted %u bytes)", v2);
d27 5
a31 1
	//DumpBlock(v6,BytesRequired);
d33 23
a55 19
	// Linux malloc() normally does that anyway?
	v3 = v6;
	if ( v2 > 7 && (int)v6 & 4 )
	{
		*(int*)v6 = 0;
		v3 = v6 + 4;
		v2 -= 4;
	}
	memset(v3, 0, 4 * (v2 >> 2));
	v4 = &v3[4 * (v2 >> 2)];
	if ( v2 & 2 )
	{
		*(short*)v4 = 0;
		v4 += 2;
	}
	if ( v2 & 1 )
		*v4 = 0;
	*(int*)v6 = (int)a2;	// init value
	return v6;
d58 1
a58 1
void* nalloc(unsigned int BytesRequired,void* Init)
d60 6
a65 9
	char *result;
	char *v4;
	char *v5;
	unsigned int v6;
	unsigned int v2;

	v2 = BytesRequired;
	if ( BytesRequired <= 4 )
		v2 = 4;
d67 2
a68 2
	result = malloc(v2);
	if ( result )
d70 24
a93 18
		v4 = result;
		v6 = v2;
		if ( v2 > 7 && (int)result & 4 )
		{
			*(int*)result = 0;
			v4 = result + 4;
			v6 = v2 - 4;
		}
		memset(v4, 0, 4 * (v6 >> 2));		// clears the allocated memory area to ZERO
		
		v5 = &v4[4 * (v6 >> 2)];
		if ( v6 & 2 )
		{
			*(short*)v5 = 0;
			v5 += 2;
		}
		if ( v6 & 1 )
			*v5 = 0;
d95 1
a95 1
		*(int*)result = (int)Init;
d97 1
a97 1
	return result;
d100 1
a100 1
void* nfree(void *ptr, void *a2)
d104 1
a104 1
  return a2;
@
