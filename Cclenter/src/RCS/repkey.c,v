head	1.1;
access;
symbols;
locks
	leslie:1.1; strict;
comment	@ * @;


1.1
date	2014.08.27.03.27.11;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.1
log
@Initial revision
@
text
@#ifndef REPKEY_C
#define REPKEY_C

#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

// cmprec *not* public in libcl4
signed int cmprec(int TTno, int TTno2)
{
	FLDdesc *fld; // esi@@1
	FLDdesc *fld2; // edi@@1
	size_t cmp_length; // eax@@8
	int result; // eax@@12
	TDesc *TTptr; // [sp+Ch] [bp-1Ch]@@1
	FLDdesc *v7; // [sp+10h] [bp-18h]@@3
	short FieldNo; // [sp+14h] [bp-14h]@@1
	signed int v9; // [sp+18h] [bp-10h]@@1

	//printf("cmprec(TTno = %d,TTno2 =  %d)\n" ,TTno, TTno2);

	v9 = 0;
	TTptr = &ttab[TTno2];
	fld = TTptr->TTfields;
	FieldNo = 0;
	fld2 = ttab[TTno].TTfields;
	if ( fld2->FLDelemID )
	{
		while ( !fld2->FLDlen )
		{
LABEL_19:
			++fld2;
			FieldNo++;
			if ( !fld2->FLDelemID )
				return 0;
		}
//-----------------------------------
		v7 = fld;
		while ( 1 )
		{
			if ( fld2->FLDelemID == fld->FLDelemID )
			{
				if ( !(fld2->FLDstat & fld_DATA_AVAIL))	// 0x10) )
					rectott(TTno, FieldNo);
				cmp_length = fld->FLDtype == 'C' ? fld->FLDlen : sizeof(double);	// 8;
				v9 = 1;
				if ( !cmpbuf((char *)fld->FLDdata, (char *)fld2->FLDdata, cmp_length) )
					break;
			}
			++fld;
			if ( !fld->FLDelemID )
				fld = TTptr->TTfields;
			if ( v9 || fld == v7 )
			{
				v9 = 0;
				goto LABEL_19;
			}
		}
//------------------------------------
		if ( fld2->FLDstat >= 0 )
			result = 2;
		else
			result = 1;
	}
	else
	{
		result = 0;
	}
	return result;
}


void repkey(int TDno, int NameSrch)
{
	TDesc *TTptr2; 
	TDesc *TTptr; 
	FLDdesc *fld; 

	char *v7; // eax@@11

	short v3; // ax@@1
	int FieldNo; // edi@@3
	int TDno2; // eax@@13
	int v10; // eax@@16
	int v14; // [sp+24h] [bp-14h]@@15
	int ErrorCode; // [sp+28h] [bp-10h]@@16

	//printf("repkey(TDno = %d, Namesrch = %d)\n" ,TDno, NameSrch);

	TTptr2 = &ttab[TDno];
	v3 = TTptr2->TDlocked;
	if ( v3 & 0x10 )
	{
		if ( v3 & 0x20 )
		{
			fld = TTptr2->TTfields;
			for ( FieldNo = 0; fld->FLDelemID; ++fld )
			{
				if ( fld->FLDlen && !(fld->FLDstat & fld_DATA_AVAIL))	// 0x0010) )
					rectott(TDno, FieldNo);	// make sure data is available in Fields. Copy from WorkArea if necessary
				++FieldNo;
			}
		}
//-------------------
		rdkey(TDno, NameSrch);
		for ( fld = TTptr2->TTfields; fld->FLDelemID; ++fld )
		{
			if ( fld->FLDtype == 'K' )	// Look for Key type sub-records
			{
				v7 = NameSrch ? fld->FLDname : fld->FLDdata;		// Search by Name/Data.  Not supported in libcl4
				//TDno2 = findtd(TTptr2->DBcontext, v7, TTptr2->DBnumber);	// libcl4.  No Context involved here, since our TD list is private.
				TDno2 = findtd(v7, TTptr2->DBnumber);
				if ( TDno2 >= 0 )
				{
					TTptr = &ttab[TDno2];
					if ( TTptr->TDlocked & 0x20 )
					{
						v14 = cmprec(TDno2, TDno);
						if ( v14 == 1 )
						{
							tttorec(TDno2, TTptr->TDworkarea1, 1);
							ErrorCode = cldelr(rtdget(TTptr), TTptr->TDworkarea1, 0, TTptr);
							if ( ErrorCode < 0 )
								dberror(ErrorCode, 0, rtdget(TTptr));
							TTptr->TDlocked &= 0xFFDEu;	// clear 0x0021 bits
						}
					}
					else
					{
						v14 = 2;
					}
					
					if ( v14 )
					{
						tdtotd(TDno2, TDno, 0, 2);
						reprec(TDno2, 0);
					}
					rfree(TDno2, 0);
				}
			}
		}
	}
}
#endif
@
