head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2016.08.16.06.10.09;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.15.15.00.11;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@tidy-up
@
text
@#ifndef LINPUT_FNS_C
#define LINPUT_FNS_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

int isDoubleWidth(unsigned char a1)
{
    int result = 0;
	//printf("isDoubleWidth(%d) = ",a1);

    if ( !isJapan || (signed int)a1 <= 160 || (signed int)a1 > 223 )
        result = (unsigned int)a1 >> 7;         // return the high bit

	//printf("%d\n",result);
    return result;
}

int curChineseChar(char *a1, char *a2)
{
	char	*i;
    int		v2;
	signed int v4;
	
    v2 = 0;
    for ( i = a1; i <= a2; ++i )
    {
        switch ( v2 )
        {
            case 0:
            case 1:
            case 4:
            case 8:
                v4 = (unsigned char)*i;
                if ( !isJapan || v4 <= 160 || (v2 = 8, v4 > 223) )
                    v2 = ((char)v4 < 0) + 1;
                break;
            case 2:
                v2 = 4;
                break;
            default:
                continue;
        }
    }
    return v2;
}

int isChinese(char *a1, char *a2)
{
    int		v2;
	int		v3 = 0;

    v2 = curChineseChar(a1, a2);
    if ( v2 == 2 || v2 == 4 || v2 == 8 )
        v3 = 1;
    return v3;
}

int gchar(void)
{
    int result; // eax@@5
	int	*errloc;

	errloc = (int*)__errno_location();

    *errloc = 0;
    while ( 1 )
    {
        result = Key_GetChar();
        if ( result != -1 )
            break;
        if ( *errloc != 4 )	//	#define EINTR 4  /* Interrupted system call */
        {
            alarm(1u);
            while ( 1 )     // Nasty deadlock loop while waiting for SIGALARM!
                ;
        }
    }
    return result;
}

int linput(char *Buffer, int MaxLen, ONESC *a2)
{
    //int result; // eax@@2

    /*if ( *_YL == 'T' )
    {
        result = linputThai(Buffer, MaxLen, a2);
    }
    else
    {
        if ( *_YL == 'J' || *_YL == 'j' )
            isJapan = 1;
        result = linputChinese(Buffer, MaxLen, a2);
    }	*/

	//result = linputChinese(Buffer, MaxLen, a2);
    //return result;
	return linputChinese(Buffer, MaxLen, a2);

}

int strOffPaperLen(char *a1, int a2)
{
    //int result; // eax@@2

    //if ( (*__ctype_toupper_loc())[*YL] == 'T' )
    //    result = thaiStrOffPaperLen(a1, a2);
    //else
    //    result = a2;
    //return result;
	return a2;
}

int strOnPaperLen(char *a1)
{
    //unsigned int result; // eax@@2

    //if ( (*__ctype_toupper_loc())[*YL] == 'T' )
    //    result = thaiStrOnPaperLen(a1);
    //else
    //    result = strlen(a1);
    //return result;
	return strlen(a1);
}

int linputChinese(char *DestBuffer, int MaxLen, ONESC *onesc)
{

    char	*DestPtr;	// Points to current char position in DestBuffer
    char	*FillPtr;	// Points to start of "Fill" chars being shown in DestBuffer if applicable
    char	*v39;
	
    signed int Key; // esi@@16
    int		v14; // esi@@149
    char	v17; // al@@153
    int		v18; // esi@@166
    int		v30; // esi@@254
    char	v31; // dl@@255
    int		result; // eax@@265
    short	v36; // ax@@277
    short	v38; // ax@@291

    char	FillChar;
	char	BkSpc = *(char *)_yh;			// convenience to slightly speed up processing
    short	v45 = 0;
	bool	FullRetn = false;				// Allow auto-complete when buffer area is full
    char	*v50;
	char	FieldSave[1024];				// unsure of real size. 1024 is ample for single field buffer.

    if ( MaxLen < 0 )
    {
        FullRetn = true;					// signifies allow return when DestBuffer full, don't wait for <CR>
        MaxLen = -MaxLen;
    }

	FillChar = *_Yf;
    if ( !FillChar )
        FillChar = ' ';
    
	char *DestEnd = &DestBuffer[MaxLen];	// Field can be MaxLen long + \0 terminator
	*DestEnd = 0;							// ensure DestBuffer is nil terminated

    DestPtr = DestBuffer;					// DestPtr 

	v50 = FieldSave;						// Buffer to save current state of field in case we opt out of any changes
    while( *DestPtr )
    {
        fputc(*DestPtr, stderr);			// copy string to screen,
		*v50++ = *DestPtr++;				// and to internal buffer
    }
    *v50 = 0;								// ensure internal buffer is terminated
	
	for ( FillPtr = DestPtr; DestPtr < DestEnd; ++DestPtr )	// Fill remainder of Screeen Buffer with FillChar
        fputc(FillChar, stderr);
    
	for ( ; DestBuffer < DestPtr; --DestPtr )
        fputc(BkSpc, stderr);					// Backspace to start of DestBuffer Area on Screen

    alarm(_Yd);								// allows for a timeout on field entry presumably?

	fputs(*_vs ? _vs : _ve , stderr);		// vs == Make cursor *very* visible. ve == normal cursor visibility
	fflush(stderr);

	setvar(v_GOING_BACK, 0);				// "GOING_BACK" 41
    
	bypass = incvar(v_BYPASS, 0);			// incvar(42,0) returns current value of "BYPASS"
    
	if ( !bypass )
    {
        while ( 1 )
        {
            Key = gchar();
			//printf("linputChinese 200: Key = \"%C\", %d\n",isprint(Key) ? Key : ' ',Key);
            if ( Key == 2000 )
                goto LABEL_343;
			// _YT is set in CLINFO file. Allow TAB as input terminator? Y/N
            if ( _YT && Key == '\t' || Key == '\n' || Key == '\r' || Key == 2660 || Key == 2027 || Key == 2005 )
                break;
            if ( Key == _tty_bc )					// Archaic Backspace support
                Key = 2658;
            
			if ( iscntrl(Key)) 		//if ( (*__ctype_b_loc())[Key] & 0x0002 )	// re-map control codes iscntrl()
            {
                if ( Key == *(char *)_ya )			// <ctrl>a
                    Key = 2651;
                else if ( Key == *(char *)_yb )		// <ctrl>b
					Key = 2652;
                else if ( Key == *(char *)_yc )		// <ctrl>c
                    Key = 2653;
                else if ( Key == *(char *)_yd )		// <ctrl>d
                    Key = 2654;
                else if ( Key == *(char *)_ye )		// <ctrl>e
                    Key = 2655;
                else if ( Key == *(char *)_yf )		// <ctrl>f
                    Key = 2656;
                else if ( Key == *(char *)_yh )		// <ctrl>h
                    Key = 2658;
                else if ( Key == *(char *)_yi )		// <ctrl>i
					Key = 2659;
                else if ( Key == *(char *)_yl )		// <ctrl>l
					Key = 2662;
                else if ( Key == *(char *)_yp )		// <ctrl>p
					Key = 2666;
                else if ( Key == *(char *)_yr )		// <ctrl>r
					Key = 2668;
                else if ( Key == *(char *)_yt )		// <ctrl>t
                    Key = 2670;
                else if ( Key == *(char *)_yu )		// <ctrl>u
                    Key = 2671;
				else if ( Key == *(char *)_yv )		// <ctrl>v
					Key = 2672;
                else if ( Key == *(char *)_yw )		// <ctrl>w
					Key = 2673;
				else if ( Key == *(char *)_yx )		// <ctrl>x
					Key = 2674;
				else if ( Key == *(char *)_yz )		// <ctrl>z
					Key = 2676;
//printf("linputChinese 277: iscntrl(Key) Key = %d\n",Key);

            }
//-------------------------------------
//printf("linputChinese 249: Key = \"%C\", %d\n",Key,Key);

            if ( Key != 27 )
            {
                v45 = linpesc(Key, onesc);	// check to see if this key is 'escaped'
                if ( v45 )
                {
                    fflush(stderr);
                    break;
                }
            }
//-------------------------------------------
			switch (Key)
			{
			case 2048:
			case 2670:	// <ctrl>t
                if ( DestPtr == DestBuffer )
                {
                    if ( DestBuffer < FillPtr )
                    {
                        do
                        {
                            fputc(*DestPtr++, stderr);
                        }
                        while ( DestPtr < FillPtr );
                    }
                }
                else
                {
                    for ( ; DestBuffer < DestPtr; --DestPtr )
                        fputc(BkSpc, stderr);
                }
				break;

			case 2674:			// <ctrl> x handler
			case 2001:
				if ( DestPtr >= FillPtr )
					fputc(7, stderr);
				else
				{
		            v30 = (isDoubleWidth(*DestPtr) != 0) + 1;
		            for ( v50 = DestPtr; *v50; ++v50 )
		            {
						v31 = 0;
		                if ( &v50[v30] <= DestEnd )
							v31 = v50[v30];
	
						*v50 = v31;
						fputc(*v50 ? *v50 : FillChar, stderr);
					}
					*(DestEnd - 1) = 0;
					for ( FillPtr -= v30; DestPtr < v50; --v50 )
						fputc(BkSpc, stderr);
				}
				break;
			
			case 2003:
				while ( DestPtr < FillPtr )
                    fputc(*DestPtr++, stderr);
				break;

			case 2009:
				for ( ; DestBuffer < DestPtr; --DestPtr )
					fputc(BkSpc, stderr);
				break;

			case 2028:
				for ( ; DestBuffer < DestPtr; --DestPtr )
					fputc(BkSpc, stderr);
				v50 = FieldSave;
                while ( *v50 )
                {
					fputc(*v50, stderr);
					*DestPtr++ = *v50++;
				}
                for ( ; *DestPtr && DestPtr < DestEnd; ++DestPtr )
                {
					fputc(FillChar, stderr);
                    *DestPtr = 0;
				}
                for ( ; DestBuffer < DestPtr; --DestPtr )
					fputc(BkSpc, stderr);
				v45 = 27;					// <ESC>
				break;

			case 2041:
			case 2666:		// <ctrl>p
				if (!prscreen())
					fputc(7, stderr);	// ring bell if we couldn't print screen
				break;

			case 2042:
			case 2651:		// <ctrl>a
				if ( clabort != 2 )
                {
					fputs(_vi, stderr);
                    alarm(0);
                    return -17;
				}
				fputc(7, stderr);
				break;
			
			case 2659:		// <ctrl>i		insert a space at cursor position
			case 2024:
			case 2002:
				//printf("linputChinese 386 <ctrl>I: Key = \"%C\", %d, DestPtr = x%08X, FillPtr = x%08X, DestEnd = x%08X\n",Key,Key, DestPtr, FillPtr, DestEnd);
				if ( DestPtr >= FillPtr )
					fputc(7, stderr);	// DestBuffer full, ring the bell!
				else
				{
					if ( FillPtr == DestEnd )
					{
						//printf("linputChinese 392 <ctrl>I: FillPtr == DestEnd\n");
						FillPtr = DestEnd - 1;
					    //*(DestEnd - 1) = 0;
						*FillPtr = 0;
					    //if ( DestPtr < DestEnd - 1 )
					    if ( DestPtr < FillPtr )
					    {
							if ( curChineseChar(DestBuffer, DestEnd - 2) == 2 )
					        {
								FillPtr = DestEnd - 2;
					            //*(DestEnd - 2) = 0;
								*FillPtr = 0;
							}
						}
					}
					for ( v50 = FillPtr; DestPtr < v50; --v50 )	// shift remaining chars along
						*v50 = *(v50 - 1);
					*v50 = ' ';					// set cursor pos to <space>

					for ( ++FillPtr ; v50 <= FillPtr && v50 < DestEnd; ++v50 )	// Pad field out with FillChar
						fputc(*v50 ? *v50 : FillChar, stderr);

					for ( ; DestPtr < v50; --v50 )		// Backspace to insert position
						fputc(BkSpc, stderr);
				}
				break;

			case 2658:		// <ctrl>h
			case 2023:		// <backspace> (non-destructive)
			case 2006:		// <left arrow>	
				if ( DestBuffer >= DestPtr )	// At left hand side of the field
					fputc(7, stderr);			// ring bell and do nothing
				else
				{
					fputc(BkSpc, stderr);
					--DestPtr;
					if ( DestBuffer < DestPtr && curChineseChar(DestBuffer, DestPtr) == 4 )
					{
						fputc(BkSpc, stderr);
					    --DestPtr;
					}
				}
				break;

			case 2662:		// <ctrl>l
			case 2008:		// or right arrow
				if ( DestPtr < FillPtr )
                {
                    fputc(*DestPtr++, stderr);
                    if ( curChineseChar(DestBuffer, DestPtr) == 4 )
						fputc(*DestPtr++, stderr);
				}
				else
					fputc(7, stderr);	// can't right-arrow into uncharted waters :o)
				break;

			case 2656:		// <ctrl>f
			case 2047:
				if ( DestPtr >= FillPtr )
				{
					fputc(7, stderr);
					break;
				}
                v18 = gchar();
                v50 = DestPtr + 1;
                if ( v50 >= FillPtr )
				{
					fputc(7, stderr);
					break;
				}
                while ( *v50 != v18 )
				{
					++v50;
                    if ( v50 >= FillPtr )
					{
						fputc(7, stderr);
		                goto LABEL_340;
					}
				}
                if ( v50 >= FillPtr )
					fputc(7, stderr);
				else
				{
					fputc(*DestPtr++, stderr);
					while ( DestPtr < FillPtr && *DestPtr != v18 )
					    fputc(*DestPtr++, stderr);
				}

				break;

			case 2655:			// <ctrl>e
			case 2046:
				//printf("linputChinese 504: Key = \"%C\", %d, clabort = %d\n",Key,Key,clabort);
				if ( clabort != 2 )
                {
					fputs(_vi, stderr);
                    alarm(0);
                    return -5;
				}
                fputc(7, stderr);
				break;

			case 2654:		// <ctrl>d	== delete from current position to end of line
			case 2045:
				if ( DestPtr < FillPtr )
                {
					for ( v50 = DestPtr; *v50; ++v50 )
                    {
						fputc(FillChar, stderr);
                        *v50 = 0;
					}
                    for ( ; DestPtr < v50; --v50 )
						fputc(BkSpc, stderr);
					FillPtr = DestPtr;
				}
				else
					fputc(7, stderr);
				break;

			case 2712:
				fputs(_vi, stderr);		// vi == make the cursor invisible ?
                alarm(0);
                return -30;
				break;

			case 2043:
			case 2652:					// <ctrl>b
				if ( DestBuffer >= DestPtr )
				{
					fputc(7, stderr);
	                goto LABEL_340;
				}
                for ( ;; )
                {
					fputc(BkSpc, stderr);
                    --DestPtr;
                    if ( DestBuffer >= DestPtr )
						break;
					if ( (*__ctype_b_loc())[*DestPtr] & 8 || isChinese(DestBuffer, DestPtr) )
                    {
						while ( DestBuffer < DestPtr )
                        {
							if ( !((*__ctype_b_loc())[*DestPtr] & 8) && !isChinese(DestBuffer, DestPtr) )
                            {
								if ( DestBuffer >= DestPtr || (*__ctype_b_loc())[*DestPtr] & 8 || isChinese(DestBuffer, DestPtr) )
									goto LABEL_340;
								fputc(*DestPtr++, stderr);
				                goto LABEL_340;
							}
                            fputc(BkSpc, stderr);
                            --DestPtr;
						}
                        goto LABEL_340;
					}
				}
				break;

			case 2801:									// <ctrl>r == refresh screen
			case 2668:
				fputs(_vi, stderr);						// vi == make the cursor invisible
                clrefresh();
                at();
                
				for ( v50 = DestBuffer; *v50; ++v50 )	// Copy buffer to screen
					fputc(*v50, stderr);
                for ( ; v50 < DestEnd; ++v50 )			// Fill chars if required
					fputc(FillChar, stderr);
                for ( ; DestPtr < v50; --v50 )			// Backspace to current cursor position
					fputc(BkSpc, stderr);
                
				fputs(*_vs ? _vs : _ve, stderr);		// vs == Make cursor *very* visible. ve == normal cursor visibility
				break;

			case 2044:
			case 2653:									// <ctrl>c     [appears to be trapped by the O.S.]
				if ( DestPtr >= FillPtr )
					fputc(7, stderr);

				else if ( curChineseChar(DestBuffer, DestPtr) == 2 )
                {
                    fputc(*DestPtr++, stderr);
		            fputc(*DestPtr++, stderr);
				}
                else if ( curChineseChar(DestBuffer, DestPtr) == 1 )		// swap case
				{
					v14 = *DestPtr;
					if (islower(v14))		// islower()  ==	0x0200 
					    v17 = toupper(v14);
					else if (isupper(v14))	// isupper()  ==	0x0100
					    v17 = tolower(v14);
					else
					    v17 = *DestPtr;
					*DestPtr = v17;
					fputc(*DestPtr++, stderr);
				}
				break;

			case 2010:							// up-arrow
			case 2011:
			case 2672:							// <ctrl>v
				//printf("linputChinese 566 UP-ARROW: Key = \"%C\", %d : goback = %d\n",Key,Key, goback);
				if ( goback != 2 )
                {
					fputs(_vi, stderr);			// vi == make the cursor invisible ?
                    alarm(0);
                    setvar(v_GOING_BACK, 1);	// "GOING_BACK" 41
                    return -22;
				}
				fputc(7, stderr);				// bell
				break;

			case 2050:
			case 2673:						// <ctrl>w		??  Behaves similar to right-arrow
				if ( DestPtr >= FillPtr )
					fputc(7, stderr);

				else if ( (*__ctype_b_loc())[*DestPtr] & 8 || isChinese(DestBuffer, DestPtr) )	// isalnum()  == 0x0008
                    fputc(*DestPtr++, stderr);

				else
				{
					while ( DestPtr < FillPtr )
					{
						if ( !((*__ctype_b_loc())[*DestPtr] & 8) && !isChinese(DestBuffer, DestPtr) )
					    {
							while ( DestPtr < FillPtr && !((*__ctype_b_loc())[*DestPtr] & 8) && !isChinese(DestBuffer, DestPtr) )
					        {
					            fputc(*DestPtr++, stderr);
							}
					        goto LABEL_340;
						}
					    fputc(*DestPtr++, stderr);
					}
				}
				break;

			case 2671:							// <ctrl>u		-- Undo current changes
			case 2049:
				while ( DestBuffer < DestPtr )	// backspace to start of buffer
                {
					fputc(BkSpc, stderr);
                    --DestPtr;
				}
                v50 = FieldSave;
                while ( *v50 )					// copy saved buffer to dest
                {
					fputc(*v50, stderr);
                    *DestPtr++ = *v50++;
				}
                for ( FillPtr = DestPtr; *DestPtr && DestPtr < DestEnd; ++DestPtr )	// add fill chars as required
                {
					fputc(FillChar, stderr);
                    *DestPtr = 0;
				}
                for ( ; DestBuffer < DestPtr; --DestPtr )	// backspace to start of screen field
					fputc(BkSpc, stderr);
				break;

			case 27:							// <ESC>
				v36 = gchar();
                v45 = v36;
                if ( v36 != 27 )
                {
					if ( (unsigned short)(v36 - 65) <= 0x39u )
						goto LABEL_340;
					v45 = ' ';
                    goto LABEL_340;
				}
                for ( ; DestBuffer < DestPtr; --DestPtr )
					fputc(BkSpc, stderr);

                v50 = FieldSave;
                while ( *v50 )
                {
					fputc(*v50, stderr);
                    *DestPtr++ = *v50++;
                }
                for ( ; *DestPtr && DestPtr < DestEnd; ++DestPtr )
                {
					fputc(FillChar, stderr);
                    *DestPtr = 0;
				}
                for ( ; DestBuffer < DestPtr; --DestPtr )
					fputc(BkSpc, stderr);
				break;

			default:
				//printf("linputChinese 654: Key = \"%C\", %d\n",Key,Key);
				v38 = Key - 2900;
				if ( (unsigned int)(Key - 2900) <= 122 )
				{
					v45 = v38;
					if ((*__ctype_b_loc())[v38] & 0x0400 )	// isalpha() == 0x0400
					    goto LABEL_340;
					v45 = ' ';
					goto LABEL_340;
				}
				else if ( DestPtr >= DestEnd )			// cursor at right end of field
				{
					//printf("linputChinese 666 buffer full: Key = \"%C\", %d\n",Key,Key);
					fputc(7, stderr);
					if ( isDoubleWidth(Key) )
						gchar();
				}
				else if ( DestPtr >= FillPtr )			// we are adding *new* chars in the "fill" area
				{
					//printf("linputChinese FILLAREA: Key = \"%C\", %d\n",Key,Key);
				    if ( isDoubleWidth(Key) )
				    {
					    if ( (signed int)(DestEnd - DestPtr) <= 1 )
					    {
					        fputc(7, stderr);
					        gchar();
					        FillPtr = DestPtr;
					        goto LABEL_340;
					    }
					    fputc(Key, stderr);
					    *DestPtr++ = Key;
					    Key = gchar();
					}
					fputc(Key, stderr);					// Copy the char to screen, dest buffer, bump fillptr
					*DestPtr++ = Key;
					FillPtr = DestPtr;
				}	
				else if ( isDoubleWidth(Key) )			// should only be true for foreign language chars? 
				{
					//printf("linputChinese DOUBLEWIDTH: Key = \"%C\", %d\n",Key,Key);
				    if ( isDoubleWidth(*DestPtr) )
				    {
				        fputc(Key, stderr);
				        *DestPtr++ = Key;
				        Key = gchar();
				        fputc(Key, stderr);
				        *DestPtr++ = Key;
				    }
				    else if ( FillPtr == DestEnd && isDoubleWidth(DestPtr[1]) )
				    {
				        fputc(7, stderr);
				        gchar();
				    }
					else
					{
						fputc(Key, stderr);
						*DestPtr = Key;
						v39 = DestPtr + 1;
						v50 = v39;
						if ( FillPtr < DestEnd )
						{
						    for ( v50 = FillPtr; v39 < v50; --v50 )
						        *v50 = *(v50 - 1);
						    ++FillPtr;
						}
						*v50 = gchar();
						for ( DestPtr = v39 + 1; v50 <= FillPtr && v50 < DestEnd; ++v50 )
						    fputc(*v50 ? *v50 : FillChar, stderr);
						
						for ( ; DestPtr < v50; --v50 )
						    fputc(BkSpc, stderr);
					}
				}
				else	// not DoubleWidth(Key)	// overwrite *existing* chars
				{
					//printf("linputChinese OVERWRITE: Key = \"%C\", %d\n",Key,Key);
				    if ( curChineseChar(DestBuffer, DestPtr) != 2 )
					{
				        fputc(Key, stderr);
				        *DestPtr++ = Key;
					}
					else
					{
						fputc(Key, stderr);
						*DestPtr++ = Key;

						if ( DestPtr >= FillPtr )		// field buffer overrun
						    fputc(7, stderr);
						else if ( !isDoubleWidth(Key) )
						{
						    for ( v50 = DestPtr; *v50; ++v50 )
						    {
						        *v50 = v50[1];
						        fputc(*v50 ? *v50 : FillChar, stderr);
						    }
						    --FillPtr;
						    for ( ; DestPtr < v50; --v50 )
						        fputc(BkSpc, stderr);
						}
					}
				}
				break;
			}

LABEL_340:	// main end of loop tests
            if ( DestPtr == DestEnd && FullRetn || (fflush(stderr),v45) )
                break;
LABEL_343:
            if ( bypass )
                goto LABEL_346;
        }	// end while(1)
    } // end if ( !bypass )

    if ( bypass )
LABEL_346:
        incvar(v_BYPASS, -1);			// "BYPASS" --
    
	fputs(_vi, stderr);					// vi == make the cursor invisible ?
    alarm(0);							// cancel any pending timer 
    trim(DestBuffer);					// trim leading/trailing spaces if global var "trim_it" != 2
    
	if ( v45 )
        result = -v45;					// error exit?
    else
        result = strlen(DestBuffer);	// exit_success. return # chars in DestBuffer
    return result;
}

#endif
@


1.1
log
@Initial revision
@
text
@d14 2
a15 1
    int result; // eax@@3
d17 1
a17 1
    if ( !isJapan || (signed int)a1 <= 160 || (result = 0, (signed int)a1 > 223) )
d19 2
d26 4
a29 4
    int v2; // ecx@@1
    char *i; // edx@@1
    signed int v4; // esi@@3

d55 2
a56 2
    int v2; // eax@@1
    int v3; // edx@@3
d59 1
a59 1
    if ( v2 == 2 || v2 == 4 || (v3 = 0, v2 == 8) )
d80 1
a80 1
            while ( 1 )        // Nasty deadlock loop! Poor programming style.
d89 1
a89 1
    int result; // eax@@2
d102 4
a105 2
	result = linputChinese(Buffer, MaxLen, a2);
    return result;
d110 1
a110 1
    int result; // eax@@2
d115 3
a117 2
        result = a2;
    return result;
d122 1
a122 1
    unsigned int result; // eax@@2
d127 3
a129 2
        result = strlen(a1);
    return result;
d132 1
a132 1
int linputChinese(char *Buffer, int MaxLen, ONESC *onesc)
d134 5
a138 11
    struct _IO_FILE *v33; // eax@@264
    struct _IO_FILE *v27; // eax@@241
    struct _IO_FILE *v12; // eax@@146
    struct _IO_FILE *ii; // eax@@130
    FILE *v43; // [sp+4h] [bp-20A4h]@@147
    //const unsigned short **v13; // eax@@149
    const unsigned short **v16; // eax@@151

    int v3; // edx@@1
    char *kk; // edi@@5
    char v5; // al@@6
d140 16
a155 51
    short v8; // ax@@62
    char v9; // zf@@78
    int v11; // ST00_4@@146
    int v14; // esi@@149
    char v17; // al@@153
    int v18; // esi@@166
    int v19; // ST00_4@@171
    int v20; // ST00_4@@173
    int v21; // eax@@190
    int v22; // ST00_4@@198
    char **v23; // eax@@209
    int v24; // ST00_4@@214
    int v25; // ST00_4@@223
    char v26; // al@@228
    int v28; // ST00_4@@243
    int v29; // ST00_4@@248
    int v30; // esi@@254
    char v31; // dl@@255
    int v32; // eax@@258
    int result; // eax@@265
    char v35; // al@@269
    short v36; // ax@@277
    char v37; // al@@281
    short v38; // ax@@291
    char *v39; // edi@@310
    int v40; // eax@@317
    int v41; // eax@@330

    int v42; // [sp+0h] [bp-20A8h]@@147
    char FillChar; // [sp+7Bh] [bp-202Dh]@@3
    short v45; // [sp+7Ch] [bp-202Ch]@@1
    signed int v46; // [sp+80h] [bp-2028h]@@1
    char *BuffEnd; // [sp+84h] [bp-2024h]@@5
    char *i; // [sp+88h] [bp-2020h]@@5
    char *n; // [sp+88h] [bp-2020h]@@158
    char *v50; // [sp+88h] [bp-2020h]@@166
    char *k; // [sp+88h] [bp-2020h]@@185
    char *m; // [sp+88h] [bp-2020h]@@202
    char *v53; // [sp+88h] [bp-2020h]@@227
    char *l; // [sp+88h] [bp-2020h]@@254
    char *v55; // [sp+88h] [bp-2020h]@@268
    char *v56; // [sp+88h] [bp-2020h]@@280
    char *jj; // [sp+88h] [bp-2020h]@@310
    char *ll; // [sp+88h] [bp-2020h]@@328

    char *j; // [sp+8Ch] [bp-201Ch]@@7
    char v60[1024]; // [sp+90h] [bp-2018h]@@5 unsure of real size!!!

    v3 = MaxLen;
    v46 = 0;
    v45 = 0;
d158 2
a159 2
        v46 = 1;	// signifies return when buffer full, don't wait for <CR> ?
        v3 = -MaxLen;
d161 2
a162 1
    FillChar = *_Yf;
d166 7
a172 5
	BuffEnd = &Buffer[v3];
    Buffer[v3] = 0;
    kk = Buffer;
	i = v60;
    while( *kk )
d174 2
a175 2
        fputc(*kk, stderr);	// copy string to screen,
		*i++ = *kk++;		// and to internal buffer
d177 1
a177 1
    *i = 0;
d179 1
a179 3
	//printf("linputChinese: FillChar = \"%C\", _yh = x%08X\n",FillChar,_yh);
    
	for ( j = kk; kk < BuffEnd; ++kk )	// Fill remainder of Screeen Buffer with FillChar
d182 2
a183 2
	for ( ; Buffer < kk; --kk )
        fputc(*(char *)_yh, stderr);	// Backspace to start of Buffer Area on Screen
d185 1
a185 5
    alarm(_Yd);
    if ( *_vs )
	    fputs(_vs, stderr);
    else
		fputs(_ve, stderr);
d187 1
d189 6
a194 3
    setvar(v_GOING_BACK, 0);              // "GOING_BACK" 41
    bypass = incvar(v_BYPASS, 0);     // incvar(42,0) returns current value of "BYPASS"
    if ( !bypass )
d199 1
a199 1
			//printf("linputChinese 1467: Key = \"%C\", %d\n",isprint(Key) ? Key : ' ',Key);
d205 1
a205 1
            if ( Key == _tty_bc )
d208 1
a208 2
			//if ( (*__ctype_b_loc())[Key] & 0x0002 )	// re-map control codes iscntrl()
			if ( iscntrl(Key)) 
d244 1
a244 1
printf("linputChinese 1507: iscntrl(Key) Key = %d\n",Key);
d248 1
a248 1
printf("linputChinese 1509: Key = \"%C\", %d\n",Key,Key);
d252 2
a253 3
                v8 = linpesc(Key, onesc);	// check to see if this key is 'escaped'
                v45 = v8;
                if ( v8 )
d264 1
a264 1
                if ( kk == Buffer )
d266 1
a266 1
                    if ( Buffer < j )
d270 1
a270 2
                            v24 = *kk++;
                            fputc(v24, stderr);
d272 1
a272 1
                        while ( kk < j );
d277 2
a278 2
                    for ( ; Buffer < kk; --kk )
                        fputc(*(char *)_yh, stderr);
a279 1
                goto LABEL_340;
d284 3
a286 1
				if ( kk >= j )
d288 13
a300 2
					fputc(7, stderr);
		            goto LABEL_340;
a301 16
                v30 = (isDoubleWidth(*kk) != 0) + 1;
                for ( l = kk; *l; ++l )
                {
					v31 = 0;
                    if ( &l[v30] <= BuffEnd )
						v31 = l[v30];
					*l = v31;
                    if ( *l )
						v32 = *l;
					else
						v32 = FillChar;
					fputc(v32, stderr);
				}
                *(BuffEnd - 1) = 0;
				for ( j -= v30; kk < l; --l )
					fputc(*(char *)_yh, stderr);
d305 2
a306 5
				while ( kk < j )
                {
					v25 = *kk++;
                    fputc(v25, stderr);
				}
d310 2
a311 3
				for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);

d315 7
a321 8
				for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);
				v55 = v60;
                while ( *v55 )
                {
					fputc(*v55, stderr);
                    v35 = *v55++;
					*kk++ = v35;
d323 1
a323 1
                for ( ; *kk && kk < BuffEnd; ++kk )
d326 1
a326 1
                    *kk = 0;
d328 3
a330 4
                for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);
				v45 = 27;
                goto LABEL_340;
d336 1
a336 1
					fputc(7, stderr);
d350 1
a350 1
			case 2659:		// <ctrl>i
d353 4
a356 1
				if ( kk >= j )
d358 15
a372 13
					fputc(7, stderr);
                    goto LABEL_340;
				}
                if ( j == BuffEnd )
                {
					j = BuffEnd - 1;
                    *(BuffEnd - 1) = 0;
                    if ( kk < BuffEnd - 1 )
                    {
						if ( curChineseChar(Buffer, BuffEnd - 2) == 2 )
                        {
							j = BuffEnd - 2;
                            *(BuffEnd - 2) = 0;
d375 9
a384 15
                for ( k = j; kk < k; --k )
					*k = *(k - 1);
				*k = ' ';
                ++j;
                for ( ; k <= j && k < BuffEnd; ++k )
                {
					if ( *k )
						v21 = *k;
					else
						v21 = FillChar;
					fputc(v21, stderr);
				}
                for ( ; kk < k; --k )
					fputc(*(char *)_yh, stderr);
				goto LABEL_340;
d388 5
a392 3
			case 2023:
			case 2006:
				if ( Buffer >= kk )
d394 7
a400 9
					fputc(7, stderr);
	                goto LABEL_340;
				}
                fputc(*(char *)_yh, stderr);
                --kk;
                if ( Buffer < kk && curChineseChar(Buffer, kk) == 4 )
                {
					fputc(*(char *)_yh, stderr);
                    --kk;
a401 1
                goto LABEL_340;
d405 2
a406 2
			case 2008:
				if ( kk < j )
d408 3
a410 8
					v22 = *kk++;
                    fputc(v22, stderr);
                    if ( curChineseChar(Buffer, kk) == 4 )
					{
						v42 = *kk++;
						fputc(v42, stderr);
					}
	                goto LABEL_340;
d412 2
a413 2
                fputc(7, stderr);
                goto LABEL_340;
d418 1
a418 1
				if ( kk >= j )
d424 2
a425 2
                v50 = kk + 1;
                if ( v50 >= j )
d433 1
a433 1
                    if ( v50 >= j )
d439 3
a441 1
                if ( v50 >= j )
d443 3
a445 2
					fputc(7, stderr);
		            goto LABEL_340;
d447 1
a447 8
                v19 = *kk++;
                fputc(v19, stderr);
                while ( kk < j && *kk != v18 )
                {
					v20 = *kk++;
                    fputc(v20, stderr);
				}
                goto LABEL_340;
d452 1
a459 1
                goto LABEL_340;
d462 1
a462 1
			case 2654:		// <ctrl>d
d464 1
a464 1
				if ( kk < j )
d466 1
a466 1
					for ( n = kk; *n; ++n )
d469 1
a469 1
                        *n = 0;
d471 3
a473 3
                    for ( ; kk < n; --n )
						fputc(*(char *)_yh, stderr);
					j = kk;
a476 1

d480 1
a480 1
				fputs(_vi, stderr);
d487 1
a487 1
				if ( Buffer >= kk )
d492 1
a492 1
                for ( ii = stderr; ; ii = stderr )
d494 3
a496 3
					fputc(*(char *)_yh, ii);
                    --kk;
                    if ( Buffer >= kk )
d498 1
a498 1
					if ( (*__ctype_b_loc())[*kk] & 8 || isChinese(Buffer, kk) )
d500 1
a500 1
						while ( Buffer < kk )
d502 1
a502 1
							if ( !((*__ctype_b_loc())[*kk] & 8) && !isChinese(Buffer, kk) )
d504 1
a504 1
								if ( Buffer >= kk || (*__ctype_b_loc())[*kk] & 8 || isChinese(Buffer, kk) )
d506 1
a506 2
								v42 = *kk++;
								fputc(v42, stderr);
d509 2
a510 2
                            fputc(*(char *)_yh, stderr);
                            --kk;
a514 1
                goto LABEL_340;
d517 3
a519 3
			case 2801:
			case 2668:					// <ctrl>r
				fputs(_vi, stderr);
d523 3
a525 3
				for ( m = Buffer; *m; ++m )
					fputc(*m, stderr);
                for ( ; m < BuffEnd; ++m )
d527 2
a528 2
                for ( ; kk < m; --m )
					fputc(*(char *)_yh, stderr);
d530 1
a530 6
				if ( *_vs )
					v23 = &_vs;
				else
					v23 = &_ve;
				fputs(*v23, stderr);
                goto LABEL_340;
d534 2
a535 3
			case 2653:					// <ctrl>c
				if ( kk >= j )
				{
d537 2
a538 3
	                goto LABEL_340;
				}
                if ( curChineseChar(Buffer, kk) == 2 )
d540 2
a541 5
					v11 = *kk++;
                    fputc(v11, stderr);
			        v42 = *kk++;
		            fputc(v42, stderr);
	                goto LABEL_340;
d543 1
a543 1
                if ( curChineseChar(Buffer, kk) == 1 )
d545 2
a546 2
					v14 = *kk;
					if (islower(v14))	// islower()  ==	0x0200 
d551 3
a553 4
					    v17 = *kk;
					*kk = v17;
					v42 = *kk++;
					fputc(v42, stderr);
a554 1
				goto LABEL_340;
d557 1
a557 1
			case 2010:
d559 2
a560 1
			case 2672:						// <ctrl>v
d563 1
a563 1
					fputs(_vi, stderr);
d565 1
a565 1
                    setvar(v_GOING_BACK, 1);// "GOING_BACK" 41
d568 1
a568 2
				fputc(7, stderr);
	            goto LABEL_340;
d572 8
a579 2
			case 2673:						// <ctrl>w
				if ( kk >= j )
d581 9
a589 17
					fputc(7, stderr);
			        goto LABEL_340;
				}
                if ( (*__ctype_b_loc())[*kk] & 8 || isChinese(Buffer, kk) )	// isalnum()  == 0x0008
                {
					v28 = *kk++;
                    fputc(v28, stderr);
	                goto LABEL_340;
				}
                while ( kk < j )
                {
					if ( !((*__ctype_b_loc())[*kk] & 8) && !isChinese(Buffer, kk) )
                    {
						while ( kk < j && !((*__ctype_b_loc())[*kk] & 8) && !isChinese(Buffer, kk) )
                        {
							v29 = *kk++;
                            fputc(v29, stderr);
d591 1
a591 1
                        goto LABEL_340;
a592 2
                    v28 = *kk++;
                    fputc(v28, stderr);
a593 1
                goto LABEL_340;
d596 1
a596 1
			case 2671:							// <ctrl>u
d598 1
a598 1
				while ( Buffer < kk )
d600 2
a601 2
					fputc(*(char *)_yh, stderr);
                    --kk;
d603 2
a604 2
                v53 = v60;
                while ( *v53 )
d606 2
a607 3
					fputc(*v53, stderr);
                    v26 = *v53++;
                    *kk++ = v26;
d609 1
a609 1
                for ( j = kk; *kk && kk < BuffEnd; ++kk )
d612 1
a612 1
                    *kk = 0;
d614 2
a615 3
                for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);
				goto LABEL_340;
d628 8
a635 8
                for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);
                v56 = v60;
                while ( *v56 )
                {
					fputc(*v56, stderr);
                    v37 = *v56++;
                    *kk++ = v37;
d637 1
a637 1
                for ( ; *kk && kk < BuffEnd; ++kk )
d640 1
a640 1
                    *kk = 0;
d642 2
a643 3
                for ( ; Buffer < kk; --kk )
					fputc(*(char *)_yh, stderr);
                goto LABEL_340;
d647 1
d657 1
a657 1
				if ( kk >= BuffEnd )
d659 1
a662 1
					goto LABEL_340;
d664 1
a664 1
				if ( kk >= j )
d666 1
d669 1
a669 1
					    if ( (signed int)(BuffEnd - kk) <= 1 )
d673 1
a673 1
					        j = kk;
d677 1
a677 1
					    *kk++ = Key;
d680 3
a682 4
					fputc(Key, stderr);
					*kk++ = Key;
					j = kk;
					goto LABEL_340;
d684 1
a684 1
				if ( isDoubleWidth(Key) )
d686 2
a687 1
				    if ( isDoubleWidth(*kk) )
d690 1
a690 1
				        *kk++ = Key;
d693 1
a693 2
				        *kk++ = Key;
				        goto LABEL_340;
d695 1
a695 1
				    if ( j == BuffEnd && isDoubleWidth(kk[1]) )
a698 1
				        goto LABEL_340;
d700 19
a718 21
				    fputc(Key, stderr);
				    *kk = Key;
				    v39 = kk + 1;
				    jj = v39;
				    if ( j < BuffEnd )
				    {
				        for ( jj = j; v39 < jj; --jj )
				            *jj = *(jj - 1);
				        ++j;
				    }
				    *jj = gchar();
				    for ( kk = v39 + 1; jj <= j && jj < BuffEnd; ++jj )
				    {
				        if ( *jj )
				            v40 = *jj;
				        else
				            v40 = FillChar;
				        fputc(v40, stderr);
				    }
				    for ( ; kk < jj; --jj )
				        fputc(*(char *)_yh, stderr);
d720 1
a720 1
				else
d722 2
a723 1
				    if ( curChineseChar(Buffer, kk) != 2 )
d726 1
a726 2
				        *kk++ = Key;
				        goto LABEL_340;
d728 1
a728 3
				    fputc(Key, stderr);
				    *kk++ = Key;
				    if ( kk >= j )
d730 16
a745 2
				        fputc(7, stderr);
				        goto LABEL_340;
a746 15
				    if ( !isDoubleWidth(Key) )
				    {
				        for ( ll = kk; *ll; ++ll )
				        {
				            *ll = ll[1];
				            if ( *ll )
				                v41 = *ll;
				            else
				                v41 = FillChar;
				            fputc(v41, stderr);
				        }
				        --j;
				        for ( ; kk < ll; --ll )
				            fputc(*(char *)_yh, stderr);
				    }
d752 1
a752 1
            if ( kk == BuffEnd && v46 || (fflush(stderr),v45) )
d763 4
a766 3
    fputs(_vi, stderr);
    alarm(0);
    trim(Buffer);
d769 1
a769 1
        result = -v45;
d771 1
a771 1
        result = strlen(Buffer);
@
