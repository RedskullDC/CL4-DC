head	1.8;
access;
symbols;
locks
	leslie:1.8; strict;
comment	@ * @;


1.8
date	2020.01.27.13.39.32;	author leslie;	state Exp;
branches;
next	1.7;

1.7
date	2016.07.22.04.33.27;	author leslie;	state Exp;
branches;
next	1.6;

1.6
date	2016.04.07.06.51.41;	author leslie;	state Exp;
branches;
next	1.5;

1.5
date	2016.01.15.02.24.02;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2015.07.17.06.42.07;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2014.11.27.09.42.11;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.11.24.02.22.20;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.31.01.26.41;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.8
log
@prior to X64 compat
@
text
@#ifndef RCHECK_C
#define RCHECK_C

#include <stdio.h>
#include <assert.h>
#include <stdarg.h>		// for var args stuff
#include <stdlib.h>		// for drand48(), strtod()
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"	// for bit field values

void putmesg(char *Dest, unsigned int MaxLen, char *FormatStr, char *Param1, char *Param2)
{
	char	*v8;
	char	*v10;
	char	v9;

	while ( *FormatStr && MaxLen > 1 )
    {
		if (*FormatStr == '$')	// looking for $1 or $2 sequence here
		{
			v8 = FormatStr + 1;
			v9 = *v8;			// what is the next char?
			
			switch (v9)
			{
			case '$':			// '$$' results in just one $ in the output
			    *Dest++ = v9;
				break;

			case '1':			// found a $1 or $2 sequence
			case '2':
			    v10 = (v9 == '1') ? Param1 : Param2;
				for ( ; *v10 && MaxLen > 1; --MaxLen ) // copy param into dest buffer
			        *Dest++ = *v10++;
				break;

			default :			// everything else just copy verbatim
				*Dest++ = '$';
				--MaxLen;
				if ( MaxLen )
				    *Dest++ = v9;
				break;
			}
			FormatStr = v8 + 1;
		}
		else
        {
            *Dest++ = *FormatStr++;
            --MaxLen;
        }
    }
    *Dest = 0;
}

bool rcheck(XTAB *xtab, FLDdesc *fld, int SkipChk)		// return true, range ok.  false range error
{
    RATAB	*ratb;
	ENTAB	*entb;
	FLDdesc *v11;
	FLDdesc *v14;
	
    char	*v3;
	char	*v4;
	char	*Param1;
	char	*Param2;
	char	*a2a;
	char	*v35;
	    
	double	testVal;
	double	rangeHigh;
	double	rangeLow;
	
    int		DecPlaces;
	int		RangeType;
	short	SIGN = 0;		// used to indicate sign of result required: Pos,Neg
	
	bool	RangeErr;
	bool	Required;
	
    FLDdesc fld1;
    char	v44[32];
    char	Dest[32];
    char	v42[1008];
    char	v45[1008];
    char	v46[1008];
    char	result[1008];
    char	format[1008];
    char	v32;
	
    testVal		= 0.0;
    rangeHigh	= 0.0;
    rangeLow	= 0.0;
    
	v4		= 0;
    v35		= 0;
    v32		= 0;
    a2a		= 0;
    
//	range from to expr # numbers, dates or times
//	range positive # numbers
//	range negative # numbers
//	range string expr # characters
//	range name expr # a valid cl name

	//printf("rcheck 117 - xtab->Flags = x%04X, fld->FLDstat = x%04X, SkipChk = %d\n",(unsigned short)xtab->Flags,(unsigned short)fld->FLDstat,SkipChk);

	//if ( SkipChk || !(xtab->Flags & 0x0400) && fld->FLDstat & 0x0004 )
	if ( SkipChk || !(xtab->Flags & xtb_REQUIRED) && fld->FLDstat & fld_ZERO )
        return 1;					// exit success.
    
	//if ( xtab->Flags & 0x110 || !xtab->RangeID )
	if ( xtab->Flags & (xtb_JOIN | xtb_NOJOIN) || !xtab->RangeID )
    {
        //testVal = 0.0;	all set to 0.0 above
        //rangeHigh = 0.0;
        //rangeLow = 0.0;
        ratb = 0;
    }
	else
	{
	    ratb = &raarr.TableAddr[xtab->RangeID - 1];
	    RangeType = ratb->RangeType;
		//printf("rcheck 140 - RangeType = %d\n",RangeType);
		switch (RangeType)
		{
		case 1:									// POSITIVE
		case 2:									// NEGATIVE
	        SIGN = (RangeType == 1) ? 1 : -1 ;
	        if ( xtab->Flags & xtb_CHAR )		// expect string value
	            break;
			testVal = *(double *)fld->FLDdata;
			break;

		case 5:									// MATCH
	        SIGN = 0;
	        entb = ENARR(ratb->RangeFrom);
			assert(entb->entype == 0x02 && entb->TTno == 0x6C00);	// 0x6C00 = match()

	        a2a = evalstr(ENARR(entb->enleft), v42);
			break;

		case 6:									// NAME	removed in cl4.4.4 ??
			break;

		//case 3:								// range FROM TO    eg: range 100 300 'must be between $1 and $2'
		//case 4:								// range 'one,two,three'
		default:
			SIGN = 0;
			v11 = getftf(ENARR(ratb->RangeFrom), 1, &fld1);
			v4 = (char *)v11->FLDdata;
			if ( !(xtab->Flags & xtb_CHAR) )		// expect string value
			{
			    if ( v11->FLDtype == 'C' && xtab->Flags & xtb_DATE )
			    {
			        cdbcpystr(Dest, v4, 0);
			        rangeLow = (double)clgetdate(Dest);
			    }
			    else
			        rangeLow = clround(*(double *)v4, v11->FLDtype);
			
				v14 = getftf(ENARR(ratb->RangeTo), 1, &fld1);
				if ( v14->FLDtype == 'C' && xtab->Flags & xtb_DATE )
				{
				    cdbcpystr(Dest, (char *)v14->FLDdata, 0);
				    rangeHigh = (double)clgetdate(Dest);
				}
				else
					rangeHigh = clround(*(double *)v14->FLDdata, v14->FLDtype);

				testVal = *(double *)fld->FLDdata;
				break;
			}
		}
	}
    
	RangeErr = false;
    Required = false;

	if ( xtab->Flags & xtb_REQUIRED )
        Required = (fld->FLDstat & fld_ZERO) ? true : false;

	if ( ratb )        // else goto LABEL_82;
	{
		if ( fld->FLDtype != 'C' )						// Numeric types
		{
			if (SIGN > 0)			// POSITIVE
				RangeErr = ( testVal <= 0.0 );
			
			else if (SIGN < 0)		// NEGATIVE
				RangeErr = ( testVal >= 0.0 );
			
			else	// SIGN == 0		FROM <> TO type range
				RangeErr = ( rangeLow > testVal || testVal > rangeHigh );
		}
		else if ( SIGN )	// pos/neg check on a string value. Try and interpret as numeric value
		{
			testVal = strtod((const char *)fld->FLDdata, 0);
			if ( SIGN > 0 )			// POSITIVE
				RangeErr = ( testVal <= 0.0 );
			else	// SIGN < 0		// NEGATIVE
				RangeErr = ( testVal >= 0.0 );
		}
		else		// string types
		{
			if ( ratb->RangeType == 6 )					// valid cl filename check
			{
			    v32 = isfname((char *)fld->FLDdata);
			    if ( !v32 )
			        goto LABEL_82;
			}
			else
			{
				if ( !a2a )
				{
				    v35 = v4;
				    RangeErr = true;
				    do
				    {
				        v3 = v44;
						while (*v4)		// split range string on commas
						{
							*v3++ = *v4++;
							if (*v4 == ',')
							{
								v4++;
								break;
							}
						}
			            *v3 = 0;

			            if ( !v44[0] )	// got to end of range string with no match!!
			                break;
			            
						if ( !compare((char *)fld->FLDdata, v44) )
			                RangeErr = false;
			        }
			        while ( RangeErr );
			        goto LABEL_82;
			    }
			    if ( smatch((char *)fld->FLDdata, a2a) > 0 )
			        goto LABEL_82;
			}
			RangeErr = true;
		}
	}

//==============================================

LABEL_82:

	if ( !Required && !RangeErr)
		return 1;					// exit_success

//-----------------------------------
    if ( ratb )
    {
        Param1 = "";
        Param2 = "";
        if ( SIGN > 0 )
            sprintf(result, "must be POSITIVE");
        
		else if ( SIGN < 0 )
            sprintf(result, "must be NEGATIVE");

		else if ( xtab->Flags & xtb_NAME )
        {
            sprintf(result, "invalid NAME character [%c]", v32);
            bncbuf_0[0] = v32;
            bncbuf_0[1] = 0;
            Param1 = bncbuf_0;
        }
		else
		{
			switch (fld->FLDtype)
			{
			case 'C':
				if ( a2a )
				{
				    sprintf(result, "must match: '%s'", a2a);
				    Param1 = a2a;
				}
				else
				{
				    sprintf(result, "allowed: '%s'", v35);
				    Param1 = v35;
				}
				break;

			case 'D':
				sprintf(result, "range: %s to %s", makedate(v46, rangeLow), makedate(v45, rangeHigh));
				Param1 = v46;
				Param2 = v45;
				break;

			case 'T':
				sprintf(result, "range: %s to %s", maketime(v46, rangeLow), maketime(v45, rangeHigh));
				Param1 = v46;
				Param2 = v45;
				break;

			default:
				DecPlaces = (short)typedp(fld->FLDtype);
				Param1 = v46;
				sprintf(v46, "%.*f", DecPlaces, rangeLow);
				Param2 = v45;
				sprintf(v45, "%.*f", DecPlaces, rangeHigh);
				sprintf(result, "range: %s to %s", v46, v45);
				break;
			}
        }
        if ( ratb->StringOffset )					// If program had a custom message, use that in preference to the defaults above.
            putmesg(result, 1001u, &strarr.StringTable[ratb->StringOffset - 1], Param1, Param2);
    }
	else
	{
		result[0] = 0;
	}

    if ( xtab->Flags & xtb_JOIN )
        cdbcpystr(result, result, " (try '*' or '+')", 0);
    
	if ( xtab->onesc )
        cdbcpystr(result, result, " (try ESC ' ')", 0);

	if ( Required )
    {
        cdbcpystr(format, "required", 0);
        if ( result[0] )
            cdbcpystr(format, format, " - ", result, 0);
	    prerr(format, 0, 1);
    }
    else
    {
	    prerr(result, 0, 1);
    }
    return 0;
}


#endif

@


1.7
log
@tidy-up
@
text
@d16 3
a18 5
	int		v9;
    unsigned int Length;
	
    Length = MaxLen;
    while ( *FormatStr && MaxLen > 1 )
d28 1
a28 1
			    *Dest++ = *v8;
d34 1
a34 1
				for ( ; *v10 && Length > 1; --Length ) // copy param into dest buffer
d40 3
a42 3
				--Length;
				if ( Length )
				    *Dest++ = *v8;
d50 1
a50 1
            --Length;
@


1.6
log
@intermediate
@
text
@d14 5
a18 5
    unsigned int Length; // esi@@1
    char *v8; // edx@@4
    signed int v9; // eax@@4
    char *v10; // edi@@8

d60 22
a81 11
    RATAB *ratb; // eax@@7
    ENTAB *entb; // edx@@19
    FLDdesc *v11; // eax@@31
    FLDdesc *v14; // eax@@39

    char *v3; // edx@@0
    char *v4; // edi@@1
    char *v22; // edi@@85
    char *v23; // esi@@85
    char *a2a; // [sp+2Ch] [bp-11CCh]@@1
    char *v35; // [sp+34h] [bp-11C4h]@@1
a82 12
    
	double testVal; // [sp+40h] [bp-11B8h]@@1
    double rangeHigh; // [sp+48h] [bp-11B0h]@@1
    double rangeLow; // [sp+50h] [bp-11A8h]@@1
    
    int DecPlaces; // ST5C_4@@101
	int RangeType; // eax@@7
    short v34; // [sp+30h] [bp-11C8h]@@1
    
	bool RangeErr; // esi@@46
    bool Required; // [sp+5Ch] [bp-119Ch]@@46

d84 9
a92 9
    char v44[32];
    char Dest[32];
    char v42[1008];
    char v45[1008];
    char v46[1008];
    char result[1008];
    char format[1008];
    char v32; // [sp+2Bh] [bp-11CDh]@@1

d97 4
a100 5
	v4  = 0;
    v35 = 0;
    v32 = 0;
    v34 = 0;
    a2a = 0;
d131 1
a131 1
	        v34 = (RangeType == 1) ? 1 : -1 ;
d137 2
a138 2
		case 5:
	        v34 = 0;
d140 1
a140 3
	        //if ( entb->entype != 2 || entb->TTno != 0x6C00 )
	        //    __assert_fail("((tf)->entype == 0x2) && tf->enun.Enop.Enoper == ((27) << 10)", "rcheck.c", 0x61u, "rcheck");
			assert(entb->entype == 0x02 && entb->TTno == 0x6C00);
d151 1
a151 1
			v34 = 0;
a177 1

d189 1
a189 1
			if (v34 > 0)			// POSITIVE
d192 1
a192 1
			else if (v34 < 0)		// NEGATIVE
d195 1
a195 1
			else	// v34 == 0		FROM <> TO type range
d198 1
a198 1
		else if ( v34 )	// pos/neg check on a string value. Try and interpret as numeric value
d201 1
a201 2

			if ( v34 > 0 )			// POSITIVE
d203 1
a203 1
			else	// v34 < 0		// NEGATIVE
d260 3
a262 3
        v22 = "";
        v23 = "";
        if ( v34 > 0 )
d265 1
a265 1
		else if ( v34 < 0 )
d273 1
a273 1
            v22 = bncbuf_0;
d283 1
a283 1
				    v22 = a2a;
d288 1
a288 1
				    v22 = v35;
d294 2
a295 2
				v22 = v46;
				v23 = v45;
d300 2
a301 2
				v22 = v46;
				v23 = v45;
d306 1
a306 1
				v22 = v46;
d308 1
a308 1
				v23 = v45;
d314 2
a315 3
		// If program had a custom message, use that in preference to the defaults above.
        if ( ratb->StringOffset )
            putmesg(result, 1001u, &strarr.StringTable[ratb->StringOffset - 1], v22, v23);
a321 1

@


1.5
log
@intermediate
@
text
@d10 1
d94 3
a96 3
    testVal = 0.0;
    rangeHigh = 0.0;
    rangeLow = 0.0;
d112 2
a113 1
	if ( SkipChk || !(xtab->Flags & 0x0400) && fld->FLDstat & 0x0004 )
d116 2
a117 1
	if ( xtab->Flags & 0x110 || !xtab->RangeID )
d134 1
a134 1
	        if ( xtab->Flags & 0x0001 )
d158 1
a158 1
			if ( !(xtab->Flags & 0x0001) )
d160 1
a160 1
			    if ( v11->FLDtype == 'C' && xtab->Flags & 0x0002 )
d169 1
a169 1
				if ( v14->FLDtype == 'C' && xtab->Flags & 0x0002 )
d187 2
a188 2
	if ( xtab->Flags & 0x0400 )
        Required = (fld->FLDstat & 0x0004) ? true : false;
d274 1
a274 1
		else if ( xtab->Flags & 0x0080 )
d330 1
a330 1
    if ( xtab->Flags & 0x10 )
@


1.4
log
@intermediate
@
text
@a62 1
    int RangeType; // eax@@7
a65 1

a67 6
    char *v25; // esi@@100
    char *v26; // eax@@100
    int DecPlaces; // ST5C_4@@101
    char *v28; // eax@@104

    char v32; // [sp+2Bh] [bp-11CDh]@@1
a68 1
    short v34; // [sp+30h] [bp-11C8h]@@1
d70 1
d76 4
d91 1
@


1.3
log
@prior to ENARR() fixes
@
text
@d141 1
a141 1
	        entb = ratb->RangeFrom ? &enarr.TableAddr[ratb->RangeFrom - 1] : 0;
d146 1
a146 1
	        a2a = evalstr(entb->enleft ? &enarr.TableAddr[entb->enleft - 1] : 0, v42);
d153 1
d156 1
a156 1
			v11 = getftf(ratb->RangeFrom ? &enarr.TableAddr[ratb->RangeFrom - 1] : 0, 1, &fld1);
d168 1
a168 1
				v14 = getftf(ratb->RangeTo ? &enarr.TableAddr[ratb->RangeTo - 1] : 0, 1, &fld1);
d203 1
a203 1
		else if ( !v34 )								// string types
d205 10
a214 1
			if ( ratb->RangeType == 6 )
a227 1
						//-------------------------------
d229 9
a237 20
				        if ( *v4 )
				        {
				            if ( *v4 == ',' )
				            {
LABEL_66:
				                if ( *v4 )
				                    ++v4;
				            }
				            else
				            {
				                while ( 1 )
				                {
				                    *v3++ = *v4++;
				                    if ( !*v4 )
				                        break;
				                    if ( *v4 == ',' )
				                        goto LABEL_66;
				                }
				            }
				        }
d239 2
a240 2
						//--------------------------------
			            if ( !v44[0] )
d242 2
a243 1
			            if ( !compare((char *)fld->FLDdata, v44) )
a252 11
		    goto LABEL_82;
		}
		else
		{
			testVal = strtod((const char *)fld->FLDdata, 0);

			if ( v34 > 0 )
				RangeErr = ( testVal <= 0.0 );
			else	// v34 < 0
				RangeErr = ( testVal >= 0.0 );
					
@


1.2
log
@intermediate vers
@
text
@d5 1
d142 3
a144 2
	        if ( entb->entype != 2 || entb->TTno != 0x6C00 )
	            __assert_fail("((tf)->entype == 0x2) && tf->enun.Enop.Enoper == ((27) << 10)", "rcheck.c", 0x61u, "rcheck");
d146 1
a146 1
	        a2a = evalstr(entb->Dest ? &enarr.TableAddr[entb->Dest - 1] : 0, v42);
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
void putmesg(char *a2, unsigned int a3, char *a4, char *a5, char *a6)
d12 1
a12 3
    char *v5; // ecx@@1
    unsigned int v6; // esi@@1
    char *v7; // edx@@1
a15 2
    char v11; // al@@12
    char v12; // al@@18
d17 2
a18 4
    v5 = a2;
    v6 = a3;
    v7 = a4;
    if ( *a4 && a3 > 1 )
d20 6
a25 7
        while ( *v7 != '$' )
        {
            v12 = *v7++;
            *v5++ = v12;
            --v6;
LABEL_19:
            if ( !*v7 || v6 <= 1 )
d27 17
a43 2
				*v5 = 0;
				return;
d45 1
a45 7
        }
        v8 = v7 + 1;
        v9 = *v8;
//------------------------------        
		if ( v9 == '$' )
		{
            *v5++ = *v8;
d47 1
a47 1
        else if ( v9 >= '$' && (unsigned int)(v9 - 49) <= 1 )
d49 2
a50 9
            if ( *v8 == '1' )
                v10 = a5;
            else
                v10 = a6;
            for ( ; *v10 && v6 > 1; --v6 )
            {
                v11 = *v10++;
                *v5++ = v11;
            }
a51 10
		else
		{
			*v5++ = '$';
			--v6;
			if ( v6 )
			    *v5++ = *v8;
		}
	    v7 = v8 + 1;
        goto LABEL_19;
//---------------------
d53 1
a53 1
    *v5 = 0;
d56 1
a56 1
int rcheck(XTAB *xtab, FLDdesc *fld, int a5)
d58 2
a59 3
    RATAB *v6; // eax@@7
    RATAB *v37;
    ENTAB *v8; // edx@@19
a66 7
    int v5; // eax@@4
    int v16; // esi@@46
    int v17; // eax@@47
    short v18; // eax@@59
    char v19; // al@@64
    double v20; // fst6@@74
    double v21; // fst7@@74
d73 1
d78 22
a99 17
    double v38; // [sp+40h] [bp-11B8h]@@1
    double v39; // [sp+48h] [bp-11B0h]@@1
    double v40; // [sp+50h] [bp-11A8h]@@1
    int Required; // [sp+5Ch] [bp-119Ch]@@46
    char v42[1008]; // [sp+60h] [bp-1198h]@@27
    FLDdesc s; // [sp+450h] [bp-DA8h]@@31
    char v44[32]; // [sp+470h] [bp-D88h]@@62
    char v45[1008]; // [sp+490h] [bp-D68h]@@100
    char v46[1008]; // [sp+880h] [bp-978h]@@100
    char Dest[32]; // [sp+C70h] [bp-588h]@@34
    char result[1008]; // [sp+C90h] [bp-568h]@@89
    char format[1008]; // [sp+1080h] [bp-178h]@@113

    v4 = 0;
    v39 = 0.0;
    v40 = 0.0;
    v38 = 0.0;
d104 18
a121 9
    if ( a5 || !(xtab->Flags & 0x0400) && (v3 = (char *)fld, fld->FLDstat & 4) )
        return 1;
    if ( xtab->Flags & 0x110 || !xtab->RangeID )
    {
        v39 = 0.0;
        v38 = 0.0;
        v40 = 0.0;
        v37 = 0;
        goto LABEL_46;
d123 50
a172 33
    v6 = &raarr.TableAddr[xtab->RangeID - 1];
    v37 = v6;
    RangeType = v6->RangeType;
//----------------------------
    if ( RangeType == 2 )
    {
        v34 = -1;
        if ( xtab->Flags & 1 )
            goto LABEL_46;
        goto LABEL_44;
    }
//----------------------------
    if ( RangeType <= 2 )
    {
        if ( RangeType != 1 )
            goto LABEL_28;		// range type <=0   go to default handler
        v34 = 1;
        if ( xtab->Flags & 1 )
            goto LABEL_46;
        goto LABEL_44;
    }
//----------------------------
    if ( RangeType == 5 )
    {
        v34 = 0;
        v8 = v37->RangeFrom ? &enarr.TableAddr[v37->RangeFrom - 1] : 0;
        if ( v8->entype != 2 || v8->TTno != 0x6C00 )
            __assert_fail("((tf)->entype == 0x2) && tf->enun.Enop.Enoper == ((27) << 10)", "rcheck.c", 0x61u, "rcheck");
        a2a = evalstr(v8->Dest ? &enarr.TableAddr[v8->Dest - 1] : 0, v42);
        goto LABEL_46;
    }
    if ( RangeType == 6 )
        goto LABEL_46;
d174 5
a178 25
//--------------------------------
LABEL_28:
// range type = default handler ??
    v34 = 0;
    v11 = getftf(v37->RangeFrom ? &enarr.TableAddr[v37->RangeFrom - 1] : 0, 1, &s);
    v3 = (char *)v11;
    v4 = (char *)v11->FLDdata;
    if ( !(xtab->Flags & 1) )
    {
        if ( v11->FLDtype == 'C' && xtab->Flags & 2 )
        {
            cdbcpystr(Dest, v4, 0);
            v40 = (double)clgetdate(Dest);
        }
        else
            v40 = clround(*(double *)v4, v11->FLDtype);
        
		v14 = getftf(v37->RangeTo ? &enarr.TableAddr[v37->RangeTo - 1] : 0, 1, &s);
        if ( v14->FLDtype == 'C' && xtab->Flags & 2 )
        {
            cdbcpystr(Dest, (char *)v14->FLDdata, 0);
            v39 = (double)clgetdate(Dest);
        }
        else
            v39 = clround(*(double *)v14->FLDdata, v14->FLDtype);
d180 3
a182 4
LABEL_44:
        v3 = (char *)fld;
        v38 = *(double *)fld->FLDdata;
    }
d184 2
a185 1
//---------------------------
d187 35
a221 50
LABEL_46:
    v16 = 0;
    Required = 0;
    if ( xtab->Flags & 0x0400 )
    {
        v3 = (char *)fld;
        v17 = 1;
        if ( !(fld->FLDstat & 4) )
            v17 = 0;
        Required = v17;
    }
    if ( !v37 )
        goto LABEL_82;
    if ( fld->FLDtype != 'C' )
    {
        if ( v34 <= 0 )
        {
            if ( v34 >= 0 )
            {
                if ( v40 > (double)v38 || v38 > (double)v39 )
					v16 = 1;
                goto LABEL_82;
            }
            goto LABEL_76;
        }
        v20 = 0.0;
        v21 = v38;
        goto LABEL_77;
    }
    if ( !v34 )
    {
        if ( v37->RangeType == 6 )
        {
            v32 = isfname((char *)fld->FLDdata);
            if ( !v32 )
                goto LABEL_82;
        }
        else
        {
            if ( !a2a )
            {
                v35 = v4;
                v16 = 1;
                do
                {
                    v3 = v44;
                    if ( *v4 )
                    {
                        if ( *v4 == ',' )
                        {
d223 34
a256 34
                            if ( *v4 )
                                ++v4;
                        }
                        else
                        {
                            while ( 1 )
                            {
                                v19 = *v4++;
                                *v3++ = v19;
                                if ( !*v4 )
                                    break;
                                if ( *v4 == ',' )
                                    goto LABEL_66;
                            }
                        }
                    }
                    *v3 = 0;
                    if ( !v44[0] )
                        break;
                    if ( !compare((char *)fld->FLDdata, v44) )
                        v16 = 0;
                }
                while ( v16 );
                goto LABEL_82;
            }
            v18 = smatch((char *)fld->FLDdata, a2a);
            if ( v18 > 0 )
                goto LABEL_82;
        }
        v16 = 1;
        goto LABEL_82;
    }
	//v38 = __strtod_internal((const char *)fld->FLDdata, 0, 0);
    v38 = strtod((const char *)fld->FLDdata, 0);
d258 6
a263 6
//-----------------------------------------------------------------
    if ( v34 > 0 )
	{
        v20 = 0.0;
        v21 = v38;
        goto LABEL_77;
a264 10
	else
	{
LABEL_76:
		v21 = 0.0;
		v20 = v38;
	}
//---------------------------------
LABEL_77:
    if ( v20 >= v21 )
        v16 = 1;
d266 2
a267 1
//----------------------------
d269 4
a272 6
    if ( !Required )
    {
        v5 = 1;
        if ( !v16 )
            return v5;
    }
d274 1
a274 1
    if ( v37 )
d309 1
a309 1
				sprintf(result, "range: %s to %s", makedate(v46, v40), makedate(v45, v39));
d315 1
a315 1
				sprintf(result, "range: %s to %s", maketime(v46, v40), maketime(v45, v39));
d323 1
a323 1
				sprintf(v46, "%.*f", DecPlaces, v40);
d325 1
a325 1
				sprintf(v45, "%.*f", DecPlaces, v39);
d330 3
a332 2
        if ( v37->StringOffset )
            putmesg(result, 1001u, &strarr.StringTable[v37->StringOffset - 1], v22, v23);
a338 1
//========================================
a339 1
LABEL_108:
d342 2
a343 1
    if ( xtab->onesc )
a345 1
//------------------------
@
