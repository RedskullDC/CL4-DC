head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.02.02.05.11.38;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2016.01.15.04.19.10;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.10.02.06.15.27;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@intermediate
@
text
@#ifndef SFLUSH_C
#define SFLUSH_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include <ctype.h>		// tolower() etc.
#include <stdlib.h>		// strtod() etc.
#include "DBdefs.h"
#include "cl4.h"
#include "lvarnames.h"			// for bit field values

short extract(RLIST **RL_Head, short a2, RLIST *Dest)
{
    RLIST *rlst; // esi@@1
    RLIST *v4; // edi@@1
    short v5; // ax@@2
    short v7;

    rlst = *RL_Head;
    v4 = Dest;
    v7 = a2 - 1;
	while ( v7 >= 0 )
    {
		v5 = rlst->Depth - 1;
        rlst->Depth = v5;
        
		cpybuf((char *)v4, (char *)&rlst[v5 + 1], 8);		// 8 = sizeof(RLIST)
        if ( !rlst->Depth )
        {
			rlst = (RLIST *)nfree(rlst, (void *)rlst->PageNo);	// PageNo can also hold an RLIST*
            *RL_Head = rlst;   // Alters caller memory directly
		}
        ++v4;
        --v7;
    }
    return v4 - Dest;	// pointer arithmetic
}

short count(RLIST *rlst)
{
    short Count; // ecx@@1

    for ( Count = 0 ; rlst ; rlst = (RLIST *)rlst->PageNo )// PageNo and Depth are dual use fields here
        Count += rlst->Depth;

    return Count;
}

short _sflush(RLIST *rlst_dest, short MaxDepth, SALLOCBUF *SAp, TDinfo *TDptr)
{
    //int v5; // eax@@6
    int v8; // ecx@@8
    short i; // si@@3
    short v6; // ax@@7
    short v7; // si@@7
    short v9; // ax@@11
    short v10; // esi@@16
    short a2; // [sp+18h] [bp-50h]@@1
    RLIST rlst_src[6]; // [sp+20h] [bp-48h]@@2

	//printf("_sflush( RLIST*: x%08X , MaxDepth: %d, TDptr: x%08X\n", rlst_dest, MaxDepth, TDptr);
	//printf("_hflush#63 SAp->field_4 = %d\n",SAp->field_4); 
    
	a2 = 0;
    if ( SAp->field_4 )
    {
        a2 = 1;
        _hflush(SAp, rlst_src, TDptr);
    }
	//printf("_hflush#70 SAp->field_4 = %d\n",SAp->field_4); 
    
	SAp->field_4 = _mvheap(SAp->DataPtr, SAp->MaxRecs2, SAp->MaxRecs1);
    SAp->MaxRecs2 = SAp->MaxRecs1;

	//printf("_hflush#75 SAp->field_4 = %d\n",SAp->field_4); 

	for ( i = SAp->field_4 / 2; i >= 0; --i )
        _siftdown(SAp->DataPtr, SAp->field_4, i, TDptr->TableDefs);

	//printf("_hflush#80 SAp->field_4 = %d\n",SAp->field_4); 

	if ( SAp->field_4 )
    {
        //v5 = a2;
        //a2 = a2 + 1;
        //_hflush(SAp, &rlst_src[v5], TDptr);
		_hflush(SAp, &rlst_src[a2++], TDptr);
    }
	
	v6 = a2 + count(SAp->RL_Head);
    v7 = v6;
    if ( v6 > 6 )
    {
        v8 = (v6 - 1) % 5;
        if ( v8 )
            v7 = v8 + 1;
        else
            v7 = 6;
    }
    v9 = a2 + extract(&SAp->RL_Head, v7 - a2, &rlst_src[a2]);

//-------------------------------------------------------

LABEL_14:
    a2 = v9;
    if ( SAp->RL_Head )
        goto LABEL_12;

    while ( MaxDepth < a2 )
    {
LABEL_12:
        _merge(rlst_src, a2, &SAp->refr, TDptr);
        a2 = 1;
        if ( SAp->RL_Head )
        {
            v9 = extract(&SAp->RL_Head, 5, &rlst_src[1]) + 1;
            goto LABEL_14;
        }
    }  
	
	for (v10 = 0 ; v10 < a2 ; v10++ )
		cpybuf((char *)&rlst_dest[v10], (char *)&rlst_src[v10], 8);		// 8 = sizeof(RLIST)

	return a2;
}

#endif
@


1.2
log
@intermediate
@
text
@d51 2
a53 1
    int v5; // eax@@6
a55 1
    int v8; // ecx@@8
a58 1
    short a2a; // [sp+18h] [bp-50h]@@12
d84 4
a87 3
        v5 = a2;
        a2 = a2 + 1;
        _hflush(SAp, &rlst_src[v5], TDptr);
d102 1
d105 1
a105 1
    a2a = v9;
d109 1
a109 1
    while ( MaxDepth < a2a )
d112 2
a113 2
        _merge(rlst_src, a2a, &SAp->refr, TDptr);
        a2a = 1;
d121 1
a121 1
	for (v10 = 0 ; v10 < a2a ; v10++ )
d124 1
a124 1
	return a2a;
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
    short v7; // [sp+18h] [bp-10h]@@1
d62 4
a65 1
    a2 = 0;
d71 13
a83 7
    SAp->field_4 = _mvheap(SAp->DataPtr, SAp->MaxRecs2, SAp->MaxRecs1);
    SAp->MaxRecs2 = SAp->MaxRecs1;              // 
                                                // 
    for ( i = SAp->field_4 / 2; i >= 0; --i )
        _siftdown(SAp->DataPtr, SAp->field_4, i, TDptr->TableDefs);// 
                                                // 
    if ( SAp->field_4 )
d88 3
a90 3
    }                                           // 
                                                // 
    v6 = a2 + count(SAp->RL_Head);
d111 1
a111 1
        _merge(rlst_src, a2a, &SAp->field_C, TDptr);
d118 3
a120 6
    }                                           // 
                                                // 
                                                // 
    v10 = 0;
	while ( a2a > v10 )
    {
a121 2
        v10++;
	}
@
