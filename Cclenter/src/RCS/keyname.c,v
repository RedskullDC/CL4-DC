head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2016.08.18.05.53.59;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.18.05.21.34;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@clean up
@
text
@#ifndef KEYNAME_C
#define KEYNAME_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include "DBdefs.h"
#include "cl4.h"

KEYTAB KeyTable[] = {
"NextWord", 0x0802,
"Undo", 0x0801,
"Toggle", 0x0800,
"Find", 0x07FF,
"Exit", 0x07FE,
"EraseEOL", 0x07FD,
"InvertCase", 0x07FC,
"PrevWord", 0x07FB,
"Abort", 0x07FA,
"Help", 0x07F8,
"Print", 0x07F9,
"Insert", 0x07D2,
"Delete", 0x07D1,
"Home", 0x07D9,
"End", 0x07D3,
"PageDown", 0x07D5,
"PageUp", 0x07DB,
"CursorUp", 0x07DA,
"CursorDown", 0x07D4,
"CursorLeft", 0x07D6,
"CursorRight", 0x07D8,
"Key5", 0x07D7,
"Interrupt", 0x07E5,
"Bell", 0x07E6,
"BackSpace", 0x07E7,
"Tab", 0x07E8,
"LineFeed", 0x07E9,
"FormFeed", 0x07EA,
"Enter", 0x07EB,
"Escape", 0x07EC,
"Refresh", 0x00AF1,
"Fk1", 0x0835,
"Fk2", 0x0836,
"Fk3", 0x0837,
"Fk4", 0x0838,
"Fk5", 0x0839,
"Fk6", 0x083A,
"Fk7", 0x083B,
"Fk8", 0x083C,
"Fk9", 0x083D,
"Fk10", 0x083E,
"Fk11", 0x083F,
"Fk12", 0x0840,
"S_Fk1", 0x0899,
"S_Fk1", 0x0899,
"S_Fk2", 0x089A,
"S_Fk3", 0x089B,
"S_Fk4", 0x089C,
"S_Fk5", 0x089D,
"S_Fk6", 0x089E,
"S_Fk7", 0x089F,
"S_Fk8", 0x08A0,
"S_Fk9", 0x08A1,
"S_Fk10", 0x08A2,
"S_Fk11", 0x08A3,
"S_Fk12", 0x08A4,
"C_Fk1", 0x08FD,
"C_Fk2", 0x08FE,
"C_Fk3", 0x08FF,
"C_Fk4", 0x0900,
"C_Fk5", 0x0901,
"C_Fk6", 0x0902,
"C_Fk7", 0x0903,
"C_Fk8", 0x0904,
"C_Fk9", 0x0905,
"C_Fk10", 0x0906,
"C_Fk11", 0x0907,
"C_Fk12", 0x0908,
"C_Delete", 0x00A8D,
"C_Insert", 0x00A8E,
"C_End", 0x00A8F,
"C_CursorDown", 0x00A90,
"C_PageDown", 0x00A91,
"C_CursorLeft", 0x00A92,
"C_Key5", 0x00A93,
"C_CursorRight", 0x00A94,
"C_Home", 0x00A95,
"C_CursorUp", 0x00A96,
"C_PageUp", 0x00A97,
"A_Fk1", 0x0961,
"A_Fk2", 0x0962,
"A_Fk3", 0x0963,
"A_Fk4", 0x0964,
"A_Fk5", 0x0965,
"A_Fk6", 0x0966,
"A_Fk7", 0x0967,
"A_Fk8", 0x0968,
"A_Fk9", 0x0969,
"A_Fk10", 0x096A,
"A_Fk11", 0x096B,
"A_Fk12", 0x096C,
"A_1", 0x09C5,
"A_2", 0x09C6,
"A_3", 0x09C7,
"A_4", 0x09C8,
"A_5", 0x09C9,
"A_6", 0x09CA,
"A_7", 0x09CB,
"A_8", 0x09CC,
"A_9", 0x09CD,
"A_0", 0x09CE,
"A_Minus", 0x09CF,
"A_Equals", 0x09D0,
"C_A", 0x00A5B,
"C_B", 0x00A5C,
"C_C", 0x00A5D,
"C_D", 0x00A5E,
"C_E", 0x00A5F,
"C_F", 0x00A60,
"C_G", 0x00A61,
"C_H", 0x00A62,
"C_I", 0x00A63,
"C_J", 0x00A64,
"C_K", 0x00A65,
"C_L", 0x00A66,
"C_M", 0x00A67,
"C_N", 0x00A68,
"C_O", 0x00A69,
"C_P", 0x00A6A,
"C_Q", 0x00A6B,
"C_R", 0x00A6C,
"C_S", 0x00A6D,
"C_T", 0x00A6E,
"C_U", 0x00A6F,
"C_V", 0x00A70,
"C_W", 0x00A71,
"C_X", 0x00A72,
"C_Y", 0x00A73,
"C_Z", 0x00A74,
"A_A", 0x00A29,
"A_B", 0x00A2A,
"A_C", 0x00A2B,
"A_D", 0x00A2C,
"A_E", 0x00A2D,
"A_F", 0x00A2E,
"A_G", 0x00A2F,
"A_H", 0x00A30,
"A_I", 0x00A31,
"A_J", 0x00A32,
"A_K", 0x00A33,
"A_L", 0x00A34,
"A_M", 0x00A35,
"A_N", 0x00A36,
"A_O", 0x00A37,
"A_P", 0x00A38,
"A_Q", 0x00A39,
"A_R", 0x00A3A,
"A_S", 0x00A3B,
"A_T", 0x00A3C,
"A_U", 0x00A3D,
"A_V", 0x00A3E,
"A_W", 0x00A3F,
"A_X", 0x00A40,
"A_Y", 0x00A41,
"A_Z", 0x00A42,
"Esc_Nul", 0x00B54,
"Esc_Space", 0x00B74,
"Esc_0", 0x00B84,
"Esc_A", 0x00B95,
"Esc_B", 0x00B96,
"Esc_C", 0x00B97,
"Esc_D", 0x00B98,
"Esc_E", 0x00B99,
"Esc_F", 0x00B9A,
"Esc_G", 0x00B9B,
"Esc_H", 0x00B9C,
"Esc_I", 0x00B9D,
"Esc_J", 0x00B9E,
"Esc_K", 0x00B9F,
"Esc_L", 0x00BA0,
"Esc_M", 0x00BA1,
"Esc_N", 0x00BA2,
"Esc_O", 0x00BA3,
"Esc_P", 0x00BA4,
"Esc_Q", 0x00BA5,
"Esc_R", 0x00BA6,
"Esc_S", 0x00BA7,
"Esc_T", 0x00BA8,
"Esc_U", 0x00BA9,
"Esc_V", 0x00BAA,
"Esc_W", 0x00BAB,
"Esc_X", 0x00BAC,
"Esc_Y", 0x00BAD,
"Esc_Z", 0x00BAE,
"Esc_a", 0x00BB5,
"Esc_b", 0x00BB6,
"Esc_c", 0x00BB7,
"Esc_d", 0x00BB8,
"Esc_e", 0x00BB9,
"Esc_f", 0x00BBA,
"Esc_g", 0x00BBB,
"Esc_h", 0x00BBC,
"Esc_i", 0x00BBD,
"Esc_j", 0x00BBE,
"Esc_k", 0x00BBF,
"Esc_l", 0x00BC0,
"Esc_m", 0x00BC1,
"Esc_n", 0x00BC2,
"Esc_o", 0x00BC3,
"Esc_p", 0x00BC4,
"Esc_q", 0x00BC5,
"Esc_r", 0x00BC6,
"Esc_s", 0x00BC7,
"Esc_t", 0x00BC8,
"Esc_u", 0x00BC9,
"Esc_v", 0x00BCA,
"Esc_w", 0x00BCB,
"Esc_x", 0x00BCC,
"Esc_y", 0x00BCD,
"Esc_z", 0x00BCE,
"S_Tab", 0x07ED,
"Null", 0x07D0,
"Junk", 0x00AF2
};

int KeyToNumber(char *KeyName)
{
    short KeyNo; // esi@@1

	for (KeyNo = 0; KeyNo <= 212 ; KeyNo++)
	{
          if ( !strcmp(KeyTable[KeyNo].KeyName, KeyName) )
               return KeyTable[KeyNo].KeyNo;
	}
	return 0;					// not found
}

char *KeyToName(short a1)
{
    short KeyNo; // eax@@1

	for (KeyNo = 0; KeyNo <= 212 ; KeyNo++)
	{
        if ( a1 == KeyTable[KeyNo].KeyNo )
            return KeyTable[KeyNo].KeyName;
	}
    sprintf(errorbuf_0, "No such keynumber %d", a1);
    return errorbuf_0;
}

char *Key_GetEscMacroName(short a1)
{
    //char *v2;
	int v1;
	
    v1 = Key_Lookup(a1 + 2900);
    //v2 = 0;
    //if ( v1 >= 0 )
    //    v2 = KeyToName(v1);
    //return v2;
	return v1 >= 0 ? KeyToName(v1) : 0 ;
}


#endif
@


1.1
log
@Initial revision
@
text
@d227 1
a227 1
     unsigned int KeyNo; // esi@@1
d229 2
a230 3
     KeyNo = 0;
     do
     {
d233 2
a234 4
          ++KeyNo;
     }
     while ( KeyNo <= 212 );
     return 0;
d239 1
a239 1
    unsigned int KeyNo; // eax@@1
d241 2
a242 3
    KeyNo = 0;
    do
    {
d245 1
a245 4
        ++KeyNo;
    }
    while ( KeyNo <= 212 );

d252 3
a254 3
    int v1; // eax@@1
    char *v2; // edx@@1

d256 5
a260 4
    v2 = 0;
    if ( v1 >= 0 )
        v2 = KeyToName(v1);
    return v2;
@
