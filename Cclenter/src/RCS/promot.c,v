head	1.2;
access;
symbols;
locks
	leslie:1.2; strict;
comment	@ * @;


1.2
date	2015.04.14.05.32.24;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.11.20.05.39.53;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.2
log
@intermediate
@
text
@#ifndef PROMOTE_C
#define PROMOTE_C

#include <sys/param.h>                 // for MIN/MAX
#include "DBdefs.h"
#include "cl4.h"

short _promote(char *a1, NODE *Node, NODE *a3, short a4, TDinfo *TDptr)
{
	//size_t v5;
	NODE_1 node1;

    //printf("_promote(a1: x%08X, Node: x%08X, Node2: x%08X, a4: x%04X, TDptr = x%08X)\n",a1,Node,a3,a4,TDptr);

	if ( Node->PageType & 2 )
	{
		cpybuf(&node1.Data, &Node->NODE1ptr[Node->NumEntries - 1].Data, 8u);
		delpage(Node, Node->NumEntries - 1);
	}
	else
	{
		node1.Data = a3->NODE1ptr[0].Data;
		if ( a4 )
			node1.Size = _diffkey(Node->NODE1ptr[Node->NumEntries - 1].Data, node1.Data, TDptr->TableDefs);
		else
			node1.Size = (short)TDptr->TDKeySize;
	}

	return cpybuf(a1, node1.Data, MIN(node1.Size,TDptr->TDKeySize));
}

#endif
@


1.1
log
@Initial revision
@
text
@d4 1
d10 1
a10 1
	size_t v5;
d28 2
a29 4
	v5 = TDptr->TDKeySize;
	if ( v5 > node1.Size )
		v5 = node1.Size;
	return cpybuf(a1, node1.Data, v5);
@
