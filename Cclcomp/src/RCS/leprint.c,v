head	1.9;
access;
symbols;
locks
	leslie:1.9; strict;
comment	@ * @;


1.9
date	2020.01.29.13.06.51;	author leslie;	state Exp;
branches;
next	1.8;

1.8
date	2016.07.29.04.46.40;	author leslie;	state Exp;
branches;
next	1.7;

1.7
date	2016.06.24.06.45.41;	author leslie;	state Exp;
branches;
next	1.6;

1.6
date	2016.05.24.03.59.21;	author leslie;	state Exp;
branches;
next	1.5;

1.5
date	2016.01.19.02.55.49;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2015.06.19.04.26.41;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.14.05.03.51;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.09.23.03.52.57;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.09.03.31.41;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.9
log
@prior to X64 compat
@
text
@#ifndef LEPRINT_C
#define LEPRINT_C

#include <stdlib.h>         // for strtod(), strtol()
#include <assert.h>
#include "DBdefs.h"
#include "cl4.h"

short leprint(void)
{
    ENTAB	*entb;
    PRTAB	*v17;
    PRTAB	*pr;
    FLDdesc *fld;

    short	ExpNo;
	register short PRno;
	int		v4;
	int		v7;
	int		fno;
    int		TDno;
	short	ENTno;
	short	a1;
	unsigned short v25;
	bool	isVariable;
	
	if ( symbol == 930 )			// <CR>. Error, print needs at least 1 arg
    {
		loaderr(7, sym);			// "unexpected end of line"
        return 0;
	}
    a1 = getprmem();
    allprpt(a1, &pr);

	if ( symbol == 930 )			// should be unreachable, tested for 930 above
    {
		dallprpt(&pr);
        return a1;
	}

	while ( symbol )
    {
		isVariable	= false;
        TDno		= 0;

		switch (symbol)
		{
		case 2200:					// 2200 = integer literal
		case 2210:					// 2210 = floating point literal
		case 2220:					// 2220 = string literal eg. 'Simple String'
            if ( loadsym(sym) == 1340 )				// 1340 = All reserved system string names are 1340
            {
				pr->ReservedFlags = loadresv(sym);	// returns a bitmask
                symbol = getsym();
			}
            else
            {
				ExpNo = loadexp(0, 1);
                if ( !ExpNo )
				{
					dallprpt(&pr);	// error_exit
					return 0;
				}
				pr->VAR_ENTno = ExpNo;
			}
			break;

		case 2230:					// 2230 = Variable or Table Name
			if ( nxtch() != '.' )	// if a ".", then we expect a fieldname to follow
		    {
				v4 = findtd(sym, -1);
	            if ( v4 > 0 )		// This is a table variable
	            {
					TDno = v4;		// We want to display *all* fields in the record
	                symbol = getsym();
	                break;
				}
			}
	        ExpNo = loadexp(0, 1);	// Normal variable, or single Table field here
	        if ( !ExpNo )
			{
				dallprpt(&pr);	// error_exit
				return 0;
			}
			pr->VAR_ENTno = ExpNo;
	        pr->WIDTH_FLAGS = 0x0400u;				// normal variable flag
	        isVariable = true;						// examine later for Datefield checking
			break;
		default:
			switch ( symbol )
            {
				case 150:							// "cl" clear line
					pr->ReservedFlags = 0x0001;
                    break;
				case 520:							// "ff"  <form feed>
					pr->ReservedFlags = 0x0002;
                    break;
				case 770:							// "nl"  <newline>
					pr->ReservedFlags = 0x0004;
                    break;
				case 250:							// "cr"
					pr->ReservedFlags = 0x1000;
                    break;
				case 405:							// "eof"   <end of file>?
					pr->ReservedFlags = 0x2000;
                    break;
				default:
					ExpNo = loadexp(0, 1);			// loads the next symbol for us
                    if ( !ExpNo )
					{
						dallprpt(&pr);				// error_exit
						return 0;
					}
					pr->VAR_ENTno = ExpNo;
                    break;
			}
            if ( pr->ReservedFlags )
                symbol = getsym();
			break;
		}

// ==== look for any width, justification specifiers ====
		if ( symbol == 180 )				// "," comma
        {
			v7 = nxtch();
			if ( v7 == ' ' || v7 == '\n' )
			{
				pr->WIDTH_FLAGS |= 0x800u;
				symbol = getsym();
			}
			else
			{
				symbol = getsym();
				if ( syml == 1 )
				{
					switch (sym[0])
					{
					case 'c':			// centred
						symbol = 170;
						break;
					case 'l':			// left-aligned
					case '^':
						symbol = 780;
						break;
					case 'r':			// right-aligned
					case '$':								// $ = 340, rest are fudged
						symbol = 340;
						break;
					}
				}

				if ( symbol == 780 || symbol == 170 || symbol == 340 ) // field justification
				{
					if ( !TDno )					// normal variable, already set above
						pr->WIDTH_FLAGS = 0x0400u;
					   
					if ( symbol == 170 )			// centred
						pr->WIDTH_FLAGS |= 0x1000;
					
					else if ( symbol == 340 )		// right-aligned
						pr->WIDTH_FLAGS |= 0x2000;
					   
					else if ( symbol == 780 )       // left-aligned
						pr->WIDTH_FLAGS |= 0x4000;
					   
					symbol = getsym();
				}
				else if ( symbol == 2200 || symbol == 2210)					// Integer or FP Literal
				{			// we are looking for a 1-3 digit number at this point
					pr->WIDTH_FLAGS = strtol(sym, 0, 10);
					symbol = getsym();
				}
				else if ( symbol != 930 )			// not <CR>
				{
					ExpNo = loadexp(0, 1);
					if ( !ExpNo )
					{
						dallprpt(&pr);	// error_exit
						return 0;
					}
					pr->WIDTH_ENTno = ExpNo;		// Width expression trumps flags
					pr->WIDTH_FLAGS = 0;
				}
			}
		}
		else	// no comma found, use default width
		{
			pr->WIDTH_FLAGS |= 0x800u;				// use default width flag?
		}

//================================

		if ( isVariable && yflag )					// yflag == command line option to "display widths of 'D' type input/output fields"
			prdatefield(pr->VAR_ENTno, 0, pr);
		
		if ( TDno )			// Are we looking at a table record? True if we want to print all records in the table 
        {
			v25 = pr->WIDTH_FLAGS & 0x83FF;			// 1000 0011 1111 1111
            fld = ttab[TDno].TTfields;
            fno = 0;
            while ( fld->FLDelemID )
            {
				ENTno	= getenmem();				// get new expression to describe this
				entb	= ENARR(ENTno);
				entb->TTno		= TDno;				// Tableno
                entb->RecNo		= fno;				// fieldno
                entb->entype	= 1;				// variable/field in table.

				pr->VAR_ENTno = ENTno;
				pr->WIDTH_FLAGS &= 0x7C00u;			//  0111 1100 0000 0000
                if ( v25 )
					pr->WIDTH_FLAGS |= v25;
				else
					pr->WIDTH_FLAGS |= 0x0400;		// normal variable

                if ( fld[1].FLDelemID )				// Is there a field that follows us?
                {
					PRno = getprmem();
					pr->NextPR = PRno;
                    v17 = PRARR(pr->NextPR);
					assert(v17);
                    v17->WIDTH_FLAGS = pr->WIDTH_FLAGS;
                    pr = v17;
				}
                fno++;
                fld++;
			}
		}

        if ( symbol == 930 )		// <CR> we are done.
		{
			dallprpt(&pr);
	        return a1;				// exit success
		}
		else						// not a <CR>. allocate a new PRTAB, and go around again!
		{
			PRno = getprmem();			//*** getprmem() can change pr ***
			pr->NextPR = PRno;
            v17 = PRARR(pr->NextPR);
			pr = v17;
			assert(v17);
		}
        
	}	// end while (symbol)
    dallprpt(&pr);
    return 0;
}

#endif
@


1.8
log
@tidy-up
@
text
@d203 5
a207 5
				ENTno = getenmem();					// get new expression to describe this
				entb = ENARR(ENTno);
				entb->TTno	= TDno;					// Tableno
                entb->RecNo	= fno;					// fieldno
                entb->entype = 1;					// variable/field in table.
@


1.7
log
@tidyup
@
text
@d27 1
a27 1
	if ( symbol == 930 )	// <CR>. Error, print needs at least 1 arg
d29 1
a29 1
		loaderr(7, sym);	// "unexpected end of line"
d35 1
a35 1
	if ( symbol == 930 )	// should be unreachable, tested for 930 above
d51 1
a51 1
            if ( loadsym(sym) == 1340 )                // 1340 = reserved system string name
d53 1
a53 1
				pr->ReservedFlags = loadresv(sym);		// returns a bitmask
@


1.6
log
@intermediate
@
text
@d43 2
a44 2
		isVariable = false;
        TDno = 0;
d48 3
a50 3
		case 2200:		// 2200 = integer literal
		case 2210:		// 2210 = floating point literal
		case 2220:		// 2220 = string literal eg. 'Simple String'
d53 1
a53 1
				pr->ReservedFlags = loadresv(sym);	// returns a bitmask
d68 1
a68 1
		case 2230:		// 2230 = Variable or Table Name
d86 2
a87 2
	        pr->WIDTH_FLAGS = 0x0400u;			// normal variable flag
	        isVariable = true;					// examine later for Datefield checking
d92 1
a92 1
				case 150:						// "cl" clear line
d95 1
a95 1
				case 520:						// "ff"  <form feed>
d98 1
a98 1
				case 770:						// "nl"  <newline>
d101 2
a102 2
				case 250:						// "cr"
					pr->ReservedFlags = 0x1000u;
d104 2
a105 2
				case 405:						// "eof"   <end of file>?
					pr->ReservedFlags = 0x2000u;
d108 1
a108 1
					ExpNo = loadexp(0, 1);		// loads the next symbol for us
d111 1
a111 1
						dallprpt(&pr);			// error_exit
d173 1
a173 1
				else if ( symbol != 930 )
d181 1
a181 1
					pr->WIDTH_ENTno = ExpNo;
d188 1
a188 1
			pr->WIDTH_FLAGS |= 0x800u;		// use default width flag?
d193 1
a193 1
		if ( isVariable && yflag )				// yflag == command line option to "display widths of 'D' type input/output fields"
d198 1
a198 1
			v25 = pr->WIDTH_FLAGS & 0x83FF;		// 1000 0011 1111 1111
d214 1
a214 1
					pr->WIDTH_FLAGS |= 0x0400;
@


1.5
log
@intermediate
@
text
@a17 1
    short	v2;
d20 2
a21 1
	int		v12;
a22 2
	bool	isVariable;
    int		TDno;
d25 1
d51 1
a51 2
			v2 = loadsym(sym);
            if ( v2 == 1340 )                // 1340 = reserved system string name
d92 1
a92 1
				case 150:                   // "cl" clear line
d95 1
a95 1
				case 520:                   // "ff"  <form feed>
d98 1
a98 1
				case 770:                   // "nl"  <newline>
d101 1
a101 1
				case 250:                   // "cr"
d104 1
a104 1
				case 405:                   // "eof"   <end of file>?
d108 1
a108 1
					ExpNo = loadexp(0, 1);	// loads the next symbol for us
d111 1
a111 1
						dallprpt(&pr);	// error_exit
d200 1
a200 1
            v12 = 0;
d203 1
a203 1
				ENTno = getenmem();
d205 3
a207 3
				entb->TTno	= TDno;
                entb->RecNo	= v12;
                entb->entype = 1;
d225 1
a225 1
                v12++;
@


1.4
log
@intermediate
@
text
@d11 4
a14 4
    ENTAB *entb; // eax@@81
    PRTAB *v17; // edx@@88
    FLDdesc *fld; // esi@@80
    PRTAB* pr; // [sp+28h] [bp-10h]@@3
d16 1
a16 1
    short ExpNo; // cx@@16
d18 10
a27 10
    short v2; // eax@@14
    int v4; // eax@@19
    int v7; // eax@@38
    int v12; // edi@@80
    short ENTno; // ecx@@81
    bool isVariable;
    int TDno; // [sp+1Ch] [bp-1Ch]@@7
    short a1; // [sp+20h] [bp-18h]@@5
    unsigned short v25; // [sp+24h] [bp-14h]@@80

a45 1
//printf("leprint Symbol = %d, [%s]\n",symbol, sym);
d76 1
a76 1
					TDno = v4;
d81 1
a81 1
	        ExpNo = loadexp(0, 1);
d124 2
a125 8

		if ( symbol != 180 )				// "," comma
        {
			pr->WIDTH_FLAGS |= 0x800u;		// use default width flag?
            goto LABEL_76;
		}
        v7 = nxtch();
        if ( v7 == ' ' || v7 == '\n' )
d127 2
a128 8
			pr->WIDTH_FLAGS |= 0x800u;
            symbol = getsym();
            goto LABEL_76;
		}
        symbol = getsym();
        if ( syml == 1 )
        {
			switch (sym[0])
d130 2
a131 11
			case 'c':			// centred
				symbol = 170;
				break;
			case 'l':			// left-aligned
			case '^':
				symbol = 780;
				break;
			case 'r':			// right-aligned
			case '$':
				symbol = 340;
				break;
d133 20
a152 1
		}
d154 33
a186 18
//printf("leprint#157 Symbol = %d, [%s]\n",symbol, sym);
		
		if ( symbol == 780 || symbol == 170 || symbol == 340 ) // field justification
        {
			if ( !TDno )					// normal variable, already set above
				pr->WIDTH_FLAGS = 0x0400u;
               
			if ( symbol == 170 )			// centred
				pr->WIDTH_FLAGS |= 0x1000;
			
			else if ( symbol == 340 )		// right-aligned
				pr->WIDTH_FLAGS |= 0x2000;
               
			else if ( symbol == 780 )       // left-aligned
				pr->WIDTH_FLAGS |= 0x4000;
               
			symbol = getsym();
            goto LABEL_76;
d188 1
a188 3

		// we are looking for a 1-3 digit number at this point
		if ( symbol == 2200 || symbol == 2210)
d190 1
a190 3
			pr->WIDTH_FLAGS = strtol(sym, 0, 10);
	        symbol = getsym();
			goto LABEL_76;
a191 2
		if ( symbol == 930 )	// shouldn't be reachable, test for '\n' above
			goto LABEL_76;
d193 1
a193 8
		ExpNo = loadexp(0, 1);
        if ( !ExpNo )
		{
			dallprpt(&pr);	// error_exit
			return 0;
		}
		pr->WIDTH_ENTno = ExpNo;
        pr->WIDTH_FLAGS = 0;
d195 1
a195 3
//================================
LABEL_76:
        if ( isVariable && yflag )				// yflag == command line option to "display widths of 'D' type input/output fields"
d218 1
a218 1
                if ( fld[1].FLDelemID )
a219 2
					//*** getprmem() can change pr ***
					//pr->NextPR = getprmem();
a223 3
					//assert(v17 != ((void *)0));
					//if ( !v17 )
					//	__assert_fail("pf != ((void *)0)", "leprint.c", 245, "leprint");
d227 2
a228 2
                ++v12;
                ++fld;
d232 8
a239 5
		if ( symbol != 930 )
        {
			//*** getprmem() can change pr ***
			//pr->NextPR = getprmem();
			PRno = getprmem();
a243 2
            //if ( !v17 )
			//	__assert_fail("pf != ((void *)0)", "leprint.c", 255, "leprint");
d246 1
a246 6
        if ( symbol == 930 )
		{
			dallprpt(&pr);
	        return a1;
		}
	}
@


1.3
log
@intermediate
@
text
@d5 1
d11 1
a11 1
    ENTAB *v14; // eax@@81
d14 1
a15 2
    //short *v1; // edx@@5
     
d22 1
a22 1
    short v13; // ecx@@81
a26 1
    PRTAB* pr; // [sp+28h] [bp-10h]@@3
d50 1
a51 1
		case 2200:		// 2200 = integer literal
d56 1
a56 1
				pr->ReservedFlags = loadresv(sym);
a124 2
//--------------
//printf("leprint#125 Symbol = %d, [%s]\n",symbol, sym);
d201 1
a201 1
		if ( TDno )	// True if we want to print all records in the table 
d208 5
a212 5
				v13 = getenmem();
				v14 = v13 ? &enarr.TableAddr[v13 - 1] : 0;
				v14->TTno	= TDno;
                v14->RecNo	= v12;
                v14->entype = 1;
d214 1
a214 1
				pr->VAR_ENTno = v13;
d227 5
a231 3
                    v17 = pr->NextPR ? &prarr.TableAddr[pr->NextPR - 1] : 0;
                    if ( !v17 )
						__assert_fail("pf != ((void *)0)", "leprint.c", 245, "leprint");
d246 5
a250 4
            v17 = pr->NextPR ? &prarr.TableAddr[pr->NextPR - 1] : 0;
            pr = v17;
            if ( !v17 )
				__assert_fail("pf != ((void *)0)", "leprint.c", 255, "leprint");
@


1.2
log
@prior to fixing PRTAB field names
@
text
@d23 1
a23 2
    short v16; // ax@@84
    signed int v22; // [sp+18h] [bp-20h]@@7
d26 1
a26 1
    int v25; // [sp+24h] [bp-14h]@@80
d45 1
a45 1
		v22 = 0;
d57 1
a57 1
				pr->field_6 = loadresv(sym);
d68 1
a68 1
				pr->field_0 = ExpNo;
d89 3
a91 3
			pr->field_0 = ExpNo;
	        pr->field_4 = 0x0400u;	// normal variable flag
	        v22 = 1;
a95 3
				case 770:                   // "nl"  <newline>
					pr->field_6 = 0x0004;
                    break;
d97 1
a97 1
					pr->field_6 = 0x0001;
d100 4
a103 1
					pr->field_6 = 0x0002;
d106 1
a106 1
					pr->field_6 = 0x1000u;
d109 1
a109 1
					pr->field_6 = 0x2000u;
d112 1
a112 1
					ExpNo = loadexp(0, 1);
d118 1
a118 1
					pr->field_0 = ExpNo;
d121 1
a121 1
            if ( pr->field_6 )
d129 1
a129 1
		if ( symbol != 180 )                  // "," comma
d131 1
a131 1
			pr->field_4 |= 0x800u;
d137 1
a137 1
			pr->field_4 |= 0x800u;
d165 1
a165 1
				pr->field_4 = 0x400u;
d167 5
a171 5
			if ( symbol == 340 )			// right-aligned
				pr->field_4 |= 0x2000;
               
			else if ( symbol == 170 )       // centred
				pr->field_4 |= 0x1000;
d174 1
a174 1
				pr->field_4 |= 0x4000;
d183 1
a183 2
			//pr->field_4 = __strtol_internal(sym, 0, 10, 0);
			pr->field_4 = strtol(sym, 0, 10);
d196 2
a197 2
		pr->field_2 = ExpNo;
        pr->field_4 = 0;
d201 3
a203 2
        if ( v22 && yflag )
			prdatefield(pr->field_0, 0, pr);
d206 1
a206 1
			v25 = pr->field_4 & 0xFFFF83FF;
d216 3
a218 3
                pr->field_0 = v13;
                
				pr->field_4 &= 0x7C00u;
d220 1
a220 1
					v16 = v25 | pr->field_4;
d222 1
a222 2
					v16 = pr->field_4 | 0x0400;
                pr->field_4 = v16;
d233 1
a233 1
                    v17->field_4 = pr->field_4;
@


1.1
log
@Initial revision
@
text
@d4 4
d14 1
a14 1
    short *v1; // edx@@5
d37 2
a38 2
    v1 = &symbol;
    if ( symbol == 930 )	// should be unreachable, tested for 930 above
d43 2
a44 1
    while ( *v1 )
d48 1
a48 1
printf("leprint Symbol = %d, [%s]\n",symbol, sym);
d52 2
a53 2
		case 2210:		// ????
		case 2200:		// 2200 = numeric constant eg 
d184 2
a185 1
			pr->field_4 = __strtol_internal(sym, 0, 10, 0);
d213 1
a213 1
				v14 = v13 ?(ENTAB *)&enarr.TableAddr[12 * (v13 - 1)] : 0;
d232 1
a232 1
                    v17 = (PRTAB *)(pr->NextPR ? &prarr.TableAddr[10 * (pr->NextPR - 1)] : 0);
d249 1
a249 1
            v17 = (PRTAB *)(pr->NextPR ? &prarr.TableAddr[10 * (pr->NextPR - 1)] : 0);
d254 1
a254 1
        v1 = &symbol;
@
