head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2016.07.27.02.08.31;	author leslie;	state Exp;
branches;
next	;


desc
@use common code
@


1.1
log
@Initial revision
@
text
@#ifndef DBCLOSE_C
#define DBCLOSE_C

#include "DBdefs.h"
#include "cl4.h"

int _cldbclose(int DBno)
{
	DBinfo *DBptr;
	int PID;
	DBinfo *NextDB;

	DBptr = _rmdb(DBno);
	while ( DBptr )
	{
		PID = getpid();
		_ulock(DBptr, PID);
		_shuttd(DBptr);
		_rmlock(DBptr, DBptr->PageList1);
		
		if ( DBptr->PageList1[0] )
			_mkfree(DBptr, DBptr->PageList1);
		if ( DBptr->SpareList[0] )
			_mkfree(DBptr, DBptr->SpareList);
		
		_relshare(DBptr);
		close(DBptr->DBfilehandle);
		NextDB = DBptr->DBnextDB;	// Save nextDB value before freeing DBptr
		nfree(DBptr->DBname, 0);
		nfree(DBptr, 0);
		DBptr = NextDB;
	}
	return DBno;
}


int cldbclose(int DBno)
{
  //return xenter(cldbclose, DBno);
  return _cldbclose(DBno);
}

// appears uncalled in libcl4 (is used in clenter)
void cldbcloseall()
{
	int DBno; // esi@@1

	DBno = 0;
	do
	{
		if ( _chkdb(DBno) )
			cldbclose(DBno);
		DBno++;
	}
	while ( DBno <= 254 );
}

#endif
@
