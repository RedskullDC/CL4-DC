head	1.5;
access;
symbols;
locks
	leslie:1.5; strict;
comment	@ * @;


1.5
date	2015.10.26.22.10.14;	author leslie;	state Exp;
branches;
next	1.4;

1.4
date	2015.06.20.12.55.12;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.15.05.50.48;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.09.15.04.17.55;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.09.03.32.05;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.5
log
@intermediate
@
text
@#ifndef LEREAD_C
#define LEREAD_C

short leread(int InOut)
{
    ENTAB *v13;
	PRTAB *v14;
	PRTAB *prtab;
    SFTAB *sftab;
    FLDdesc *fld;
	register short PRno;
    short v8;
	short ENTno;
    short v17;
	
    int v20;
    bool cls_tbls;
    short v22;
    int TDno;
    int FLDno;

    v20 = symbol;
    v22 = getsfmem();
    allsfpt(v22, &sftab);
    symbol = getsym();							//    2230            2220
    if ( symbol != 2230 && symbol != 2220 )		// variable name or string literal 
    {
		if ( symbol == 930 )
			loaderr(50, sym);					// "missing file/pipe name"
		else
			loaderr(51, sym);					// "invalid file/pipe name"
        dallsfpt(&sftab);
        return 0;
	}
	if (symbol == 2220 && !strncmp(sym,"tables",7))	// look for the 'tables' specifier in case this 
	{												// is a "CLOSE" instruction
		cls_tbls = true;
	}
	else
	{
		cls_tbls = false;
        v8 = loadexp(0, 1);
        if ( !v8 )
			return 0;			// error_exit
		sftab->AliasEnt = v8;
	}

//-------------------------------     
// "read" handler

	if ( v20 == 540 )                          // read
    {
		if ( symbol != 930 )
        {
			sftab->PRTno = getprmem();
            allprpt(sftab->PRTno, &prtab);
            if ( symbol != 930 )
            {
				while ( symbol == 2230 )      // while table/field name
                {
					if ( nxtch() == '.' || (TDno = findtd(sym, -1), TDno <= 0) ) // read single field or variable
                    {
						ENTno = getenmem();
						if ( !gettfexp(ENTno) )
						{                    
							dallsfpt(&sftab);
							dallprpt(&prtab);
							return 0;
						}
						prtab->VAR_ENTno = ENTno;
					}
                    else                   // read all fields in a table
                    {
						fld = ttab[TDno].TTfields;
                        for ( FLDno = 0; fld->FLDelemID; ++fld )
                        {
							ENTno = getenmem();
							v13 = ENARR(ENTno);
							v13->TTno = TDno;
                            v13->RecNo = FLDno;
                            v13->entype = 1;
                            prtab->VAR_ENTno = ENTno;
                            if ( fld[1].FLDelemID )			// NULL when we get to end of fields
                            {
								PRno = getprmem();			//*** getprmem() can change prtab! ***
								prtab->NextPR = PRno;
								v14 = PRARR(prtab->NextPR);
								prtab = v14;
							}
                            FLDno++;
						}
                        symbol = getsym();
					}
                    if ( symbol != 930 )
                    {
						PRno = getprmem();					//*** getprmem() can change prtab! ***
						prtab->NextPR = PRno;
						v14 = PRARR(prtab->NextPR);
						prtab = v14;
					}
                    if ( symbol == 930 )
					{
						dallprpt(&prtab);
			            sftab->cmd_flags = 1;
						goto LABEL_56;
					}
				}
                loaderr(56, sym);           // "invalid in read statement"
                dallsfpt(&sftab);
                dallprpt(&prtab);
                return 0;
			}
            dallprpt(&prtab);
            sftab->cmd_flags = 1;
            goto LABEL_56;
		}
        loaderr(7, sym);                    // "unexpected end of line"
        return 0;
	}
//--------------------
	
	else if ( v20 == 440 )					// "close"
    {
        if ( cls_tbls )
			sftab->cmd_flags = 0x20u;					// close 'tables'
		else
			sftab->cmd_flags = 0x08u;					// close file|pipe descriptor
        symbol = getsym();
	}
    else if ( v20 == 560 || v20 == 1230 )		// 560 = "write", 1230 = ???
    {
		if ( symbol == 930 )
        {
			loaderr(7, sym);				// "unexpected end of line"
			return 0;
		}
		sftab->cmd_flags = 0x02u;
        v17 = leprint();					// presumably calls getsym() prior to exit
        if ( !v17 )
        {
			dallsfpt(&sftab);				// 
            return 0;
		}
        sftab->PRTno = v17;
	}

LABEL_56:
    if ( InOut )
		sftab->cmd_flags |= 0x0040u;
	dallsfpt(&sftab);
    return v22;
}

#endif
@


1.4
log
@intermediate
@
text
@d6 15
a20 21
    ENTAB *v13; // eax@@27
    PRTAB *v14; // eax@@31
    FLDdesc *fld; // edi@@26
    char *v5; // esi@@8
    char *v7; // edi@@8
 	register short PRno;
    unsigned char v3; // cf@@7
    unsigned char v4; // zf@@7
    signed int v6; // ecx@@8
    short v8; // si@@12
    short ENTno;
    short v17; // dx@@47
    short v18; // dx@@50

    signed int v20; // [sp+8h] [bp-30h]@@1
    signed int cls_tbls; // [sp+14h] [bp-24h]@@11
    short v22; // [sp+18h] [bp-20h]@@1
    int TDno; // [sp+1Ch] [bp-1Ch]@@25
    int i; // [sp+20h] [bp-18h]@@26
    PRTAB *prtab; // [sp+24h] [bp-14h]@@22
    SFTAB *sftab; // [sp+28h] [bp-10h]@@1
d22 1
a22 1
    v20 = (unsigned short)symbol;
d37 1
a37 1
		cls_tbls = 1;
d41 1
a41 1
		cls_tbls = 0;
d45 1
a45 1
		sftab->field_4 = v8;
d55 2
a56 2
			sftab->field_2 = getprmem();
            allprpt(sftab->field_2, &prtab);
d59 1
a59 1
				while ( symbol == 2230 )      // while string literal
d61 1
a61 1
					if ( nxtch() == '.' || (TDno = findtd(sym, -1), TDno <= 0) )// read single field
d75 1
a75 1
                        for ( i = 0; fld->FLDelemID; ++fld )
d80 1
a80 1
                            v13->RecNo = i;
d83 1
a83 1
                            if ( fld[1].FLDelemID )
d85 1
a85 3
								//*** getprmem() can change prtab! ***
								//prtab->NextPR = getprmem();
								PRno = getprmem();
d90 1
a90 1
                            ++i;
d96 1
a96 3
						//*** getprmem() can change prtab! ***
						//prtab->NextPR = getprmem();
						PRno = getprmem();
d104 1
a104 1
			            sftab->field_0 = 1;
d114 1
a114 1
            sftab->field_0 = 1;
d122 1
a122 1
	else if ( v20 == 440 )                // "close"
d124 4
a127 4
		v18 = 0x20u;					// close 'tables'
        if ( !cls_tbls )
			v18 = 0x08u;				// close file|pipe descriptor
		sftab->field_0 = v18;
d137 1
a137 1
		sftab->field_0 = 0x02u;
d144 1
a144 1
        sftab->field_2 = v17;
d149 1
a149 1
		sftab->field_0 |= 0x0040u;
@


1.3
log
@intermediate
@
text
@d84 1
a84 1
							v13 = ENTno ? &enarr.TableAddr[ENTno - 1] : 0;
d95 1
a95 1
								v14 = prtab->NextPR ? &prarr.TableAddr[prtab->NextPR - 1] : 0 ;
d108 1
a108 1
						v14 = prtab->NextPR ? &prarr.TableAddr[prtab->NextPR - 1] : 0;
d136 1
a136 1
			v18 = 0x08u;				// close file|pipe descreptor
d147 1
a147 1
		sftab->field_0 = 2;
@


1.2
log
@removed unsightly 'tables' strncmp block
@
text
@d6 5
a13 1
    char *v5; // esi@@8
a14 1
    char *v7; // edi@@8
d16 1
a16 5
    short ENno; // esi@@27
    FLDdesc *fld; // edi@@26
    ENTAB *v13; // eax@@27
    PRTAB *v14; // eax@@31
    short v15; // si@@36
d19 1
a42 1
		printf("match on tables\n");
a46 1
		printf("no match on tables\n");
a52 29
    /*v3 = (unsigned short)symbol < 2220u;
    v4 = symbol == 2220;
    if ( symbol != 2220 )
		goto LABEL_62;
	v5 = sym;
    v6 = 7;
    v7 = "tables";                             // look for the 'tables' specifier in case this is a "CLOSE" instruction
    do
    {
		if ( !v6 )
			break;
		v3 = *v5 < (unsigned char)*v7;
        v4 = *v5++ == *v7++;
        --v6;
	}
    while ( v4 );

    cls_tbls = 1;
    if ( !(v3 | v4) != v3 )
    {
LABEL_62:
		printf("LABEL_62\n");
		cls_tbls = 0;
        v8 = loadexp(0, 1);
        if ( !v8 )
			return 0;			// error_exit
		sftab->field_4 = v8;
	}
	*/
d69 2
a70 2
						v15 = getenmem();
						if ( !gettfexp(v15) )
d76 1
a76 1
						prtab->field_0 = v15;
d83 2
a84 2
							ENno = getenmem();
							v13 = ENno ? &enarr.TableAddr[ENno - 1] : 0;
d88 1
a88 1
                            prtab->field_0 = ENno;
a133 2
		printf("close tables = %d\n", cls_tbls);

@


1.1
log
@Initial revision
@
text
@a5 1
    short v1; // ax@@1
a6 1
    int v2; // eax@@4
a12 2
    short v9; // dx@@12
    short *v10; // edx@@22
d21 1
a21 1
    signed int v21; // [sp+14h] [bp-24h]@@11
d31 2
a32 3
    v1 = getsym();
    symbol = v1;
    if ( v1 != 2230 && v1 != 2220 )
d35 1
a35 1
			v2 = 50;                         // "missing file/pipe name"
d37 1
a37 2
			v2 = 51;                         // "invalid file/pipe name"
		loaderr(v2, sym);
d41 15
a55 1
    v3 = (unsigned short)symbol < 2220u;
d61 1
a61 1
    v7 = "tables";                             // looks like some nice undocumented "tables" modifier!!
d71 2
a72 1
    v21 = 1;
d76 2
a77 1
		v21 = 0;
a78 1
        v9 = 0;
d80 1
a80 1
			return v9;
d83 1
a83 1

a93 1
            v10 = &symbol;
d96 1
a96 1
				while ( *v10 == 2230 )      // while string literal
d115 1
a115 1
							v13 = ENno ? (ENTAB *)&enarr.TableAddr[12 * (ENno - 1)] : 0;
d126 1
a126 1
								v14 = prtab->NextPR ? (PRTAB *)&prarr.TableAddr[10 * (prtab->NextPR - 1)] : 0 ;
d139 1
a139 1
						v14 = prtab->NextPR ? (PRTAB *)&prarr.TableAddr[10 * (prtab->NextPR - 1)] : 0;
a141 1
					v10 = &symbol;
d158 1
a158 1
        loaderr(7, sym);                      // "unexpected end of line"
d163 9
a171 11
	if ( v20 <= 540 )                          // "read"
	{
		if ( v20 == 440 )                     // "close"
        {
			v18 = 0x20u;
            if ( !v21 )
				v18 = 0x08u;
			sftab->field_0 = v18;
            symbol = getsym();
		}
        goto LABEL_56;
d173 1
a173 1
    if ( v20 == 560 || v20 == 1230 )           // 560 = "write", 1230 = ???
d181 1
a181 1
        v17 = leprint();
d184 1
a184 1
			dallsfpt(&sftab);
a187 1
        goto LABEL_56;
d189 1
@
