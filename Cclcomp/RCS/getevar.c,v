head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2016.06.21.02.56.38;	author leslie;	state Exp;
branches;
next	;


desc
@move to common code
@


1.1
log
@Initial revision
@
text
@#ifndef GETEVAR_C
#define GETEVAR_C

#include <stdio.h>
#include <stdlib.h>
#include "DBdefs.h"
#include "cl4.h"

char* getevar(char *name)
{
	char *v2;
	FILE *stream;
	size_t NumBytes;
	char v9[128];
	char s[8192];

	zap(str_0, 8192u);
	v2 = getenv(name);	// 1st, look for a system variable with that name
	if ( v2 && *v2 )
	{
		cdbcpystr(str_0, trim(v2), 0);
	}
	else	// if not found, look for an entry in CLSETUP file
	{
		v2 = getenv("CLSETUP");
		if ( !v2 || !*v2 )
			v2 = "/etc/CLSETUP";	// look for a global CLSETUP file
		stream = fopen64(v2, "r");
		if ( stream )
		{
			cdbcpystr(v9, name, "=", 0);
			NumBytes = strlen(v9);
			while ( fgets(s, 8192, stream) )
			{
				if ( cmpbuf(v9, s, NumBytes) )
				{
					cdbcpystr(str_0, trim(&s[NumBytes]), 0);
					break;
				}
			}
			fclose(stream);
		}
	}
	return str_0;
}

void setupEnv()
{
	FILE *v1; // edi@@3
	char *v2; // eax@@6
	char s[8192]; // [sp+10h] [bp-2018h]@@5

	//printf("setupEnv() called\n");

	v2 = getenv("CLSETUP");
	if ( !v2 )
		v2 = "./CLSETUP";
	v1 = fopen64(v2, "r");
	//printf("setupEnv(): v1 = %d\n", v1);
	if ( v1 )
	{
		while ( fgets(s, 8192, v1) )
		{
			trim(s);
			if ( s[0] != '#' )
			{
				v2 = strchr(s, '=');
				if ( v2 )
				{
					*v2 = '=';	// seems redundant. *v2 was already a '*' ?!?
					v2 = (char*)mstrcpy(s, 0);
					//printf("setupEnv() : found : %s\n", v2);
					putenv(v2);
				}
			}
		}
		fclose(v1);
	}
}

#endif
@
