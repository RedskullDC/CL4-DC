head	1.3;
access;
symbols;
locks
	leslie:1.3; strict;
comment	@ * @;


1.3
date	2016.01.18.06.02.49;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.01.15.02.56.01;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.09.03.00.34;	author leslie;	state Exp;
branches;
next	;


desc
@initial checkin
@


1.3
log
@intermediate
@
text
@#ifndef CHECKOELIST_C
#define CHECKOELIST_C

#include <stdio.h>
#include <stdarg.h>		// for var args stuff
#include "DBdefs.h"
#include "cl4.h"

void chkoelist(ONESC *a1)
{
     ONESC *escp; // edi@@1
     BTAB *bt; // esi@@2
     PTAB *ptab; // eax@@4
     XTAB *xtab; // edx@@7
     
	 short v3; // si@@4
     short v4; // ax@@4
     size_t MaxLen; // [sp+14h] [bp-14h]@@2
     short CurrBTno; // [sp+18h] [bp-10h]@@2

     for ( escp = a1; escp; escp = escp->NextESC )
     {
          MaxLen = (signed short)(lenstr(escp->BlockName) + 1);
          bt = btab;
          CurrBTno = 0;
          if ( no_btabs > 0 )
          {
               while ( !cmpbuf(escp->BlockName, bt->BlockName, MaxLen) )
               {
                    ++CurrBTno;
                    ++bt;
                    if ( no_btabs <= CurrBTno )
                         goto LABEL_12;
               }

               v3 = bt->StartLine;
               v4 = getptabp(v3);
               ptab = PTARR(v4);
               if ( ptab->OpCode != 950 )
               {
                    while ( 1 )
                    {
                         if ( ptab->OpCode == 1 )
                         {
                              if ( ptab->TABno )
                              {
                                   xtab = &xtarr.TableAddr[ptab->TABno];
                                   if ( xtab[-1].Flags & 0x0008u )
                                        break;
                              }
                         }
                         ++v3;
                         v4 = getptabp(v3);
                         ptab = PTARR(v4);
                         if ( ptab->OpCode == 950 )
                              goto LABEL_9;
                    }
                    xtab[-1].Flags &= 0xFFF7u;
               }
LABEL_9:
               escp->BlockNo = CurrBTno;
          }
LABEL_12:
          if ( no_btabs == CurrBTno )
               loaderr(74, escp->BlockName);	// 'escape' block name not found
     }
}
#endif
@


1.2
log
@intermediate
@
text
@d11 1
a11 1
     ONESC *i; // edi@@1
a12 2
     short v3; // si@@4
     short v4; // ax@@4
d15 3
a17 1
     short v7; // ax@@8
d21 1
a21 1
     for ( i = a1; i; i = i->NextESC )
d23 1
a23 1
          MaxLen = (signed short)(lenstr(i->BlockName) + 1);
d28 1
a28 1
               while ( !cmpbuf(i->BlockName, bt->BlockName, MaxLen) )
d35 1
d48 1
a48 1
                                   if ( xtab[-1].Flags & 8 )
d53 2
a54 2
                         v7 = getptabp(v3);
                         ptab = PTARR(v7);
d61 1
a61 1
               i->BlockNo = CurrBTno;
d65 1
a65 1
               loaderr(74, i->BlockName);
@


1.1
log
@Initial revision
@
text
@d46 1
a46 1
                                   xtab = (XTAB *)&xtarr.TableAddr[52 * ptab->TABno];
@
