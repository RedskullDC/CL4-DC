head	1.4;
access;
symbols;
locks
	leslie:1.4; strict;
comment	@ * @;


1.4
date	2015.08.30.11.20.26;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2015.01.14.02.30.43;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2014.12.23.05.59.46;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.06.30.02.14.12;	author leslie;	state Exp;
branches;
next	;


desc
@routines which examine input file for tokens/literals
@


1.4
log
@intermediate
@
text
@#ifndef SYMBOLS_C
#define SYMBOLS_C

#include <stdio.h>
#include <stdarg.h>				// for var args stuff
#include <ctype.h>				// for islower() and toupper() functions
#include <stdlib.h>				// for strtod()
#include "DBdefs.h"
#include "cl4.h"
#include "reserved.h"

short loadsym(char *Symbol)
{
	ReservedWord *v1; // edi@@2
    ReservedWord *Rsv; // esi@@3
    short v3; // dx@@3
    ReservedWord *v5; // [sp+8h] [bp-10h]@@2

    if ( *Symbol )
    {
		v5 = reswords;
        //v1 = &reswords[202];	// *** should be dynamically sized ***
        v1 = &reswords[(sizeof(reswords)/ sizeof(ReservedWord)) - 1];	// Pointer to last element in table

        while ( v5 <= v1 )
		{
			Rsv = &v5[(((v1 - v5) >> 31) + v1 - v5) >> 1];// simple tree search to speed things up
			v3 = strcmp(Symbol, Rsv->Word);
			
			if (!v3)
				return (short)Rsv->Rsv;
            
			else if ( v3 > 0 )
				v5 = Rsv + 1;
            
			else	// v3 < 0
				v1 = Rsv - 1;
		}
	}
    return -1;	// error , not found
}

short loadresv(char *Symbol)
{
     ReservedWord *v1; // edi@@2
     ReservedWord *Rsv; // esi@@3
     short v3; // dx@@3
     ReservedWord *v5; // [sp+8h] [bp-10h]@@2

	if ( *Symbol )
    {
		v5 = rvwords;
        //v1 = &rvwords[11];	// *** should be dynamically sized ***
        v1 = &rvwords[(sizeof(rvwords)/ sizeof(ReservedWord)) - 1];	// Pointer to last element in table

        while ( v5 <= v1 )
        {
			Rsv = &v5[(((v1 - v5) >> 31) + v1 - v5) >> 1];// simple tree search to speed things up
			v3 = strcmp(Symbol, Rsv->Word);

			if (!v3)
				return (short)Rsv->Rsv;

			else if ( v3 > 0 )
				v5 = Rsv + 1;
            
			else	// v3 < 0
				v1 = Rsv - 1;
		}
	}
    return 0;
}

short getsym(void)
{
     short result; // ax@@8
     const char *v3; // edx@@37
     long double v4; // fst6@@54
     int NextChar; // [sp+14h] [bp-24h]@@1
     char QuoteChar; // [sp+27h] [bp-11h]@@60
     char *v10; // [sp+28h] [bp-10h]@@7

     inLit = 0;
     NextChar = c;
	//printf("getsym : 316 NextChar = %c\n",NextChar);

     if ( !symbol )
     {
          fwrite("unexpected end of file\n", 1u, 0x17u, stderr);
          fflush(stderr);
          exit(1);
     }
     if ( symbol == 930 )                       // NewLine
     {
          ++ll;
          ++lla;
          if ( codeb )
          {
               fprintf(stderr, "\r%d", (unsigned short)ll);	// last line
               fflush(stderr);
          }
     }
     v10 = sym;

     if ( !NextChar )
     {
          if ((NextChar = getnch()) == -1)
               return 0;
     }
	// ignore white space and comment lines till next alpha character

	while (isspace(NextChar) && NextChar != '\n' || NextChar == '#' && !esc_char )
    {
		if ( NextChar == '#' )	// we found a comment line/ ignore everything till after next <CR>
        {
            while ( NextChar != '\n' )
            {
                if ((NextChar = _IO_getc(MainFile)) == -1 )
				{
	                c = -1;
			        return -1;
				}
                if ( NextChar == '\\' )      // Line continue character. Bump line counters
                {
                    if ((NextChar = _IO_getc(MainFile)) == '\n')
                    {
						++ll;
                        ++lla;
                        NextChar = _IO_getc(MainFile);
                    }
				}
                if ( NextChar == -1 )
				{
					c = -1;
				    return -1;
				}
			}
 		}
        else
        {
			if ((NextChar = getnch()) == -1)
				return 0;
        }
	}
//--------------------
	// Look for a reserved word, variable/table name. or possibly a program LABEL
	if (isalpha(NextChar) || NextChar == '_' )
    {
		while ( 1 )
        {
			*v10++ = NextChar;	// copy source buffer into sym[]
            if ((NextChar = getnch()) == -1)
				return 0;

			// check if next digit is not a valid char in a variable/table name 
			if ( !(isalpha(NextChar)) && !(isdigit(NextChar)) && NextChar != '_' )
            {
				*v10 = 0;	// terminate the sym string
                if ( NextChar == ':' )      // Program LABEL:   (trumps reserved name!)
                {
					*v10++ = ':';
                    *v10 = 0;
                    symbol = 720;			// we found a program label  "LABEL:"
                    syml = strlen(sym);
                    if ((NextChar = getnch()) == -1)
						return 0;
				}
				else
				{
					symbol = loadsym(sym);
					if ( symbol < 0 ) 
						symbol = 2230;		// -1 == not in reserved words. 2230 = variable/table name
					syml = strlen(sym);
				}
				c = NextChar;
				return symbol;
			}
		}
	}
//--------------
	// look for a numeric value, may start with a '-'
	if (isdigit(NextChar) || NextChar == '-' )
    {
		//printf("getsym isdigit()\n");
		symbol = 0;
        while ( 1 )
        {
			if ( NextChar == '.' )
				symbol = 2210; // floating point literal	eg:	456.4323
			*v10++ = NextChar;
			if ((NextChar = getnch()) == -1)	// EOF
				return 0;
			
			if (isdigit(NextChar))	// **** routine doesn't check for multiple dec points ****. 34.5.789 is valid :o(
				continue;

			if ( NextChar != '.' )
			{
				*v10 = 0;				// we hit a character which wasn't a number or decimal place. terminate the string
				if ( symbol )			//true if already set to 2210
				{
					syml = strlen(sym);
					c = NextChar;
					return symbol;
				}
				if ( sym[0] != '-' || sym[1] ) // can only be true if a digit immediately followed a '-'
				{
					if ( strlen(sym) <= 9 || (v4 = strtod(sym, 0), v4 <= 2147483647.0) && v4 >= -2147483647.0 )
						symbol = 2200;		// Integer literal, and within range limits
					else
						symbol = 2210;		// floating point literal
				}
				// at this point we have a '-' 
				else if ( NextChar == '=' )
				{
					*v10++ = '=';
					*v10 = 0;
					if ((NextChar = getnch()) == -1)
						return 0;
					symbol = 1560;		// "-="
				}
				else
					symbol = 1580;		// "-"

				syml = strlen(sym);
				c = NextChar;
				return symbol;
			}
		}
	}
//---------
	if ( NextChar == '\'' || NextChar == '"' )		// looking for a string literal here
	{
		inLit = 1;
		QuoteChar = NextChar;						// Save the quote char we found to look for a match
		if ((NextChar = getnch()) == -1)			// EOF
			return 0;
		while ( NextChar != QuoteChar || esc_char )
		{
			if ( NextChar == '\n' && !esc_char )	// this allows a <CR> to end a string without a matching quote
				break;
			*v10++ = NextChar;
			if ((NextChar = getnch()) == -1)
				return 0;
		}
		if ( NextChar != QuoteChar || (NextChar = getnch(), NextChar != -1) )
		{
			*v10 = 0;
			symbol = 2220;				// string literal
            syml = strlen(sym);
            c = NextChar;
            return symbol;
		}
		return 0;
	}
	else	// everything else!
	{
		v10 = sym;
		switch (NextChar)
		{
		case '*':
			*v10++ = '*';
            if ((NextChar = getnch()) == -1)
				return 0;
			if ( NextChar == '*' )
            {
				*v10++ = '*';
                symbol = 1170;              // "**"
                if ((NextChar = getnch()) == -1)
					return 0;
				if ( NextChar == '=' )
				{
					*v10++ = '=';
                    symbol = 1160;         // "**="
                    break;	//goto LABEL_85;
				}
                *v10 = 0;
                syml = strlen(sym);
                c = NextChar;
                return symbol;
			}
            if ( NextChar != '=' )
            {
				symbol = 890;               // "*"
                *v10 = 0;
                syml = strlen(sym);
                c = NextChar;
                return symbol;
			}
            *v10++ = '=';
            symbol = 880;                    // "*="
			break;	//goto LABEL_85;

		case '<':
			*v10++ = '<';
            if ((NextChar = getnch()) == -1)
				return 0;
			if ( (unsigned int)(NextChar - 61) > 1 )
				symbol = 1840;    // "<"
			else
            {
				*v10++ = NextChar;
                symbol = 1830;        // "<=", "le"
				if ( NextChar != '=' )
					symbol = 1850;   // "<>", "ne"
                if ((NextChar = getnch()) == -1)
					return 0;
			}
            *v10 = 0;
            syml = strlen(sym);
            c = NextChar;
            return symbol;
			break;

		case '&':
			*v10++ = '&';
            NextChar = getnch();
            if ( NextChar == -1 || NextChar == '&' && (*v10++ = '&', NextChar = getnch(), NextChar == -1) )
				return 0;
			*v10 = 0;
            symbol = 80;      // "&" , "&&", "and"
			syml = strlen(sym);
			c = NextChar;
			return symbol;
			break;

		case ('|'):
			*v10++ = '|';
            NextChar = getnch();
            if ( NextChar == -1 || NextChar == ('|') && (*v10++ = '|', NextChar = getnch(), NextChar == -1) )
				return 0;
			*v10 = 0;
            symbol = 1040;    // "|", "||", "or"		"or" is caught in first block by loadsim
			syml = strlen(sym);
			c = NextChar;
			return symbol;
			break;

		case '+':
			*v10++ = '+';
            if ((NextChar = getnch()) == -1)
				return 0;
			if ( NextChar == '=' )
            {
				*v10++ = '=';
                if ((NextChar = getnch()) == -1)
					return 0;
				symbol = 40; // "+="
			}
            else
				symbol = 50; // "+"
			*v10 = 0;
            syml = strlen(sym);
            c = NextChar;
            return symbol;
			break;

		case '/':
			*v10++ = '/';
            if ((NextChar = getnch()) == -1)
				return 0;
			if ( NextChar == '=' )
            {
				*v10++ = '=';
                if ((NextChar = getnch()) == -1)
					return 0;
				symbol = 320;	// "/="
			}
            else
				symbol = 330;	// "/"
			*v10 = 0;
            syml = strlen(sym);
            c = NextChar;
            return symbol;
			break;
		
		case '%':
			*v10++ = '%';
            if ((NextChar = getnch()) == -1)
				return 0;
            if ( NextChar == '=' )
            {
				*v10++ = '=';
                if ((NextChar = getnch()) == -1)
					return 0;
				symbol = 850;// %="
			}
            else
                symbol = 860;// "%"
			*v10 = 0;
            syml = strlen(sym);
            c = NextChar;
            return symbol;
			break;

		case '>':
			*v10++ = '>';
            if ((NextChar = getnch()) == -1) return 0;
			
			if ( NextChar != '=' )
            {
				symbol = 1820;              // ">", "gt"
                *v10 = 0;
                syml = strlen(sym);
                c = NextChar;
                return symbol;
			}
            *v10++ = '=';
            symbol = 1810;                   // ">=", "ge"
			break;	//goto LABEL_85;

		default:							// default handler
            *v10++ = NextChar;
            *v10 = 0;
            symbol = loadsym(sym);			// examine list of pre-defined symbols
			//printf("getsym : 413 , ll = %d, lla = %d, symbol = %d, NextChar = x%02X %c\n",ll,lla,symbol,NextChar, NextChar);
            //if ((NextChar = getnch()) == -1)
			//	return 0;
			//syml = strlen(sym);
			//c = NextChar;
			//return symbol;
			break;
		}

// general exit routine
//LABEL_85:
		if ((NextChar = getnch()) == -1)
			return 0;
		*v10 = 0;
        syml = strlen(sym);
        c = NextChar;
        return symbol;
	}
}
#endif
@


1.3
log
@intermediate version
@
text
@d40 1
a40 1
    return -1;
a109 1
	
d146 1
a146 1
	// Look for a variable/table name. or possible a program LABEL
d159 1
a159 1
                if ( NextChar == ':' )      // Program LABEL:
a166 2
                    c = NextChar;
                    return symbol;
d168 8
a175 5
                symbol = loadsym(sym);
                if ( symbol < 0 )           // not in reserved words. 2230 = variable/table name
					symbol = 2230;
				syml = strlen(sym);
                c = NextChar;
d184 1
d188 1
a188 4
			if ( NextChar != '.' )
				goto LABEL_43;
			while ( 1 )
            {
d190 6
a195 7
LABEL_43:
                *v10++ = NextChar;
                if ((NextChar = getnch()) == -1)	// EOF
					return 0;
				
				if (isdigit(NextChar))
					break;
d197 20
a216 3
				if ( NextChar != '.' )
                {
					// we hit a character which wasn't a number or decimal place
d218 6
a223 24
                    if ( symbol ) //true if already set to 2210
					{
						syml = strlen(sym);
						c = NextChar;
						return symbol;
					}
					if ( sym[0] != '-' || sym[1] ) // can only be true if a digit immediately followed a '-'
                    {
						if ( strlen(sym) <= 9 || (v4 = strtod(sym, 0), v4 <= 2147483647.0) && v4 >= -2147483647.0 )
							symbol = 2200;		// Integer literal, and within range limits
						else
							symbol = 2210;		// floating point literal
					}
					// at this point we have a '-' 
                    else if ( NextChar == '=' )
                    {
						*v10++ = '=';
                        *v10 = 0;
                        if ((NextChar = getnch()) == -1)
							return 0;
						symbol = 1560;		// "-="
    				}
					else
						symbol = 1580;		// "-"
d225 3
a227 4
					syml = strlen(sym);
                    c = NextChar;
                    return symbol;
				}
d246 1
a246 1
		if ( NextChar != QuoteChar || (NextChar = getnch(), result = 0, NextChar != -1) )
d254 1
a254 1
		return result;
d398 2
a399 2
            if ((NextChar = getnch()) == -1)
				return 0;
a412 1
			//printf("getsym : 628 NextChar = x%02X %c\n",NextChar, NextChar);
d416 6
a421 6
			//printf("getsym : 632 symbol = %d\n",symbol);
            if ((NextChar = getnch()) == -1)
				return 0;
			syml = strlen(sym);
			c = NextChar;
			return symbol;
d426 1
a426 1
LABEL_85:
a430 1
		//DumpBlock(sym,syml + 1);
@


1.2
log
@initial checkin
@
text
@d107 1
a107 2
          NextChar = getnch();
          if ( NextChar == -1 )
a112 1
	//while ((*v7)[NextChar] & 0x2000 && NextChar != '\n' || NextChar == '#' && !esc_char )
d119 1
a119 2
				NextChar = _IO_getc(MainFile);
                if ( NextChar == -1 )
d126 1
a126 2
					NextChar = _IO_getc(MainFile);
                    if ( NextChar == '\n' )
d142 1
a142 2
			NextChar = getnch();
            if ( NextChar == -1 )
d147 1
a147 1
	//if ((*v7)[NextChar] & 0x0400 || NextChar == '_' )
d153 1
a153 2
            NextChar = getnch();
            if ( NextChar == -1 )
d156 1
a156 2
               //v2 = (*v7)[NextChar];
               //if ( !(v2 & 0x0400) && !(v2 & 0x0800) && NextChar != '_' )
d166 1
a166 2
                    NextChar = getnch();
                    if ( NextChar == -1 )
a183 1

d194 1
a194 2
                NextChar = getnch();
                if ( NextChar == -1 )	// EOF
d222 1
a222 2
                        NextChar = getnch();
                        if ( NextChar == -1 )
d228 2
a229 2
LABEL_128:
                    syml = strlen(sym);
a238 1
		printf("getsym 250 nextChar = %C\n",NextChar);
d240 2
a241 2
		QuoteChar = NextChar;	// Save the quote char we found to look for a match
		if ((NextChar = getnch()) == -1 )
a242 3

		printf("getsym 256 nextChar = %C\n",NextChar);

d248 1
a248 2
			NextChar = getnch();
			if ( NextChar == -1 )
d268 1
a268 2
            NextChar = getnch();
            if ( NextChar == -1 )
d274 1
a274 2
                NextChar = getnch();
                if ( NextChar == -1 )
d301 1
a301 2
            NextChar = getnch();
            if ( NextChar == -1 )
d311 1
a311 2
                NextChar = getnch();
                if ( NextChar == -1 )
d346 1
a346 2
            NextChar = getnch();
            if ( NextChar == -1 )
d351 1
a351 2
                NextChar = getnch();
                if ( NextChar == -1 )
d365 1
a365 2
            NextChar = getnch();
            if ( NextChar == -1 )
d370 1
a370 2
                NextChar = getnch();
				if ( NextChar == -1 )
d384 1
a384 2
            NextChar = getnch();
            if ( NextChar == -1 )
d389 1
a389 2
                NextChar = getnch();
                if ( NextChar == -1 )
d403 1
a403 2
            NextChar = getnch();
            if ( NextChar == -1 )
d423 1
a423 2
            NextChar = getnch();
            if ( NextChar == -1 )
d433 1
a433 2
		NextChar = getnch();
        if ( NextChar == -1 )
@


1.1
log
@Initial revision
@
text
@d5 3
a7 2
#include <stdarg.h>		// for var args stuff
#include <ctype.h>      // for islower() and toupper() functions
d222 1
a222 1
						if ( strlen(sym) <= 9 || (v4 = __strtod_internal(sym, 0, 0), v4 <= 2147483647.0) && v4 >= -2147483647.0 )
d250 1
d253 1
a253 2
		NextChar = getnch();
		if ( NextChar == -1 )
d256 2
@
