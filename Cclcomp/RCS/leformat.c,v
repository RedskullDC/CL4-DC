head	1.4;
access;
symbols;
locks
	leslie:1.4; strict;
comment	@ * @;


1.4
date	2016.06.01.06.18.05;	author leslie;	state Exp;
branches;
next	1.3;

1.3
date	2016.05.13.05.13.17;	author leslie;	state Exp;
branches;
next	1.2;

1.2
date	2015.07.14.12.29.08;	author leslie;	state Exp;
branches;
next	1.1;

1.1
date	2014.09.09.12.51.00;	author leslie;	state Exp;
branches;
next	;


desc
@initital checkin
@


1.4
log
@intermediate
@
text
@#ifndef LEFORMAT_C
#define LEFORMAT_C

#include <assert.h>

int leformat(int *a3, int a4)
{
	BTAB	*btb;
	PTAB	*ptab;
	
	short	blkno;
	short	PTno;
	short	expno;
	
	size_t	MaxLen;
	char	BlockName[256];		// overkill. Only needs 21
	
	//eprint("leformat *a3 = %d , a4 = %d\n", *a3,a4);
	symbol = getsym();
    if ( symbol != 2230 )                   // 2230 must be a string literal?
    {
		if ( symbol == 930 )
			loaderr(2, sym);				// "missing block name"
		else
			loaderr(33, sym);				// "unexpected symbol"
		return 0;
    }
    
	MaxLen	= fixbname(BlockName, sym);
    btb		= btab;
    blkno	= 0;
    
	if ( !btb->BlockName[0] )
		goto LABEL_11;
    while ( !cmpbuf(btb->BlockName, BlockName, MaxLen) )
    {
        blkno++;
        btb++;
        if ( !btb->BlockName[0] )
			goto LABEL_11;
    }
    if ( !btb->BlockName[0] )		// BlockName not found, forward reference
	{
LABEL_11:
		assert(blkno >= no_btabs);	// check we are beyond num_blocks limit
		newbtab();					// create new block
		assert(blkno < no_btabs);	// check block now exists
		cdbcpystr(btab[blkno].BlockName, BlockName, 0);
	}
//----------------------
    if ( !a4 )
    {
		PTno = (*a3)++;
        ptab = PTARR(getptabp(PTno));
        ptab->OpCode = 950;			// break OpCode
    }
    
	PTno = (*a3)++;
    allptpt(getptabp(PTno), &ptab);
    ptab->OpCode	= 600;			// format OpCode
    ptab->Operand	= blkno;
    ptab->SrcLineNo = lla;

    symbol = getsym();
    if ( symbol == 2230 )			// table/variable name
    {
		expno = getenmem();
        if ( !gettfexp(expno) )
        {
			loaderr(8, sym);		// "invalid field name or number"
            dallptpt(&ptab);
            return 0;
		}
        ptab->TABno = expno;
        symbol = getsym();
	}
    dallptpt(&ptab);
    return 1;						// exit_success
}

#endif
@


1.3
log
@intermediate
@
text
@d8 2
a9 2
	BTAB *btb;
	PTAB *ptab;
d11 3
a13 3
	short blkno;
	short PTno;
	short expno;
d15 2
a16 2
	size_t MaxLen;
	char BlockName[256];		// overkill. Only needs 21
d45 3
a47 8
		//if ( blkno < no_btabs )
		//	__assert_fail("i >= no_btabs", "leformat.c", 41, "leformat");
		assert(blkno >= no_btabs);

		newbtab();
        //if ( blkno >= no_btabs )
		//	__assert_fail("i < no_btabs", "leformat.c", 44, "leformat");
		assert(blkno < no_btabs);
d55 1
a55 1
        ptab->OpCode = 950;		// break OpCode
d65 1
a65 1
    if ( symbol == 2230 )		// table/variable name
d70 1
a70 1
			loaderr(8, sym);	// "invalid field name or number"
d78 1
a78 1
    return 1;
@


1.2
log
@intermediate
@
text
@d4 3
a6 1
int leformat(short *a3, int a4)
d8 6
a13 2
	BTAB *btb; // esi@@6
	PTAB *ptab; // [sp+1Ch] [bp-5Ch]@@18
d15 2
a16 4
	short v4; // edi@@6
	short v6; // ST00_2@@18
	short v8; // ST00_2@@19
	short v10; // si@@20
d18 1
a18 3
	size_t MaxLen; // [sp+18h] [bp-60h]@@6
	char v17[8192]; // [sp+20h] [bp-58h]@@6

d29 3
a31 3
	MaxLen = fixbname(v17, sym);
    btb = btab;
    v4 = 0;
d35 1
a35 1
    while ( !cmpbuf(btb->BlockName, v17, MaxLen) )
d37 1
a37 1
        v4++;
d42 1
a42 1
    if ( !btb->BlockName[0] )
d45 3
a47 2
		if ( no_btabs > v4 )
			__assert_fail("i >= no_btabs", "leformat.c", 41, "leformat");
d50 4
a53 4
        if ( no_btabs <= v4 )
			__assert_fail("i < no_btabs", "leformat.c", 44, "leformat");

		cdbcpystr(btab[v4].BlockName, v17, 0);
d58 2
a59 2
		v6 = (*(int*)a3)++;
        ptab = PTARR(getptabp(v6));
d63 4
a66 4
	v8 = (*(int*)a3)++;
    allptpt(getptabp(v8), &ptab);
    ptab->OpCode = 600;			// format OpCode
    ptab->Operand = v4;
d72 2
a73 2
		v10 = getenmem();
        if ( !gettfexp(v10) )
d79 1
a79 1
        ptab->TABno = v10;
@


1.1
log
@Initial revision
@
text
@d6 10
a15 10
     BTAB *v3; // esi@@6
     short v4; // edi@@6
     short v6; // ST00_2@@18
     short v7; // ax@@18
     short v8; // ST00_2@@19
     short v9; // ax@@19
     short v10; // si@@20
     size_t MaxLen; // [sp+18h] [bp-60h]@@6
     PTAB *ptab; // [sp+1Ch] [bp-5Ch]@@18
     char v17[8192]; // [sp+20h] [bp-58h]@@6
d26 3
a28 2
    MaxLen = fixbname(v17, sym);
    v3 = btab;
d31 1
a31 1
	if ( !v3->BlockName[0] )
d33 1
a33 1
    while ( !cmpbuf(v3->BlockName, v17, MaxLen) )
d36 2
a37 2
        v3++;
        if ( !v3->BlockName[0] )
d40 1
a40 1
    if ( !v3->BlockName[0] )
d56 1
a56 2
        v7 = getptabp(v6);
        ptab = PTARR(v7);
d59 3
a61 3
    v8 = (*(int*)a3)++;
    v9 = getptabp(v8);
    allptpt(v9, &ptab);
d67 1
a67 1
    if ( symbol == 2230 )
@
